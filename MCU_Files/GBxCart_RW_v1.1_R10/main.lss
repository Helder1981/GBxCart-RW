
main.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         0000116e  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000000  00800060  0000116e  00001202  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          0000011a  00800060  00800060  00001202  2**0
                  ALLOC
  3 .comment      0000005c  00000000  00000000  00001202  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00001260  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000028  00000000  00000000  000012a0  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   0000229a  00000000  00000000  000012c8  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000700  00000000  00000000  00003562  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   0000122d  00000000  00000000  00003c62  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000314  00000000  00000000  00004e90  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000005f8  00000000  00000000  000051a4  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00001900  00000000  00000000  0000579c  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000060  00000000  00000000  0000709c  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	10 c0       	rjmp	.+32     	; 0x22 <__ctors_end>
       2:	1f c0       	rjmp	.+62     	; 0x42 <__bad_interrupt>
       4:	1e c0       	rjmp	.+60     	; 0x42 <__bad_interrupt>
       6:	1d c0       	rjmp	.+58     	; 0x42 <__bad_interrupt>
       8:	1c c0       	rjmp	.+56     	; 0x42 <__bad_interrupt>
       a:	1b c0       	rjmp	.+54     	; 0x42 <__bad_interrupt>
       c:	1a c0       	rjmp	.+52     	; 0x42 <__bad_interrupt>
       e:	19 c0       	rjmp	.+50     	; 0x42 <__bad_interrupt>
      10:	18 c0       	rjmp	.+48     	; 0x42 <__bad_interrupt>
      12:	17 c0       	rjmp	.+46     	; 0x42 <__bad_interrupt>
      14:	16 c0       	rjmp	.+44     	; 0x42 <__bad_interrupt>
      16:	15 c0       	rjmp	.+42     	; 0x42 <__bad_interrupt>
      18:	14 c0       	rjmp	.+40     	; 0x42 <__bad_interrupt>
      1a:	13 c0       	rjmp	.+38     	; 0x42 <__bad_interrupt>
      1c:	12 c0       	rjmp	.+36     	; 0x42 <__bad_interrupt>
      1e:	11 c0       	rjmp	.+34     	; 0x42 <__bad_interrupt>
      20:	10 c0       	rjmp	.+32     	; 0x42 <__bad_interrupt>

00000022 <__ctors_end>:
      22:	11 24       	eor	r1, r1
      24:	1f be       	out	0x3f, r1	; 63
      26:	cf e5       	ldi	r28, 0x5F	; 95
      28:	d2 e0       	ldi	r29, 0x02	; 2
      2a:	de bf       	out	0x3e, r29	; 62
      2c:	cd bf       	out	0x3d, r28	; 61

0000002e <__do_clear_bss>:
      2e:	21 e0       	ldi	r18, 0x01	; 1
      30:	a0 e6       	ldi	r26, 0x60	; 96
      32:	b0 e0       	ldi	r27, 0x00	; 0
      34:	01 c0       	rjmp	.+2      	; 0x38 <.do_clear_bss_start>

00000036 <.do_clear_bss_loop>:
      36:	1d 92       	st	X+, r1

00000038 <.do_clear_bss_start>:
      38:	aa 37       	cpi	r26, 0x7A	; 122
      3a:	b2 07       	cpc	r27, r18
      3c:	e1 f7       	brne	.-8      	; 0x36 <.do_clear_bss_loop>
      3e:	ea d2       	rcall	.+1492   	; 0x614 <main>
      40:	94 c8       	rjmp	.-3800   	; 0xfffff16a <__eeprom_end+0xff7ef16a>

00000042 <__bad_interrupt>:
      42:	de cf       	rjmp	.-68     	; 0x0 <__vectors>

00000044 <USART_Receive>:
uint16_t flashWriteCycle[3][2];


// Receive USART data
uint8_t USART_Receive(void) {
	while ( !(UCSRA & (1<<RXC)) ); // Wait for data to be received
      44:	5f 9b       	sbis	0x0b, 7	; 11
      46:	fe cf       	rjmp	.-4      	; 0x44 <USART_Receive>
	return UDR; // Get and return received data from buffer
      48:	8c b1       	in	r24, 0x0c	; 12
}
      4a:	08 95       	ret

0000004c <USART_Transmit>:

// Transmit USART data
void USART_Transmit(unsigned char data) {
	while ( !( UCSRA & (1<<UDRE)) ); // Wait for empty transmit buffer
      4c:	5d 9b       	sbis	0x0b, 5	; 11
      4e:	fe cf       	rjmp	.-4      	; 0x4c <USART_Transmit>
	UDR = data;
      50:	8c b9       	out	0x0c, r24	; 12
      52:	08 95       	ret

00000054 <usart_read_bytes>:
}

// Read 1-256 bytes from the USART 
void usart_read_bytes(int count) {
      54:	0f 93       	push	r16
      56:	1f 93       	push	r17
      58:	cf 93       	push	r28
      5a:	df 93       	push	r29
      5c:	8c 01       	movw	r16, r24
	for (int x = 0; x < count; x++) {
      5e:	ce e6       	ldi	r28, 0x6E	; 110
      60:	d0 e0       	ldi	r29, 0x00	; 0
      62:	ce 01       	movw	r24, r28
      64:	8e 56       	subi	r24, 0x6E	; 110
      66:	90 40       	sbci	r25, 0x00	; 0
      68:	80 17       	cp	r24, r16
      6a:	91 07       	cpc	r25, r17
      6c:	1c f4       	brge	.+6      	; 0x74 <usart_read_bytes+0x20>
		receivedBuffer[x] = USART_Receive();
      6e:	ea df       	rcall	.-44     	; 0x44 <USART_Receive>
      70:	89 93       	st	Y+, r24
      72:	f7 cf       	rjmp	.-18     	; 0x62 <usart_read_bytes+0xe>
	}
}
      74:	df 91       	pop	r29
      76:	cf 91       	pop	r28
      78:	1f 91       	pop	r17
      7a:	0f 91       	pop	r16
      7c:	08 95       	ret

0000007e <usart_read_chars>:

// Read the USART until a 0 (string terminator byte) is received
void usart_read_chars(void) {
      7e:	cf 93       	push	r28
      80:	df 93       	push	r29
      82:	ce e6       	ldi	r28, 0x6E	; 110
      84:	d0 e0       	ldi	r29, 0x00	; 0
	int x = 0;
	while (1) {
		receivedBuffer[x] = USART_Receive();
      86:	de df       	rcall	.-68     	; 0x44 <USART_Receive>
      88:	89 93       	st	Y+, r24
		if (receivedBuffer[x] == 0) {
      8a:	81 11       	cpse	r24, r1
      8c:	fc cf       	rjmp	.-8      	; 0x86 <usart_read_chars+0x8>
			break;
		}
		x++;
	}
}
      8e:	df 91       	pop	r29
      90:	cf 91       	pop	r28
      92:	08 95       	ret

00000094 <rd_wr_csmreq_cs2_reset>:

// Turn RD, WR, CS/MREQ and CS2 to high so they are deselected (reset state)
void rd_wr_csmreq_cs2_reset(void) {
	cs2Pin_high; // CS2 off
      94:	3a 9a       	sbi	0x07, 2	; 7
	cs_mreqPin_high; // CS/MREQ off
      96:	94 9a       	sbi	0x12, 4	; 18
	rdPin_high; // RD off
      98:	95 9a       	sbi	0x12, 5	; 18
	wrPin_high; // WR off
      9a:	96 9a       	sbi	0x12, 6	; 18
      9c:	08 95       	ret

0000009e <gb_mode>:
// ****** Gameboy / Gameboy Colour functions ******

// Set Gameboy mode
void gb_mode(void) {
	// Set inputs
	PORT_DATA7_0 = 0;
      9e:	15 ba       	out	0x15, r1	; 21
	DDR_DATA7_0 = 0;
      a0:	14 ba       	out	0x14, r1	; 20
	
	// Set outputs
	PORT_ADDR7_0 = 0;
      a2:	18 ba       	out	0x18, r1	; 24
	PORT_ADDR15_8 = 0;
      a4:	1b ba       	out	0x1b, r1	; 27
	DDR_ADDR7_0 = 0xFF;
      a6:	8f ef       	ldi	r24, 0xFF	; 255
      a8:	87 bb       	out	0x17, r24	; 23
	DDR_ADDR15_8 = 0xFF;
      aa:	8a bb       	out	0x1a, r24	; 26
      ac:	08 95       	ret

000000ae <set_16bit_address>:
}

// Set the 16 bit address on A15-0
void set_16bit_address(uint16_t address) {
	PORT_ADDR15_8 = (address >> 8);
      ae:	9b bb       	out	0x1b, r25	; 27
	PORT_ADDR7_0 = (address & 0xFF);
      b0:	88 bb       	out	0x18, r24	; 24
      b2:	08 95       	ret

000000b4 <read_8bit_data>:
}

// Set the address and read a byte from the 8 bit data line
uint8_t read_8bit_data(uint16_t address) {
	set_16bit_address(address);
      b4:	fc df       	rcall	.-8      	; 0xae <set_16bit_address>
	
	cs_mreqPin_low;
      b6:	94 98       	cbi	0x12, 4	; 18
	rdPin_low;
      b8:	95 98       	cbi	0x12, 5	; 18
	
	asm volatile("nop"); // Delay a little (minimum needed is 1 nops, 2 nops for GB camera)
      ba:	00 00       	nop
	asm volatile("nop");
      bc:	00 00       	nop
	uint8_t data = PIN_DATA7_0; // Read data
      be:	83 b3       	in	r24, 0x13	; 19
	
	rdPin_high;
      c0:	95 9a       	sbi	0x12, 5	; 18
	cs_mreqPin_high;
      c2:	94 9a       	sbi	0x12, 4	; 18
	
	return data;
}
      c4:	08 95       	ret

000000c6 <write_8bit_data>:

// Set the address and write a byte to the 8 bit data line and pulse cs/mREQ if writing to RAM
void write_8bit_data(uint16_t address, uint8_t data, uint8_t type) {
      c6:	cf 93       	push	r28
      c8:	df 93       	push	r29
      ca:	d6 2f       	mov	r29, r22
      cc:	c4 2f       	mov	r28, r20
	set_16bit_address(address);
      ce:	ef df       	rcall	.-34     	; 0xae <set_16bit_address>
	
	DDR_DATA7_0 = 0xFF; // Set data pins as outputs
      d0:	8f ef       	ldi	r24, 0xFF	; 255
      d2:	84 bb       	out	0x14, r24	; 20
	PORT_DATA7_0 = data; // Set data
      d4:	d5 bb       	out	0x15, r29	; 21
	
	// Pulse WR and mREQ if the type matches
	wrPin_low;
      d6:	96 98       	cbi	0x12, 6	; 18
	if (type == MEMORY_WRITE) {
      d8:	c1 30       	cpi	r28, 0x01	; 1
      da:	09 f4       	brne	.+2      	; 0xde <write_8bit_data+0x18>
		cs_mreqPin_low;
      dc:	94 98       	cbi	0x12, 4	; 18
	}
	
	asm volatile("nop");
      de:	00 00       	nop
	
	if (type == MEMORY_WRITE) {
      e0:	c1 30       	cpi	r28, 0x01	; 1
      e2:	09 f4       	brne	.+2      	; 0xe6 <write_8bit_data+0x20>
		cs_mreqPin_high;
      e4:	94 9a       	sbi	0x12, 4	; 18
	}
	wrPin_high;
      e6:	96 9a       	sbi	0x12, 6	; 18
	
	// Clear data outputs and set data pins as inputs
	PORT_DATA7_0 = 0;
      e8:	15 ba       	out	0x15, r1	; 21
	DDR_DATA7_0 = 0;
      ea:	14 ba       	out	0x14, r1	; 20
}
      ec:	df 91       	pop	r29
      ee:	cf 91       	pop	r28
      f0:	08 95       	ret

000000f2 <gba_mode>:
// ****** Gameboy Advance functions ****** 

// Set GBA mode
void gba_mode(void) {
	// Set outputs for reading ROM addresses as default
	GBA_PORT_ROM_ADDR7_0 = 0;
      f2:	18 ba       	out	0x18, r1	; 24
	GBA_PORT_ROM_ADDR15_8 = 0;
      f4:	1b ba       	out	0x1b, r1	; 27
	GBA_PORT_ROM_ADDR23_16 = 0;
      f6:	15 ba       	out	0x15, r1	; 21
	GBA_DDR_ROM_ADDR7_0 = 0xFF;
      f8:	8f ef       	ldi	r24, 0xFF	; 255
      fa:	87 bb       	out	0x17, r24	; 23
	GBA_DDR_ROM_ADDR15_8 = 0xFF;
      fc:	8a bb       	out	0x1a, r24	; 26
	GBA_DDR_ROM_ADDR23_16 = 0xFF;
      fe:	84 bb       	out	0x14, r24	; 20
     100:	08 95       	ret

00000102 <gba_set_24bit_address>:
}

// Set the 24 bit address on A23-0
void gba_set_24bit_address(uint32_t address) {	
     102:	0f 93       	push	r16
     104:	1f 93       	push	r17
	GBA_PORT_ROM_ADDR23_16 = 0; // Set 0-23 address lines low and set as outputs
     106:	15 ba       	out	0x15, r1	; 21
	GBA_PORT_ROM_ADDR15_8 = 0;
     108:	1b ba       	out	0x1b, r1	; 27
	GBA_PORT_ROM_ADDR7_0 = 0;
     10a:	18 ba       	out	0x18, r1	; 24
	GBA_DDR_ROM_ADDR23_16 = 0xFF;
     10c:	2f ef       	ldi	r18, 0xFF	; 255
     10e:	24 bb       	out	0x14, r18	; 20
	GBA_DDR_ROM_ADDR15_8 = 0xFF;
     110:	2a bb       	out	0x1a, r18	; 26
	GBA_DDR_ROM_ADDR7_0 = 0xFF;
     112:	27 bb       	out	0x17, r18	; 23
	
	GBA_PORT_ROM_ADDR23_16 = (address >> 16);
     114:	8c 01       	movw	r16, r24
     116:	22 27       	eor	r18, r18
     118:	33 27       	eor	r19, r19
     11a:	05 bb       	out	0x15, r16	; 21
	GBA_PORT_ROM_ADDR15_8 = (address >> 8);
     11c:	07 2f       	mov	r16, r23
     11e:	18 2f       	mov	r17, r24
     120:	29 2f       	mov	r18, r25
     122:	33 27       	eor	r19, r19
     124:	0b bb       	out	0x1b, r16	; 27
	GBA_PORT_ROM_ADDR7_0 = (address & 0xFF);
     126:	68 bb       	out	0x18, r22	; 24
}
     128:	1f 91       	pop	r17
     12a:	0f 91       	pop	r16
     12c:	08 95       	ret

0000012e <gba_read_16bit_data>:

// ---------- ROM/SRAM ----------

// Read a byte from the 16 bit data line non-sequentially
uint16_t gba_read_16bit_data(uint32_t address) {
	gba_set_24bit_address(address);
     12e:	e9 df       	rcall	.-46     	; 0x102 <gba_set_24bit_address>
	
	cs_mreqPin_low;
     130:	94 98       	cbi	0x12, 4	; 18
	
	GBA_PORT_ROM_ADDR15_8 = 0; // Set A16-A0 address lines low and set as inputs for the data to be read out
     132:	1b ba       	out	0x1b, r1	; 27
	GBA_PORT_ROM_ADDR7_0 = 0;
     134:	18 ba       	out	0x18, r1	; 24
	GBA_DDR_ROM_ADDR15_8 = 0;
     136:	1a ba       	out	0x1a, r1	; 26
	GBA_DDR_ROM_ADDR7_0 = 0;
     138:	17 ba       	out	0x17, r1	; 23
	
	rdPin_low;
     13a:	95 98       	cbi	0x12, 5	; 18
	asm volatile("nop");
     13c:	00 00       	nop
	
	uint16_t data = (GBA_PIN_ROM_DATA15_8 << 8) | GBA_PIN_ROM_DATA7_0; // Read data
     13e:	29 b3       	in	r18, 0x19	; 25
     140:	86 b3       	in	r24, 0x16	; 22
	
	rdPin_high;
     142:	95 9a       	sbi	0x12, 5	; 18
	cs_mreqPin_high;
     144:	94 9a       	sbi	0x12, 4	; 18
	
	return data;
     146:	90 e0       	ldi	r25, 0x00	; 0
}
     148:	92 2b       	or	r25, r18
     14a:	08 95       	ret

0000014c <gba_read_ram_8bit_data>:

// Set the address and read a byte from the 8 bit data line
uint8_t gba_read_ram_8bit_data(uint16_t address) {
	set_16bit_address(address);
     14c:	b0 df       	rcall	.-160    	; 0xae <set_16bit_address>
	
	rdPin_low;
     14e:	95 98       	cbi	0x12, 5	; 18
	cs2Pin_low; // CS2 pin low for SRAM/Flash select
     150:	3a 98       	cbi	0x07, 2	; 7
	
	asm volatile("nop"); // Delay a little (minimum needed is 2)
     152:	00 00       	nop
	asm volatile("nop");
     154:	00 00       	nop
	
	uint8_t data = GBA_PIN_RAM_DATA7_0; // Read data
     156:	83 b3       	in	r24, 0x13	; 19
	
	cs2Pin_high;
     158:	3a 9a       	sbi	0x07, 2	; 7
	rdPin_high;
     15a:	95 9a       	sbi	0x12, 5	; 18
	
	return data;
}
     15c:	08 95       	ret

0000015e <gba_write_ram_8bit_data>:

// Set the address and write a byte to the 8 bit data line 
void gba_write_ram_8bit_data(uint16_t address, uint8_t data) {
     15e:	cf 93       	push	r28
     160:	c6 2f       	mov	r28, r22
	set_16bit_address(address);
     162:	a5 df       	rcall	.-182    	; 0xae <set_16bit_address>
	
	GBA_DDR_RAM_DATA7_0 = 0xFF; // Set data pins as outputs
     164:	8f ef       	ldi	r24, 0xFF	; 255
     166:	84 bb       	out	0x14, r24	; 20
	GBA_PORT_RAM_DATA7_0 = data; // Set data
     168:	c5 bb       	out	0x15, r28	; 21
	
	// Pulse WR
	wrPin_low;
     16a:	96 98       	cbi	0x12, 6	; 18
	cs2Pin_low; // CS2 pin low for SRAM/Flash select
     16c:	3a 98       	cbi	0x07, 2	; 7
	
	asm volatile("nop");
     16e:	00 00       	nop
	asm volatile("nop");
     170:	00 00       	nop
	
	cs2Pin_high;
     172:	3a 9a       	sbi	0x07, 2	; 7
	wrPin_high;
     174:	96 9a       	sbi	0x12, 6	; 18
	
	// Clear data outputs and set data pins as inputs
	GBA_PORT_RAM_DATA7_0 = 0;
     176:	15 ba       	out	0x15, r1	; 21
	GBA_DDR_RAM_DATA7_0 = 0;
     178:	14 ba       	out	0x14, r1	; 20
}
     17a:	cf 91       	pop	r28
     17c:	08 95       	ret

0000017e <gba_eeprom_mode>:

// ---------- EEPROM ----------

// Set address/data all high (includes AD0/A23)
void gba_eeprom_mode (void) {
	GBA_DDR_ROM_ADDR7_0 = 0xFF;
     17e:	8f ef       	ldi	r24, 0xFF	; 255
     180:	87 bb       	out	0x17, r24	; 23
	GBA_DDR_ROM_ADDR15_8 = 0xFF;
     182:	8a bb       	out	0x1a, r24	; 26
	GBA_DDR_ROM_ADDR23_16 = 0xFF;
     184:	84 bb       	out	0x14, r24	; 20
	GBA_PORT_ROM_ADDR7_0 = 0x80;
     186:	90 e8       	ldi	r25, 0x80	; 128
     188:	98 bb       	out	0x18, r25	; 24
	GBA_PORT_ROM_ADDR15_8 = 0xFF;
     18a:	8b bb       	out	0x1b, r24	; 27
	GBA_PORT_ROM_ADDR23_16 = 0xFF;
     18c:	85 bb       	out	0x15, r24	; 21
     18e:	08 95       	ret

00000190 <gba_eeprom_set_address>:
}

// Send out EEPROM address serially (WR clock, AD0 data out)
void gba_eeprom_set_address(uint16_t address, uint8_t eepromSize, uint8_t command) {
	cs_mreqPin_low;
     190:	94 98       	cbi	0x12, 4	; 18
	
	int8_t x = 0;
	if (eepromSize == EEPROM_64KBIT) {
     192:	62 30       	cpi	r22, 0x02	; 2
     194:	49 f4       	brne	.+18     	; 0x1a8 <gba_eeprom_set_address+0x18>
		if (command == EEPROM_READ) {
     196:	41 11       	cpse	r20, r1
     198:	05 c0       	rjmp	.+10     	; 0x1a4 <gba_eeprom_set_address+0x14>
			address |= (1<<15) | (1<<14); // Set upper 2 bits high for read request
     19a:	90 6c       	ori	r25, 0xC0	; 192
		}
		else {
			address |= (1<<15); // Set upper 1 bit high for write request
		}
		x = 15;
     19c:	2f e0       	ldi	r18, 0x0F	; 15
		x = 7;
	}
	
	// Loop through address, 8 or 16 bits depending on EEPROM (includes the 2 bits for request type)
	while (x >= 0) {
		if (address & (1<<x)) {
     19e:	e1 e0       	ldi	r30, 0x01	; 1
     1a0:	f0 e0       	ldi	r31, 0x00	; 0
     1a2:	13 c0       	rjmp	.+38     	; 0x1ca <gba_eeprom_set_address+0x3a>
	if (eepromSize == EEPROM_64KBIT) {
		if (command == EEPROM_READ) {
			address |= (1<<15) | (1<<14); // Set upper 2 bits high for read request
		}
		else {
			address |= (1<<15); // Set upper 1 bit high for write request
     1a4:	90 68       	ori	r25, 0x80	; 128
     1a6:	fa cf       	rjmp	.-12     	; 0x19c <gba_eeprom_set_address+0xc>
		}
		x = 15;
	}
	else {
		if (command == EEPROM_READ) {
     1a8:	41 11       	cpse	r20, r1
     1aa:	02 c0       	rjmp	.+4      	; 0x1b0 <gba_eeprom_set_address+0x20>
			address |= (1<<7) | (1<<6);
     1ac:	80 6c       	ori	r24, 0xC0	; 192
     1ae:	01 c0       	rjmp	.+2      	; 0x1b2 <gba_eeprom_set_address+0x22>
		}
		else {
			address |= (1<<7);
     1b0:	80 68       	ori	r24, 0x80	; 128
		}
		x = 7;
     1b2:	27 e0       	ldi	r18, 0x07	; 7
     1b4:	f4 cf       	rjmp	.-24     	; 0x19e <gba_eeprom_set_address+0xe>
	while (x >= 0) {
		if (address & (1<<x)) {
			ad0Pin_high;
		}
		else {
			ad0Pin_low;
     1b6:	c0 98       	cbi	0x18, 0	; 24
		}
		
		wrPin_low; // CLK
     1b8:	96 98       	cbi	0x12, 6	; 18
		asm ("nop");
     1ba:	00 00       	nop
		asm ("nop");
     1bc:	00 00       	nop
		wrPin_high; 
     1be:	96 9a       	sbi	0x12, 6	; 18
		asm ("nop");
     1c0:	00 00       	nop
		asm ("nop");
     1c2:	00 00       	nop
     1c4:	21 50       	subi	r18, 0x01	; 1
		}
		x = 7;
	}
	
	// Loop through address, 8 or 16 bits depending on EEPROM (includes the 2 bits for request type)
	while (x >= 0) {
     1c6:	27 fd       	sbrc	r18, 7
     1c8:	0d c0       	rjmp	.+26     	; 0x1e4 <gba_eeprom_set_address+0x54>
		if (address & (1<<x)) {
     1ca:	bf 01       	movw	r22, r30
     1cc:	02 2e       	mov	r0, r18
     1ce:	02 c0       	rjmp	.+4      	; 0x1d4 <gba_eeprom_set_address+0x44>
     1d0:	66 0f       	add	r22, r22
     1d2:	77 1f       	adc	r23, r23
     1d4:	0a 94       	dec	r0
     1d6:	e2 f7       	brpl	.-8      	; 0x1d0 <gba_eeprom_set_address+0x40>
     1d8:	68 23       	and	r22, r24
     1da:	79 23       	and	r23, r25
     1dc:	67 2b       	or	r22, r23
     1de:	59 f3       	breq	.-42     	; 0x1b6 <gba_eeprom_set_address+0x26>
			ad0Pin_high;
     1e0:	c0 9a       	sbi	0x18, 0	; 24
     1e2:	ea cf       	rjmp	.-44     	; 0x1b8 <gba_eeprom_set_address+0x28>
		
		x--;
	}
	
	// Only send stop bit (0) and WR/CS high if reading, as writing is done in 1 continuous chunk
	if (command == EEPROM_READ) {  
     1e4:	41 11       	cpse	r20, r1
     1e6:	07 c0       	rjmp	.+14     	; 0x1f6 <gba_eeprom_set_address+0x66>
		ad0Pin_low;
     1e8:	c0 98       	cbi	0x18, 0	; 24
		asm ("nop");
     1ea:	00 00       	nop
		wrPin_low;
     1ec:	96 98       	cbi	0x12, 6	; 18
		asm ("nop");
     1ee:	00 00       	nop
		asm ("nop");
     1f0:	00 00       	nop
		
		wrPin_high;
     1f2:	96 9a       	sbi	0x12, 6	; 18
		cs_mreqPin_high;
     1f4:	94 9a       	sbi	0x12, 4	; 18
     1f6:	08 95       	ret

000001f8 <gba_eeprom_read>:
	}
}

// Read 8 bytes from the EEPROM address, data is valid on rising edge
void gba_eeprom_read(uint16_t address, uint8_t eepromSize) {
	gba_eeprom_set_address(address, eepromSize, EEPROM_READ);
     1f8:	40 e0       	ldi	r20, 0x00	; 0
     1fa:	ca df       	rcall	.-108    	; 0x190 <gba_eeprom_set_address>
	
	// Set AD0 pin as input
	GBA_PORT_EEPROM_DATA7_0 &= ~(1<<AD0);
     1fc:	c0 98       	cbi	0x18, 0	; 24
	GBA_DDR_EEPROM_DATA7_0 &= ~(1<<AD0);
     1fe:	b8 98       	cbi	0x17, 0	; 23
	
	cs_mreqPin_low;
     200:	94 98       	cbi	0x12, 4	; 18
     202:	84 e0       	ldi	r24, 0x04	; 4
	
	// Ignore first 4 bits
	for (int8_t x = 0; x < 4; x++) {
		rdPin_low; // CLK
     204:	95 98       	cbi	0x12, 5	; 18
		asm ("nop");
     206:	00 00       	nop
		asm ("nop");
     208:	00 00       	nop
		rdPin_high; 
     20a:	95 9a       	sbi	0x12, 5	; 18
		asm ("nop");
     20c:	00 00       	nop
		asm ("nop");
     20e:	00 00       	nop
     210:	81 50       	subi	r24, 0x01	; 1
	GBA_DDR_EEPROM_DATA7_0 &= ~(1<<AD0);
	
	cs_mreqPin_low;
	
	// Ignore first 4 bits
	for (int8_t x = 0; x < 4; x++) {
     212:	c1 f7       	brne	.-16     	; 0x204 <gba_eeprom_read+0xc>
     214:	ef e6       	ldi	r30, 0x6F	; 111
     216:	f1 e0       	ldi	r31, 0x01	; 1
			asm ("nop");
			asm ("nop");
			rdPin_high;
			
			if (GBA_PIN_EEPROM_DATA7_0 & (1<<AD0)) {
				data |= (1<<x);
     218:	41 e0       	ldi	r20, 0x01	; 1
     21a:	50 e0       	ldi	r21, 0x00	; 0
	
	// Set AD0 pin as input
	GBA_PORT_EEPROM_DATA7_0 &= ~(1<<AD0);
	GBA_DDR_EEPROM_DATA7_0 &= ~(1<<AD0);
	
	cs_mreqPin_low;
     21c:	87 e0       	ldi	r24, 0x07	; 7
     21e:	90 e0       	ldi	r25, 0x00	; 0
     220:	20 e0       	ldi	r18, 0x00	; 0
	
	// Read out 64 bits
	for (uint8_t c = 0; c < 8; c++) {
		uint8_t data = 0;
		for (int8_t x = 7; x >= 0; x--) {
			rdPin_low; // CLK
     222:	95 98       	cbi	0x12, 5	; 18
			asm ("nop");
     224:	00 00       	nop
			asm ("nop");
     226:	00 00       	nop
			rdPin_high;
     228:	95 9a       	sbi	0x12, 5	; 18
			
			if (GBA_PIN_EEPROM_DATA7_0 & (1<<AD0)) {
     22a:	b0 9b       	sbis	0x16, 0	; 22
     22c:	07 c0       	rjmp	.+14     	; 0x23c <gba_eeprom_read+0x44>
				data |= (1<<x);
     22e:	ba 01       	movw	r22, r20
     230:	08 2e       	mov	r0, r24
     232:	01 c0       	rjmp	.+2      	; 0x236 <gba_eeprom_read+0x3e>
     234:	66 0f       	add	r22, r22
     236:	0a 94       	dec	r0
     238:	ea f7       	brpl	.-6      	; 0x234 <gba_eeprom_read+0x3c>
     23a:	26 2b       	or	r18, r22
     23c:	01 97       	sbiw	r24, 0x01	; 1
     23e:	88 f7       	brcc	.-30     	; 0x222 <gba_eeprom_read+0x2a>
			}
		}
		eepromBuffer[c] = data;
     240:	21 93       	st	Z+, r18
		asm ("nop");
		asm ("nop");
	}
	
	// Read out 64 bits
	for (uint8_t c = 0; c < 8; c++) {
     242:	81 e0       	ldi	r24, 0x01	; 1
     244:	e7 37       	cpi	r30, 0x77	; 119
     246:	f8 07       	cpc	r31, r24
     248:	49 f7       	brne	.-46     	; 0x21c <gba_eeprom_read+0x24>
			}
		}
		eepromBuffer[c] = data;
	}
	
	cs_mreqPin_high;
     24a:	94 9a       	sbi	0x12, 4	; 18
	
	// Set AD0 pin as output
	GBA_PORT_EEPROM_DATA7_0 |= (1<<AD0);
     24c:	c0 9a       	sbi	0x18, 0	; 24
	GBA_DDR_EEPROM_DATA7_0 |= (1<<AD0);
     24e:	b8 9a       	sbi	0x17, 0	; 23
     250:	08 95       	ret

00000252 <gba_eeprom_write>:
}

// Write 8 bytes to the EEPROM address
void gba_eeprom_write(uint16_t address, uint8_t eepromSize) {
	gba_eeprom_set_address(address, eepromSize, EEPROM_WRITE);
     252:	41 e0       	ldi	r20, 0x01	; 1
     254:	9d df       	rcall	.-198    	; 0x190 <gba_eeprom_set_address>
     256:	ef e6       	ldi	r30, 0x6F	; 111
     258:	f1 e0       	ldi	r31, 0x01	; 1
     25a:	48 e0       	ldi	r20, 0x08	; 8
	GBA_PORT_EEPROM_DATA7_0 |= (1<<AD0);
	GBA_DDR_EEPROM_DATA7_0 |= (1<<AD0);
}

// Write 8 bytes to the EEPROM address
void gba_eeprom_write(uint16_t address, uint8_t eepromSize) {
     25c:	27 e0       	ldi	r18, 0x07	; 7
     25e:	30 e0       	ldi	r19, 0x00	; 0
	gba_eeprom_set_address(address, eepromSize, EEPROM_WRITE);
	
	// Write 64 bits
	for (uint8_t c = 0; c < 8; c++) {
		for (int8_t x = 7; x >= 0; x--) {
			if (eepromBuffer[c] & (1<<x)) {
     260:	80 81       	ld	r24, Z
     262:	90 e0       	ldi	r25, 0x00	; 0
     264:	02 2e       	mov	r0, r18
     266:	02 c0       	rjmp	.+4      	; 0x26c <__stack+0xd>
     268:	95 95       	asr	r25
     26a:	87 95       	ror	r24
     26c:	0a 94       	dec	r0
     26e:	e2 f7       	brpl	.-8      	; 0x268 <__stack+0x9>
     270:	80 ff       	sbrs	r24, 0
     272:	02 c0       	rjmp	.+4      	; 0x278 <__stack+0x19>
				ad0Pin_high;
     274:	c0 9a       	sbi	0x18, 0	; 24
     276:	01 c0       	rjmp	.+2      	; 0x27a <__stack+0x1b>
			}
			else {
				ad0Pin_low;
     278:	c0 98       	cbi	0x18, 0	; 24
			}
			
			wrPin_low; // CLK
     27a:	96 98       	cbi	0x12, 6	; 18
			asm ("nop");
     27c:	00 00       	nop
			asm ("nop");
     27e:	00 00       	nop
			wrPin_high; 
     280:	96 9a       	sbi	0x12, 6	; 18
			asm ("nop");
     282:	00 00       	nop
			asm ("nop");
     284:	00 00       	nop
     286:	21 50       	subi	r18, 0x01	; 1
     288:	31 09       	sbc	r19, r1
     28a:	50 f7       	brcc	.-44     	; 0x260 <__stack+0x1>
     28c:	41 50       	subi	r20, 0x01	; 1
     28e:	31 96       	adiw	r30, 0x01	; 1
// Write 8 bytes to the EEPROM address
void gba_eeprom_write(uint16_t address, uint8_t eepromSize) {
	gba_eeprom_set_address(address, eepromSize, EEPROM_WRITE);
	
	// Write 64 bits
	for (uint8_t c = 0; c < 8; c++) {
     290:	41 11       	cpse	r20, r1
     292:	e4 cf       	rjmp	.-56     	; 0x25c <gba_eeprom_write+0xa>
			asm ("nop");
		}
	}
	
	// Last bit low
	ad0Pin_low;
     294:	c0 98       	cbi	0x18, 0	; 24
	wrPin_low; // CLK
     296:	96 98       	cbi	0x12, 6	; 18
	asm ("nop");
     298:	00 00       	nop
	asm ("nop");
     29a:	00 00       	nop
	wrPin_high; 
     29c:	96 9a       	sbi	0x12, 6	; 18
	asm ("nop");
     29e:	00 00       	nop
	asm ("nop");
     2a0:	00 00       	nop
	
	cs_mreqPin_high;
     2a2:	94 9a       	sbi	0x12, 4	; 18
     2a4:	08 95       	ret

000002a6 <flash_write_bus_cycle>:


// ---------- FLASH ----------

// Set the address and data for the write byte cycle to the flash
void flash_write_bus_cycle(uint16_t address, uint8_t data) {
     2a6:	cf 93       	push	r28
     2a8:	c6 2f       	mov	r28, r22
	GBA_DDR_RAM_DATA7_0 = 0xFF; // Set data pins as outputs
     2aa:	2f ef       	ldi	r18, 0xFF	; 255
     2ac:	24 bb       	out	0x14, r18	; 20
	set_16bit_address(address);
     2ae:	ff de       	rcall	.-514    	; 0xae <set_16bit_address>
	GBA_PORT_RAM_DATA7_0 = data;
     2b0:	c5 bb       	out	0x15, r28	; 21
	
	wrPin_low;
     2b2:	96 98       	cbi	0x12, 6	; 18
	cs2Pin_low;
     2b4:	3a 98       	cbi	0x07, 2	; 7
	asm volatile("nop");
     2b6:	00 00       	nop
	wrPin_high;
     2b8:	96 9a       	sbi	0x12, 6	; 18
	cs2Pin_high;
     2ba:	3a 9a       	sbi	0x07, 2	; 7
}
     2bc:	cf 91       	pop	r28
     2be:	08 95       	ret

000002c0 <flash_read_chip_id>:

// Read the flash manufacturer and device ID (Software ID)
void flash_read_chip_id(void) {
     2c0:	cf 93       	push	r28
     2c2:	df 93       	push	r29
	flash_write_bus_cycle(0x5555, 0xAA);
     2c4:	6a ea       	ldi	r22, 0xAA	; 170
     2c6:	85 e5       	ldi	r24, 0x55	; 85
     2c8:	95 e5       	ldi	r25, 0x55	; 85
     2ca:	ed df       	rcall	.-38     	; 0x2a6 <flash_write_bus_cycle>
	flash_write_bus_cycle(0x2AAA, 0x55);
     2cc:	65 e5       	ldi	r22, 0x55	; 85
     2ce:	8a ea       	ldi	r24, 0xAA	; 170
     2d0:	9a e2       	ldi	r25, 0x2A	; 42
     2d2:	e9 df       	rcall	.-46     	; 0x2a6 <flash_write_bus_cycle>
	flash_write_bus_cycle(0x5555, 0x90); // Software ID entry
     2d4:	60 e9       	ldi	r22, 0x90	; 144
     2d6:	85 e5       	ldi	r24, 0x55	; 85
     2d8:	95 e5       	ldi	r25, 0x55	; 85
     2da:	e5 df       	rcall	.-54     	; 0x2a6 <flash_write_bus_cycle>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     2dc:	8f e3       	ldi	r24, 0x3F	; 63
     2de:	9c e9       	ldi	r25, 0x9C	; 156
     2e0:	01 97       	sbiw	r24, 0x01	; 1
     2e2:	f1 f7       	brne	.-4      	; 0x2e0 <flash_read_chip_id+0x20>
     2e4:	00 c0       	rjmp	.+0      	; 0x2e6 <flash_read_chip_id+0x26>
     2e6:	00 00       	nop
	_delay_ms(20); // Wait a little (for Atmel chip)
	
	// Set data as inputs
	GBA_PORT_RAM_DATA7_0 = 0;
     2e8:	15 ba       	out	0x15, r1	; 21
	GBA_DDR_RAM_DATA7_0 = 0;
     2ea:	14 ba       	out	0x14, r1	; 20
	
	// Read and transmit the 2 bytes
	flashChipIdBuffer[0] = gba_read_ram_8bit_data(0x0000);
     2ec:	80 e0       	ldi	r24, 0x00	; 0
     2ee:	90 e0       	ldi	r25, 0x00	; 0
     2f0:	2d df       	rcall	.-422    	; 0x14c <gba_read_ram_8bit_data>
     2f2:	cc e6       	ldi	r28, 0x6C	; 108
     2f4:	d0 e0       	ldi	r29, 0x00	; 0
     2f6:	88 83       	st	Y, r24
	flashChipIdBuffer[1] = gba_read_ram_8bit_data(0x0001);
     2f8:	81 e0       	ldi	r24, 0x01	; 1
     2fa:	90 e0       	ldi	r25, 0x00	; 0
     2fc:	27 df       	rcall	.-434    	; 0x14c <gba_read_ram_8bit_data>
     2fe:	89 83       	std	Y+1, r24	; 0x01
	
	flash_write_bus_cycle(0x5555, 0xAA);
     300:	6a ea       	ldi	r22, 0xAA	; 170
     302:	85 e5       	ldi	r24, 0x55	; 85
     304:	95 e5       	ldi	r25, 0x55	; 85
     306:	cf df       	rcall	.-98     	; 0x2a6 <flash_write_bus_cycle>
	flash_write_bus_cycle(0x2AAA, 0x55);
     308:	65 e5       	ldi	r22, 0x55	; 85
     30a:	8a ea       	ldi	r24, 0xAA	; 170
     30c:	9a e2       	ldi	r25, 0x2A	; 42
     30e:	cb df       	rcall	.-106    	; 0x2a6 <flash_write_bus_cycle>
	flash_write_bus_cycle(0x5555, 0xF0); // Software ID exit
     310:	60 ef       	ldi	r22, 0xF0	; 240
     312:	85 e5       	ldi	r24, 0x55	; 85
     314:	95 e5       	ldi	r25, 0x55	; 85
     316:	c7 df       	rcall	.-114    	; 0x2a6 <flash_write_bus_cycle>
     318:	8f e3       	ldi	r24, 0x3F	; 63
     31a:	9c e9       	ldi	r25, 0x9C	; 156
     31c:	01 97       	sbiw	r24, 0x01	; 1
     31e:	f1 f7       	brne	.-4      	; 0x31c <flash_read_chip_id+0x5c>
     320:	00 c0       	rjmp	.+0      	; 0x322 <flash_read_chip_id+0x62>
     322:	00 00       	nop
	_delay_ms(20); // Wait a little (for Atmel chip)
}
     324:	df 91       	pop	r29
     326:	cf 91       	pop	r28
     328:	08 95       	ret

0000032a <flash_switch_bank>:

// Switch banks on the Flash
void flash_switch_bank(uint8_t bank) {
     32a:	cf 93       	push	r28
     32c:	c8 2f       	mov	r28, r24
	flash_write_bus_cycle(0x5555, 0xAA);
     32e:	6a ea       	ldi	r22, 0xAA	; 170
     330:	85 e5       	ldi	r24, 0x55	; 85
     332:	95 e5       	ldi	r25, 0x55	; 85
     334:	b8 df       	rcall	.-144    	; 0x2a6 <flash_write_bus_cycle>
	flash_write_bus_cycle(0x2AAA, 0x55);
     336:	65 e5       	ldi	r22, 0x55	; 85
     338:	8a ea       	ldi	r24, 0xAA	; 170
     33a:	9a e2       	ldi	r25, 0x2A	; 42
     33c:	b4 df       	rcall	.-152    	; 0x2a6 <flash_write_bus_cycle>
	
	flash_write_bus_cycle(0x5555, 0xB0);
     33e:	60 eb       	ldi	r22, 0xB0	; 176
     340:	85 e5       	ldi	r24, 0x55	; 85
     342:	95 e5       	ldi	r25, 0x55	; 85
     344:	b0 df       	rcall	.-160    	; 0x2a6 <flash_write_bus_cycle>
	flash_write_bus_cycle(0x0000, bank);
     346:	6c 2f       	mov	r22, r28
     348:	80 e0       	ldi	r24, 0x00	; 0
     34a:	90 e0       	ldi	r25, 0x00	; 0
}
     34c:	cf 91       	pop	r28
void flash_switch_bank(uint8_t bank) {
	flash_write_bus_cycle(0x5555, 0xAA);
	flash_write_bus_cycle(0x2AAA, 0x55);
	
	flash_write_bus_cycle(0x5555, 0xB0);
	flash_write_bus_cycle(0x0000, bank);
     34e:	ab cf       	rjmp	.-170    	; 0x2a6 <flash_write_bus_cycle>

00000350 <flash_erase_4k_sector>:
}

// Erase 4K sector on Flash, expects first sector to start at 0, left shifts by 12 (A15-A12 to select sector for 512Kbit)
// Takes 25ms after last command to erase sector
void flash_erase_4k_sector(uint8_t sector) {
     350:	cf 93       	push	r28
     352:	c8 2f       	mov	r28, r24
	flash_write_bus_cycle(0x5555, 0xAA);
     354:	6a ea       	ldi	r22, 0xAA	; 170
     356:	85 e5       	ldi	r24, 0x55	; 85
     358:	95 e5       	ldi	r25, 0x55	; 85
     35a:	a5 df       	rcall	.-182    	; 0x2a6 <flash_write_bus_cycle>
	flash_write_bus_cycle(0x2AAA, 0x55);
     35c:	65 e5       	ldi	r22, 0x55	; 85
     35e:	8a ea       	ldi	r24, 0xAA	; 170
     360:	9a e2       	ldi	r25, 0x2A	; 42
     362:	a1 df       	rcall	.-190    	; 0x2a6 <flash_write_bus_cycle>
	flash_write_bus_cycle(0x5555, 0x80);
     364:	60 e8       	ldi	r22, 0x80	; 128
     366:	85 e5       	ldi	r24, 0x55	; 85
     368:	95 e5       	ldi	r25, 0x55	; 85
     36a:	9d df       	rcall	.-198    	; 0x2a6 <flash_write_bus_cycle>
	flash_write_bus_cycle(0x5555, 0xAA);
     36c:	6a ea       	ldi	r22, 0xAA	; 170
     36e:	85 e5       	ldi	r24, 0x55	; 85
     370:	95 e5       	ldi	r25, 0x55	; 85
     372:	99 df       	rcall	.-206    	; 0x2a6 <flash_write_bus_cycle>
	flash_write_bus_cycle(0x2AAA, 0x55);
     374:	65 e5       	ldi	r22, 0x55	; 85
     376:	8a ea       	ldi	r24, 0xAA	; 170
     378:	9a e2       	ldi	r25, 0x2A	; 42
     37a:	95 df       	rcall	.-214    	; 0x2a6 <flash_write_bus_cycle>
	
	flash_write_bus_cycle((uint16_t) sector << 12, 0x30);
     37c:	60 e3       	ldi	r22, 0x30	; 48
     37e:	80 e0       	ldi	r24, 0x00	; 0
     380:	9c 2f       	mov	r25, r28
     382:	92 95       	swap	r25
     384:	90 7f       	andi	r25, 0xF0	; 240
     386:	8f df       	rcall	.-226    	; 0x2a6 <flash_write_bus_cycle>
     388:	8f e4       	ldi	r24, 0x4F	; 79
     38a:	93 ec       	ldi	r25, 0xC3	; 195
     38c:	01 97       	sbiw	r24, 0x01	; 1
     38e:	f1 f7       	brne	.-4      	; 0x38c <flash_erase_4k_sector+0x3c>
     390:	00 c0       	rjmp	.+0      	; 0x392 <flash_erase_4k_sector+0x42>
     392:	00 00       	nop
	_delay_ms(25); // Wait 25ms for sector erase
}
     394:	cf 91       	pop	r28
     396:	08 95       	ret

00000398 <flash_write_byte>:

// Write a single byte to the Flash address
// Takes 20us to program Flash
void flash_write_byte(uint16_t address, uint8_t data) {
     398:	1f 93       	push	r17
     39a:	cf 93       	push	r28
     39c:	df 93       	push	r29
     39e:	ec 01       	movw	r28, r24
     3a0:	16 2f       	mov	r17, r22
	flash_write_bus_cycle(0x5555, 0xAA);
     3a2:	6a ea       	ldi	r22, 0xAA	; 170
     3a4:	85 e5       	ldi	r24, 0x55	; 85
     3a6:	95 e5       	ldi	r25, 0x55	; 85
     3a8:	7e df       	rcall	.-260    	; 0x2a6 <flash_write_bus_cycle>
	flash_write_bus_cycle(0x2AAA, 0x55);
     3aa:	65 e5       	ldi	r22, 0x55	; 85
     3ac:	8a ea       	ldi	r24, 0xAA	; 170
     3ae:	9a e2       	ldi	r25, 0x2A	; 42
     3b0:	7a df       	rcall	.-268    	; 0x2a6 <flash_write_bus_cycle>
	flash_write_bus_cycle(0x5555, 0xA0);
     3b2:	60 ea       	ldi	r22, 0xA0	; 160
     3b4:	85 e5       	ldi	r24, 0x55	; 85
     3b6:	95 e5       	ldi	r25, 0x55	; 85
     3b8:	76 df       	rcall	.-276    	; 0x2a6 <flash_write_bus_cycle>
	
	flash_write_bus_cycle(address, data);
     3ba:	61 2f       	mov	r22, r17
     3bc:	ce 01       	movw	r24, r28
     3be:	73 df       	rcall	.-282    	; 0x2a6 <flash_write_bus_cycle>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     3c0:	85 e3       	ldi	r24, 0x35	; 53
     3c2:	8a 95       	dec	r24
     3c4:	f1 f7       	brne	.-4      	; 0x3c2 <flash_write_byte+0x2a>
     3c6:	00 00       	nop
	_delay_us(20); // Wait byte program time
}
     3c8:	df 91       	pop	r29
     3ca:	cf 91       	pop	r28
     3cc:	1f 91       	pop	r17
     3ce:	08 95       	ret

000003d0 <flash_write_sector>:

// Write a sector (128 bytes) to the Atmel flash
// Takes 20ms for write cycle
void flash_write_sector(uint16_t sector) {
     3d0:	ef 92       	push	r14
     3d2:	ff 92       	push	r15
     3d4:	0f 93       	push	r16
     3d6:	1f 93       	push	r17
     3d8:	cf 93       	push	r28
     3da:	df 93       	push	r29
     3dc:	8c 01       	movw	r16, r24
	flash_write_bus_cycle(0x5555, 0xAA);
     3de:	6a ea       	ldi	r22, 0xAA	; 170
     3e0:	85 e5       	ldi	r24, 0x55	; 85
     3e2:	95 e5       	ldi	r25, 0x55	; 85
     3e4:	60 df       	rcall	.-320    	; 0x2a6 <flash_write_bus_cycle>
	flash_write_bus_cycle(0x2AAA, 0x55);
     3e6:	65 e5       	ldi	r22, 0x55	; 85
     3e8:	8a ea       	ldi	r24, 0xAA	; 170
     3ea:	9a e2       	ldi	r25, 0x2A	; 42
     3ec:	5c df       	rcall	.-328    	; 0x2a6 <flash_write_bus_cycle>
	flash_write_bus_cycle(0x5555, 0xA0);
     3ee:	60 ea       	ldi	r22, 0xA0	; 160
     3f0:	85 e5       	ldi	r24, 0x55	; 85
     3f2:	95 e5       	ldi	r25, 0x55	; 85
     3f4:	58 df       	rcall	.-336    	; 0x2a6 <flash_write_bus_cycle>
	
	// Write the bytes (A0-A6 byte address, A7-A15 sector address)
	for (uint8_t x = 0; x < 128; x++) {
		flash_write_bus_cycle((uint16_t) (sector << 7) | (uint16_t) x, receivedBuffer[x]);
     3f6:	16 95       	lsr	r17
     3f8:	10 2f       	mov	r17, r16
     3fa:	00 27       	eor	r16, r16
     3fc:	17 95       	ror	r17
     3fe:	07 95       	ror	r16
     400:	9e e6       	ldi	r25, 0x6E	; 110
     402:	e9 2e       	mov	r14, r25
     404:	90 e0       	ldi	r25, 0x00	; 0
     406:	f9 2e       	mov	r15, r25
     408:	c0 e0       	ldi	r28, 0x00	; 0
     40a:	d0 e0       	ldi	r29, 0x00	; 0
     40c:	f7 01       	movw	r30, r14
     40e:	61 91       	ld	r22, Z+
     410:	7f 01       	movw	r14, r30
     412:	ce 01       	movw	r24, r28
     414:	80 2b       	or	r24, r16
     416:	91 2b       	or	r25, r17
     418:	46 df       	rcall	.-372    	; 0x2a6 <flash_write_bus_cycle>
     41a:	21 96       	adiw	r28, 0x01	; 1
	flash_write_bus_cycle(0x5555, 0xAA);
	flash_write_bus_cycle(0x2AAA, 0x55);
	flash_write_bus_cycle(0x5555, 0xA0);
	
	// Write the bytes (A0-A6 byte address, A7-A15 sector address)
	for (uint8_t x = 0; x < 128; x++) {
     41c:	c0 38       	cpi	r28, 0x80	; 128
     41e:	d1 05       	cpc	r29, r1
     420:	a9 f7       	brne	.-22     	; 0x40c <__LOCK_REGION_LENGTH__+0xc>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     422:	8f e3       	ldi	r24, 0x3F	; 63
     424:	9c e9       	ldi	r25, 0x9C	; 156
     426:	01 97       	sbiw	r24, 0x01	; 1
     428:	f1 f7       	brne	.-4      	; 0x426 <__LOCK_REGION_LENGTH__+0x26>
     42a:	00 c0       	rjmp	.+0      	; 0x42c <__LOCK_REGION_LENGTH__+0x2c>
     42c:	00 00       	nop
		flash_write_bus_cycle((uint16_t) (sector << 7) | (uint16_t) x, receivedBuffer[x]);
	}
	_delay_ms(20); // Wait sector program time
}
     42e:	df 91       	pop	r29
     430:	cf 91       	pop	r28
     432:	1f 91       	pop	r17
     434:	0f 91       	pop	r16
     436:	ff 90       	pop	r15
     438:	ef 90       	pop	r14
     43a:	08 95       	ret

0000043c <gb_flash_read_byte>:

// ---------- GB FLASH CARTS ----------

// Read a byte from the flash (No CS pin pulse)
uint8_t gb_flash_read_byte(uint16_t address) {
	PORT_DATA7_0 = 0;
     43c:	15 ba       	out	0x15, r1	; 21
	DDR_DATA7_0 = 0;
     43e:	14 ba       	out	0x14, r1	; 20
	
	set_16bit_address(address);
     440:	36 de       	rcall	.-916    	; 0xae <set_16bit_address>
	
	rdPin_low;
     442:	95 98       	cbi	0x12, 5	; 18
	asm volatile("nop"); // Delay a little
     444:	00 00       	nop
	asm volatile("nop");
     446:	00 00       	nop
	uint8_t data = PIN_DATA7_0; // Read data
     448:	83 b3       	in	r24, 0x13	; 19
	rdPin_high;
     44a:	95 9a       	sbi	0x12, 5	; 18
	
	return data;
}
     44c:	08 95       	ret

0000044e <gb_flash_write_bus_cycle>:

// Set the address and data for the write byte cycle to the flash
void gb_flash_write_bus_cycle(uint16_t address, uint8_t data) {
     44e:	cf 93       	push	r28
     450:	c6 2f       	mov	r28, r22
	DDR_DATA7_0 = 0xFF; // Set data pins as outputs
     452:	2f ef       	ldi	r18, 0xFF	; 255
     454:	24 bb       	out	0x14, r18	; 20
	set_16bit_address(address);
     456:	2b de       	rcall	.-938    	; 0xae <set_16bit_address>
	PORT_DATA7_0 = data;
     458:	c5 bb       	out	0x15, r28	; 21
	
	if (flashWriteWePin == WE_AS_AUDIO_PIN) { // Audio pin
     45a:	80 91 77 01 	lds	r24, 0x0177	; 0x800177 <flashWriteWePin>
     45e:	81 34       	cpi	r24, 0x41	; 65
     460:	31 f4       	brne	.+12     	; 0x46e <gb_flash_write_bus_cycle+0x20>
		audioPin_low; // WE low
     462:	39 98       	cbi	0x07, 1	; 7
		asm volatile("nop");
     464:	00 00       	nop
		asm volatile("nop");
     466:	00 00       	nop
		asm volatile("nop");
     468:	00 00       	nop
		audioPin_high; // WE high
     46a:	39 9a       	sbi	0x07, 1	; 7
     46c:	05 c0       	rjmp	.+10     	; 0x478 <gb_flash_write_bus_cycle+0x2a>
	}
	else { // WR pin
		wrPin_low; // WE low
     46e:	96 98       	cbi	0x12, 6	; 18
		asm volatile("nop");
     470:	00 00       	nop
		asm volatile("nop");
     472:	00 00       	nop
		asm volatile("nop");
     474:	00 00       	nop
		wrPin_high; // WE high
     476:	96 9a       	sbi	0x12, 6	; 18
	}
}
     478:	cf 91       	pop	r28
     47a:	08 95       	ret

0000047c <gb_flash_write_byte>:

// Write a single byte to the Flash address. Takes 10-50us to program each byte.
void gb_flash_write_byte(uint16_t address, uint8_t data) {
     47c:	1f 93       	push	r17
     47e:	cf 93       	push	r28
     480:	df 93       	push	r29
     482:	ec 01       	movw	r28, r24
     484:	16 2f       	mov	r17, r22
	gb_flash_write_bus_cycle(flashWriteCycle[0][0], flashWriteCycle[0][1]);
     486:	60 91 62 00 	lds	r22, 0x0062	; 0x800062 <_edata+0x2>
     48a:	80 91 60 00 	lds	r24, 0x0060	; 0x800060 <_edata>
     48e:	90 91 61 00 	lds	r25, 0x0061	; 0x800061 <_edata+0x1>
     492:	dd df       	rcall	.-70     	; 0x44e <gb_flash_write_bus_cycle>
	gb_flash_write_bus_cycle(flashWriteCycle[1][0], flashWriteCycle[1][1]);
     494:	60 91 66 00 	lds	r22, 0x0066	; 0x800066 <_edata+0x6>
     498:	80 91 64 00 	lds	r24, 0x0064	; 0x800064 <_edata+0x4>
     49c:	90 91 65 00 	lds	r25, 0x0065	; 0x800065 <_edata+0x5>
     4a0:	d6 df       	rcall	.-84     	; 0x44e <gb_flash_write_bus_cycle>
	gb_flash_write_bus_cycle(flashWriteCycle[2][0], flashWriteCycle[2][1]);
     4a2:	60 91 6a 00 	lds	r22, 0x006A	; 0x80006a <_edata+0xa>
     4a6:	80 91 68 00 	lds	r24, 0x0068	; 0x800068 <_edata+0x8>
     4aa:	90 91 69 00 	lds	r25, 0x0069	; 0x800069 <_edata+0x9>
     4ae:	cf df       	rcall	.-98     	; 0x44e <gb_flash_write_bus_cycle>
	gb_flash_write_bus_cycle(address, data);
     4b0:	61 2f       	mov	r22, r17
     4b2:	ce 01       	movw	r24, r28
     4b4:	cc df       	rcall	.-104    	; 0x44e <gb_flash_write_bus_cycle>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     4b6:	8a e1       	ldi	r24, 0x1A	; 26
     4b8:	8a 95       	dec	r24
     4ba:	f1 f7       	brne	.-4      	; 0x4b8 <gb_flash_write_byte+0x3c>
     4bc:	00 c0       	rjmp	.+0      	; 0x4be <gb_flash_write_byte+0x42>
	_delay_us(10); // Wait byte program time
	
	// Set data pins inputs
	PORT_DATA7_0 = 0;
     4be:	15 ba       	out	0x15, r1	; 21
	DDR_DATA7_0 = 0;
     4c0:	14 ba       	out	0x14, r1	; 20
	
	// Verify data
	uint8_t dataVerify = gb_flash_read_byte(address);
     4c2:	ce 01       	movw	r24, r28
     4c4:	bb df       	rcall	.-138    	; 0x43c <gb_flash_read_byte>
	while (data != dataVerify) {
     4c6:	81 17       	cp	r24, r17
     4c8:	39 f0       	breq	.+14     	; 0x4d8 <gb_flash_write_byte+0x5c>
		dataVerify = gb_flash_read_byte(address);
     4ca:	ce 01       	movw	r24, r28
     4cc:	b7 df       	rcall	.-146    	; 0x43c <gb_flash_read_byte>
     4ce:	9d e0       	ldi	r25, 0x0D	; 13
     4d0:	9a 95       	dec	r25
     4d2:	f1 f7       	brne	.-4      	; 0x4d0 <gb_flash_write_byte+0x54>
     4d4:	00 00       	nop
     4d6:	f7 cf       	rjmp	.-18     	; 0x4c6 <gb_flash_write_byte+0x4a>
		_delay_us(5);
	}
}
     4d8:	df 91       	pop	r29
     4da:	cf 91       	pop	r28
     4dc:	1f 91       	pop	r17
     4de:	08 95       	ret

000004e0 <gba_flash_write_bus_cycle>:


// ---------- GBA FLASH CARTS ----------

// Set the 24 bit address and 16 bit data for the write byte cycle to the flash (pulse WR pin)
void gba_flash_write_bus_cycle(uint32_t address, uint16_t data) {
     4e0:	0f 93       	push	r16
     4e2:	1f 93       	push	r17
	GBA_PORT_ROM_ADDR23_16 = (address >> 16);
     4e4:	8c 01       	movw	r16, r24
     4e6:	22 27       	eor	r18, r18
     4e8:	33 27       	eor	r19, r19
     4ea:	05 bb       	out	0x15, r16	; 21
	GBA_PORT_ROM_ADDR15_8 = (address >> 8);
     4ec:	07 2f       	mov	r16, r23
     4ee:	18 2f       	mov	r17, r24
     4f0:	29 2f       	mov	r18, r25
     4f2:	33 27       	eor	r19, r19
     4f4:	0b bb       	out	0x1b, r16	; 27
	GBA_PORT_ROM_ADDR7_0 = (address & 0xFF);
     4f6:	68 bb       	out	0x18, r22	; 24
	
	cs_mreqPin_low;
     4f8:	94 98       	cbi	0x12, 4	; 18
	
	GBA_PORT_ROM_DATA15_8 = data >> 8; // Set data
     4fa:	5b bb       	out	0x1b, r21	; 27
	GBA_PORT_ROM_DATA7_0 = data & 0xFF;
     4fc:	48 bb       	out	0x18, r20	; 24
	
	wrPin_low;
     4fe:	96 98       	cbi	0x12, 6	; 18
	asm volatile("nop");
     500:	00 00       	nop
	asm volatile("nop");
     502:	00 00       	nop
	asm volatile("nop");
     504:	00 00       	nop
	wrPin_high;
     506:	96 9a       	sbi	0x12, 6	; 18
	cs_mreqPin_high;
     508:	94 9a       	sbi	0x12, 4	; 18
}
     50a:	1f 91       	pop	r17
     50c:	0f 91       	pop	r16
     50e:	08 95       	ret

00000510 <gba_flash_write_cycle_start>:

// Send the first 3 write cycles to the flash
void gba_flash_write_cycle_start(void) {
	// Set outputs
	GBA_DDR_ROM_ADDR23_16 = 0xFF;
     510:	8f ef       	ldi	r24, 0xFF	; 255
     512:	84 bb       	out	0x14, r24	; 20
	GBA_DDR_ROM_ADDR15_8 = 0xFF;
     514:	8a bb       	out	0x1a, r24	; 26
	GBA_DDR_ROM_ADDR7_0 = 0xFF;
     516:	87 bb       	out	0x17, r24	; 23
	
	// 0x555, 0xA9
	GBA_PORT_ROM_ADDR23_16 = 0;
     518:	15 ba       	out	0x15, r1	; 21
	GBA_PORT_ROM_ADDR15_8 = 0x05;
     51a:	95 e0       	ldi	r25, 0x05	; 5
     51c:	9b bb       	out	0x1b, r25	; 27
	GBA_PORT_ROM_ADDR7_0 = 0x55;
     51e:	85 e5       	ldi	r24, 0x55	; 85
     520:	88 bb       	out	0x18, r24	; 24
	cs_mreqPin_low;
     522:	94 98       	cbi	0x12, 4	; 18
	GBA_PORT_ROM_DATA15_8 = 0; // Set data
     524:	1b ba       	out	0x1b, r1	; 27
	GBA_PORT_ROM_DATA7_0 = 0xA9;
     526:	29 ea       	ldi	r18, 0xA9	; 169
     528:	28 bb       	out	0x18, r18	; 24
	wrPin_low;
     52a:	96 98       	cbi	0x12, 6	; 18
	asm volatile("nop");
     52c:	00 00       	nop
	asm volatile("nop");
     52e:	00 00       	nop
	asm volatile("nop");
     530:	00 00       	nop
	wrPin_high;
     532:	96 9a       	sbi	0x12, 6	; 18
	cs_mreqPin_high;
     534:	94 9a       	sbi	0x12, 4	; 18
	
	// 0x2AA, 0x56
	GBA_PORT_ROM_ADDR23_16 = 0;
     536:	15 ba       	out	0x15, r1	; 21
	GBA_PORT_ROM_ADDR15_8 = 0x02;
     538:	22 e0       	ldi	r18, 0x02	; 2
     53a:	2b bb       	out	0x1b, r18	; 27
	GBA_PORT_ROM_ADDR7_0 = 0xAA;
     53c:	2a ea       	ldi	r18, 0xAA	; 170
     53e:	28 bb       	out	0x18, r18	; 24
	cs_mreqPin_low;
     540:	94 98       	cbi	0x12, 4	; 18
	GBA_PORT_ROM_DATA15_8 = 0; // Set data
     542:	1b ba       	out	0x1b, r1	; 27
	GBA_PORT_ROM_DATA7_0 = 0x56;
     544:	26 e5       	ldi	r18, 0x56	; 86
     546:	28 bb       	out	0x18, r18	; 24
	wrPin_low;
     548:	96 98       	cbi	0x12, 6	; 18
	asm volatile("nop");
     54a:	00 00       	nop
	asm volatile("nop");
     54c:	00 00       	nop
	asm volatile("nop");
     54e:	00 00       	nop
	wrPin_high;
     550:	96 9a       	sbi	0x12, 6	; 18
	cs_mreqPin_high;
     552:	94 9a       	sbi	0x12, 4	; 18
	
	// 0x555, 0xA0;
	GBA_PORT_ROM_ADDR23_16 = 0;
     554:	15 ba       	out	0x15, r1	; 21
	GBA_PORT_ROM_ADDR15_8 = 0x05;
     556:	9b bb       	out	0x1b, r25	; 27
	GBA_PORT_ROM_ADDR7_0 = 0x55;
     558:	88 bb       	out	0x18, r24	; 24
	cs_mreqPin_low;
     55a:	94 98       	cbi	0x12, 4	; 18
	GBA_PORT_ROM_DATA15_8 = 0; // Set data
     55c:	1b ba       	out	0x1b, r1	; 27
	GBA_PORT_ROM_DATA7_0 = 0xA0;
     55e:	80 ea       	ldi	r24, 0xA0	; 160
     560:	88 bb       	out	0x18, r24	; 24
	wrPin_low;
     562:	96 98       	cbi	0x12, 6	; 18
	asm volatile("nop");
     564:	00 00       	nop
	asm volatile("nop");
     566:	00 00       	nop
	asm volatile("nop");
     568:	00 00       	nop
	wrPin_high;
     56a:	96 9a       	sbi	0x12, 6	; 18
	cs_mreqPin_high;
     56c:	94 9a       	sbi	0x12, 4	; 18
     56e:	08 95       	ret

00000570 <gba_flash_write_byte_swapped>:


// Write 2 bytes to the Flash address. Time to wait depends on Flash, we will query it to verify the correct data has been written.
// Address is divided by 2 as we are in GBA mode. 
// Data byte's bit 0 & 1 are swapped for chip commands as D0 & D1 lines are swapped
void gba_flash_write_byte_swapped(uint32_t address, uint16_t data) {
     570:	cf 92       	push	r12
     572:	df 92       	push	r13
     574:	ef 92       	push	r14
     576:	ff 92       	push	r15
     578:	cf 93       	push	r28
     57a:	df 93       	push	r29
     57c:	6b 01       	movw	r12, r22
     57e:	7c 01       	movw	r14, r24
     580:	ea 01       	movw	r28, r20
	gba_flash_write_cycle_start();
     582:	c6 df       	rcall	.-116    	; 0x510 <gba_flash_write_cycle_start>
	gba_flash_write_bus_cycle(address, data);
     584:	ae 01       	movw	r20, r28
     586:	c7 01       	movw	r24, r14
     588:	b6 01       	movw	r22, r12
     58a:	aa df       	rcall	.-172    	; 0x4e0 <gba_flash_write_bus_cycle>
     58c:	25 e0       	ldi	r18, 0x05	; 5
     58e:	2a 95       	dec	r18
     590:	f1 f7       	brne	.-4      	; 0x58e <gba_flash_write_byte_swapped+0x1e>
     592:	00 00       	nop
	_delay_us(2); // Wait byte program time
	
	// Verify data
	uint16_t dataVerify = gba_read_16bit_data(address);
     594:	c7 01       	movw	r24, r14
     596:	b6 01       	movw	r22, r12
     598:	ca dd       	rcall	.-1132   	; 0x12e <gba_read_16bit_data>
	while (data != dataVerify) {
     59a:	8c 17       	cp	r24, r28
     59c:	9d 07       	cpc	r25, r29
     59e:	41 f0       	breq	.+16     	; 0x5b0 <gba_flash_write_byte_swapped+0x40>
		dataVerify = gba_read_16bit_data(address);
     5a0:	c7 01       	movw	r24, r14
     5a2:	b6 01       	movw	r22, r12
     5a4:	c4 dd       	rcall	.-1144   	; 0x12e <gba_read_16bit_data>
     5a6:	25 e0       	ldi	r18, 0x05	; 5
     5a8:	2a 95       	dec	r18
     5aa:	f1 f7       	brne	.-4      	; 0x5a8 <gba_flash_write_byte_swapped+0x38>
     5ac:	00 00       	nop
     5ae:	f5 cf       	rjmp	.-22     	; 0x59a <gba_flash_write_byte_swapped+0x2a>
		_delay_us(2);
	}
}
     5b0:	df 91       	pop	r29
     5b2:	cf 91       	pop	r28
     5b4:	ff 90       	pop	r15
     5b6:	ef 90       	pop	r14
     5b8:	df 90       	pop	r13
     5ba:	cf 90       	pop	r12
     5bc:	08 95       	ret

000005be <setup>:


// Setup
void setup(void) {
	// Turn off watchdog
	MCUCSR &= ~(1<<WDRF);
     5be:	84 b7       	in	r24, 0x34	; 52
     5c0:	87 7f       	andi	r24, 0xF7	; 247
     5c2:	84 bf       	out	0x34, r24	; 52
	WDTCR = (1<<WDCE) | (1<<WDE);
     5c4:	88 e1       	ldi	r24, 0x18	; 24
     5c6:	81 bd       	out	0x21, r24	; 33
	WDTCR = 0;
     5c8:	11 bc       	out	0x21, r1	; 33
	
	// Reset common lines
	rd_wr_csmreq_cs2_reset();
     5ca:	64 dd       	rcall	.-1336   	; 0x94 <rd_wr_csmreq_cs2_reset>
	
	// Set outputs
	DDRD |= (1<<ACTIVITY_LED) | (1<<WR_PIN) | (1<<RD_PIN) | (1<<CS_MREQ_PIN) | (1<<LED_5V);
     5cc:	81 b3       	in	r24, 0x11	; 17
     5ce:	88 6f       	ori	r24, 0xF8	; 248
     5d0:	81 bb       	out	0x11, r24	; 17
	DDRE |= (1<<CS2_PIN) | (1<<LED_3V);
     5d2:	86 b1       	in	r24, 0x06	; 6
     5d4:	85 60       	ori	r24, 0x05	; 5
     5d6:	86 b9       	out	0x06, r24	; 6
	
	// Set all pins as inputs
	PORT_DATA7_0 = 0;
     5d8:	15 ba       	out	0x15, r1	; 21
	DDR_DATA7_0 = 0;
     5da:	14 ba       	out	0x14, r1	; 20
	PORT_ADDR7_0 = 0;
     5dc:	18 ba       	out	0x18, r1	; 24
	DDR_ADDR7_0 = 0;
     5de:	17 ba       	out	0x17, r1	; 23
	PORT_ADDR15_8 = 0;
     5e0:	1b ba       	out	0x1b, r1	; 27
	DDR_ADDR15_8 = 0;
     5e2:	1a ba       	out	0x1a, r1	; 26
	
	// Light up 3.3V or 5V
	if (PIND & (1<<SWITCH_DETECT)) {
     5e4:	82 9b       	sbis	0x10, 2	; 16
     5e6:	03 c0       	rjmp	.+6      	; 0x5ee <setup+0x30>
		PORTD |= (1<<LED_5V);
     5e8:	97 9a       	sbi	0x12, 7	; 18
		PORTE &= ~(1<<LED_3V);
     5ea:	38 98       	cbi	0x07, 0	; 7
     5ec:	02 c0       	rjmp	.+4      	; 0x5f2 <setup+0x34>
	}
	else {
		PORTE |= (1<<LED_3V);
     5ee:	38 9a       	sbi	0x07, 0	; 7
		PORTD &= ~(1<<LED_5V);
     5f0:	97 98       	cbi	0x12, 7	; 18
	}
	
	// Light LED
	PORTD |= (1<<ACTIVITY_LED);
     5f2:	93 9a       	sbi	0x12, 3	; 18
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     5f4:	2f ef       	ldi	r18, 0xFF	; 255
     5f6:	84 e3       	ldi	r24, 0x34	; 52
     5f8:	9c e0       	ldi	r25, 0x0C	; 12
     5fa:	21 50       	subi	r18, 0x01	; 1
     5fc:	80 40       	sbci	r24, 0x00	; 0
     5fe:	90 40       	sbci	r25, 0x00	; 0
     600:	e1 f7       	brne	.-8      	; 0x5fa <setup+0x3c>
     602:	00 c0       	rjmp	.+0      	; 0x604 <setup+0x46>
     604:	00 00       	nop
	_delay_ms(500);
	PORTD &= ~(1<<ACTIVITY_LED);
     606:	93 98       	cbi	0x12, 3	; 18
	
	// Setup USART
	UBRRL = 0; // 1Mbps Baud rate
     608:	19 b8       	out	0x09, r1	; 9
	sbi(UCSRA, U2X); // Double rate
     60a:	59 9a       	sbi	0x0b, 1	; 11
	sbi(UCSRB, TXEN); // Transmitter enable
     60c:	53 9a       	sbi	0x0a, 3	; 10
	sbi(UCSRB, RXEN); // Receiver enable
     60e:	54 9a       	sbi	0x0a, 4	; 10
	
	// Turn on interrupts
	sei();
     610:	78 94       	sei
     612:	08 95       	ret

00000614 <main>:
#include <stdlib.h>
#include <string.h>
#include "setup.c" // See defines, variables, constants, functions here


int main(void) {
     614:	cf 93       	push	r28
     616:	df 93       	push	r29
     618:	00 d0       	rcall	.+0      	; 0x61a <main+0x6>
     61a:	cd b7       	in	r28, 0x3d	; 61
     61c:	de b7       	in	r29, 0x3e	; 62
	setup();
     61e:	cf df       	rcall	.-98     	; 0x5be <setup>
	
	uint32_t address = 0;
	uint8_t eepromSize = EEPROM_4KBIT;
	uint8_t cartMode = GB_MODE;
	uint8_t resetCommonLines = 1;
     620:	21 e0       	ldi	r18, 0x01	; 1
     622:	2a 83       	std	Y+2, r18	; 0x02

int main(void) {
	setup();
	
	uint32_t address = 0;
	uint8_t eepromSize = EEPROM_4KBIT;
     624:	81 e0       	ldi	r24, 0x01	; 1
     626:	89 83       	std	Y+1, r24	; 0x01


int main(void) {
	setup();
	
	uint32_t address = 0;
     628:	c1 2c       	mov	r12, r1
     62a:	d1 2c       	mov	r13, r1
     62c:	76 01       	movw	r14, r12
     62e:	e7 e7       	ldi	r30, 0x77	; 119
     630:	2e 2e       	mov	r2, r30
     632:	e1 e0       	ldi	r30, 0x01	; 1
     634:	3e 2e       	mov	r3, r30
	uint8_t eepromSize = EEPROM_4KBIT;
	uint8_t cartMode = GB_MODE;
	uint8_t resetCommonLines = 1;
	
	while(1) {
		if (resetCommonLines == 1) {
     636:	ea 81       	ldd	r30, Y+2	; 0x02
     638:	e1 30       	cpi	r30, 0x01	; 1
     63a:	09 f4       	brne	.+2      	; 0x63e <main+0x2a>
			rd_wr_csmreq_cs2_reset();
     63c:	2b dd       	rcall	.-1450   	; 0x94 <rd_wr_csmreq_cs2_reset>
		}
		receivedChar = USART_Receive(); // Wait for 1 byte of data
     63e:	02 dd       	rcall	.-1532   	; 0x44 <USART_Receive>
     640:	80 93 6e 01 	sts	0x016E, r24	; 0x80016e <receivedChar>
		
		// Read the pin to find out which mode we are in, if it reads high, we are powered by 5V
		if (PIND & (1<<SWITCH_DETECT)) {
     644:	82 9b       	sbis	0x10, 2	; 16
     646:	04 c0       	rjmp	.+8      	; 0x650 <main+0x3c>
			cartMode = GB_MODE;
			PORTD |= (1<<LED_5V);
     648:	97 9a       	sbi	0x12, 7	; 18
			PORTE &= ~(1<<LED_3V);
     64a:	38 98       	cbi	0x07, 0	; 7
		}
		receivedChar = USART_Receive(); // Wait for 1 byte of data
		
		// Read the pin to find out which mode we are in, if it reads high, we are powered by 5V
		if (PIND & (1<<SWITCH_DETECT)) {
			cartMode = GB_MODE;
     64c:	81 e0       	ldi	r24, 0x01	; 1
     64e:	03 c0       	rjmp	.+6      	; 0x656 <main+0x42>
			PORTD |= (1<<LED_5V);
			PORTE &= ~(1<<LED_3V);
		}
		else {
			cartMode = GBA_MODE;
			PORTE |= (1<<LED_3V);
     650:	38 9a       	sbi	0x07, 0	; 7
			PORTD &= ~(1<<LED_5V);
     652:	97 98       	cbi	0x12, 7	; 18
			cartMode = GB_MODE;
			PORTD |= (1<<LED_5V);
			PORTE &= ~(1<<LED_3V);
		}
		else {
			cartMode = GBA_MODE;
     654:	82 e0       	ldi	r24, 0x02	; 2
			PORTE |= (1<<LED_3V);
			PORTD &= ~(1<<LED_5V);
		}
		
		// Return the cart mode in use
		if (receivedChar == CART_MODE) {
     656:	90 91 6e 01 	lds	r25, 0x016E	; 0x80016e <receivedChar>
     65a:	93 34       	cpi	r25, 0x43	; 67
     65c:	09 f4       	brne	.+2      	; 0x660 <main+0x4c>
     65e:	a7 c3       	rjmp	.+1870   	; 0xdae <main+0x79a>
			USART_Transmit(cartMode);
		}
		
		// Change to GB mode or GBA mode if requested
		else if (receivedChar == GB_CART_MODE) {
     660:	97 34       	cpi	r25, 0x47	; 71
     662:	11 f4       	brne	.+4      	; 0x668 <main+0x54>
			gb_mode();
     664:	1c dd       	rcall	.-1480   	; 0x9e <gb_mode>
     666:	e7 cf       	rjmp	.-50     	; 0x636 <main+0x22>
		}
		else if (receivedChar == GBA_CART_MODE) {
     668:	97 36       	cpi	r25, 0x67	; 103
     66a:	09 f4       	brne	.+2      	; 0x66e <main+0x5a>
     66c:	e7 c0       	rjmp	.+462    	; 0x83c <main+0x228>
			gba_mode();
		}
		
		// Set address
		else if (receivedChar == SET_START_ADDRESS) {
     66e:	91 34       	cpi	r25, 0x41	; 65
     670:	59 f4       	brne	.+22     	; 0x688 <main+0x74>
			usart_read_chars(); // Read start address
     672:	05 dd       	rcall	.-1526   	; 0x7e <usart_read_chars>
			address = strtol(receivedBuffer, NULL, 16); // Convert address string in hex to dec
     674:	40 e1       	ldi	r20, 0x10	; 16
     676:	50 e0       	ldi	r21, 0x00	; 0
     678:	60 e0       	ldi	r22, 0x00	; 0
     67a:	70 e0       	ldi	r23, 0x00	; 0
     67c:	8e e6       	ldi	r24, 0x6E	; 110
     67e:	90 e0       	ldi	r25, 0x00	; 0
     680:	b5 d3       	rcall	.+1898   	; 0xdec <strtol>
     682:	6b 01       	movw	r12, r22
     684:	7c 01       	movw	r14, r24
     686:	d7 cf       	rjmp	.-82     	; 0x636 <main+0x22>
		
		
		// ****** Gameboy / Gameboy Colour ******
		
		// Read 64 bytes of ROM/RAM from address (and increment) until anything but 1 is received
		else if (receivedChar == READ_ROM_RAM) {
     688:	92 35       	cpi	r25, 0x52	; 82
     68a:	f9 f4       	brne	.+62     	; 0x6ca <main+0xb6>
			gb_mode();
     68c:	08 dd       	rcall	.-1520   	; 0x9e <gb_mode>
			receivedChar = '1';
     68e:	f1 e3       	ldi	r31, 0x31	; 49
     690:	f0 93 6e 01 	sts	0x016E, r31	; 0x80016e <receivedChar>
			while (receivedChar == '1') {
     694:	80 91 6e 01 	lds	r24, 0x016E	; 0x80016e <receivedChar>
     698:	81 33       	cpi	r24, 0x31	; 49
     69a:	69 f6       	brne	.-102    	; 0x636 <main+0x22>
				PORTD |= (1<<ACTIVITY_LED);
     69c:	93 9a       	sbi	0x12, 3	; 18
     69e:	00 e0       	ldi	r16, 0x00	; 0
     6a0:	10 e0       	ldi	r17, 0x00	; 0
				for (uint8_t x = 0; x < 64; x++) {
					USART_Transmit(read_8bit_data(address));
     6a2:	c8 01       	movw	r24, r16
     6a4:	8c 0d       	add	r24, r12
     6a6:	9d 1d       	adc	r25, r13
     6a8:	05 dd       	rcall	.-1526   	; 0xb4 <read_8bit_data>
     6aa:	d0 dc       	rcall	.-1632   	; 0x4c <USART_Transmit>
     6ac:	0f 5f       	subi	r16, 0xFF	; 255
     6ae:	1f 4f       	sbci	r17, 0xFF	; 255
		else if (receivedChar == READ_ROM_RAM) {
			gb_mode();
			receivedChar = '1';
			while (receivedChar == '1') {
				PORTD |= (1<<ACTIVITY_LED);
				for (uint8_t x = 0; x < 64; x++) {
     6b0:	00 34       	cpi	r16, 0x40	; 64
     6b2:	11 05       	cpc	r17, r1
     6b4:	b1 f7       	brne	.-20     	; 0x6a2 <main+0x8e>
     6b6:	20 e4       	ldi	r18, 0x40	; 64
     6b8:	c2 0e       	add	r12, r18
     6ba:	d1 1c       	adc	r13, r1
     6bc:	e1 1c       	adc	r14, r1
     6be:	f1 1c       	adc	r15, r1
					USART_Transmit(read_8bit_data(address));
					address++;
				}
				
				PORTD &= ~(1<<ACTIVITY_LED);
     6c0:	93 98       	cbi	0x12, 3	; 18
				receivedChar = USART_Receive();
     6c2:	c0 dc       	rcall	.-1664   	; 0x44 <USART_Receive>
     6c4:	80 93 6e 01 	sts	0x016E, r24	; 0x80016e <receivedChar>
     6c8:	e5 cf       	rjmp	.-54     	; 0x694 <main+0x80>
			}
		}
		
		// Write 64 bytes to RAM on address (and increment)
		else if (receivedChar == WRITE_RAM) {
     6ca:	97 35       	cpi	r25, 0x57	; 87
     6cc:	f1 f4       	brne	.+60     	; 0x70a <main+0xf6>
			gb_mode();
     6ce:	e7 dc       	rcall	.-1586   	; 0x9e <gb_mode>
			
			// Read 64 bytes first as CH340G sends them all at once
			usart_read_bytes(64);
     6d0:	80 e4       	ldi	r24, 0x40	; 64
     6d2:	90 e0       	ldi	r25, 0x00	; 0
     6d4:	bf dc       	rcall	.-1666   	; 0x54 <usart_read_bytes>
			
			PORTD |= (1<<ACTIVITY_LED);
     6d6:	93 9a       	sbi	0x12, 3	; 18
     6d8:	7e e6       	ldi	r23, 0x6E	; 110
     6da:	a7 2e       	mov	r10, r23
     6dc:	70 e0       	ldi	r23, 0x00	; 0
     6de:	b7 2e       	mov	r11, r23
     6e0:	00 e0       	ldi	r16, 0x00	; 0
     6e2:	10 e0       	ldi	r17, 0x00	; 0
			for (uint8_t x = 0; x < 64; x++) {
				write_8bit_data(address, receivedBuffer[x], MEMORY_WRITE);
     6e4:	f5 01       	movw	r30, r10
     6e6:	61 91       	ld	r22, Z+
     6e8:	5f 01       	movw	r10, r30
     6ea:	c8 01       	movw	r24, r16
     6ec:	8c 0d       	add	r24, r12
     6ee:	9d 1d       	adc	r25, r13
     6f0:	41 e0       	ldi	r20, 0x01	; 1
     6f2:	e9 dc       	rcall	.-1582   	; 0xc6 <write_8bit_data>
     6f4:	0f 5f       	subi	r16, 0xFF	; 255
     6f6:	1f 4f       	sbci	r17, 0xFF	; 255
			
			// Read 64 bytes first as CH340G sends them all at once
			usart_read_bytes(64);
			
			PORTD |= (1<<ACTIVITY_LED);
			for (uint8_t x = 0; x < 64; x++) {
     6f8:	00 34       	cpi	r16, 0x40	; 64
     6fa:	11 05       	cpc	r17, r1
     6fc:	99 f7       	brne	.-26     	; 0x6e4 <main+0xd0>
     6fe:	f0 e4       	ldi	r31, 0x40	; 64
     700:	cf 0e       	add	r12, r31
     702:	d1 1c       	adc	r13, r1
     704:	e1 1c       	adc	r14, r1
     706:	f1 1c       	adc	r15, r1
     708:	c2 c1       	rjmp	.+900    	; 0xa8e <main+0x47a>
			PORTD &= ~(1<<ACTIVITY_LED);
			USART_Transmit(SEND_ACK); // Send back acknowledgement
		}
		
		// Set bank address and write a byte
		else if (receivedChar == SET_BANK) {
     70a:	92 34       	cpi	r25, 0x42	; 66
     70c:	d1 f4       	brne	.+52     	; 0x742 <main+0x12e>
			gb_mode();
     70e:	c7 dc       	rcall	.-1650   	; 0x9e <gb_mode>
			
			usart_read_chars(); // Read start address
     710:	b6 dc       	rcall	.-1684   	; 0x7e <usart_read_chars>
			uint16_t bankaddress = strtol(receivedBuffer, NULL, 16); // Convert address string in hex to dec
     712:	40 e1       	ldi	r20, 0x10	; 16
     714:	50 e0       	ldi	r21, 0x00	; 0
     716:	60 e0       	ldi	r22, 0x00	; 0
     718:	70 e0       	ldi	r23, 0x00	; 0
     71a:	8e e6       	ldi	r24, 0x6E	; 110
     71c:	90 e0       	ldi	r25, 0x00	; 0
     71e:	66 d3       	rcall	.+1740   	; 0xdec <strtol>
     720:	4b 01       	movw	r8, r22
     722:	5c 01       	movw	r10, r24
			
			receivedChar = USART_Receive(); // Wait for bank number
     724:	8f dc       	rcall	.-1762   	; 0x44 <USART_Receive>
     726:	80 93 6e 01 	sts	0x016E, r24	; 0x80016e <receivedChar>
			if (receivedChar == 'B') {
     72a:	82 34       	cpi	r24, 0x42	; 66
     72c:	09 f0       	breq	.+2      	; 0x730 <main+0x11c>
     72e:	83 cf       	rjmp	.-250    	; 0x636 <main+0x22>
				usart_read_chars(); // Read data
     730:	a6 dc       	rcall	.-1716   	; 0x7e <usart_read_chars>
				uint8_t data = atoi(receivedBuffer); // Convert data string to dec
     732:	8e e6       	ldi	r24, 0x6E	; 110
     734:	90 e0       	ldi	r25, 0x00	; 0
     736:	6b d4       	rcall	.+2262   	; 0x100e <atoi>
				
				write_8bit_data(bankaddress, data, BANK_WRITE);
     738:	40 e0       	ldi	r20, 0x00	; 0
     73a:	68 2f       	mov	r22, r24
     73c:	c4 01       	movw	r24, r8
     73e:	c3 dc       	rcall	.-1658   	; 0xc6 <write_8bit_data>
     740:	7a cf       	rjmp	.-268    	; 0x636 <main+0x22>
		
		// ****** Gameboy Advance ******
		
		// ---------- ROM ----------
		// Read one 16bit byte from ROM using address (and increment) until anything but 1 is received
		else if (receivedChar == GBA_READ_ROM || receivedChar == GBA_READ_ROM_256BYTE) {
     742:	92 37       	cpi	r25, 0x72	; 114
     744:	11 f0       	breq	.+4      	; 0x74a <main+0x136>
     746:	9a 36       	cpi	r25, 0x6A	; 106
     748:	b9 f5       	brne	.+110    	; 0x7b8 <main+0x1a4>
			gba_mode();
     74a:	d3 dc       	rcall	.-1626   	; 0xf2 <gba_mode>
			
			uint8_t readEnd = 32;
			if (receivedChar == GBA_READ_ROM_256BYTE) {
     74c:	80 91 6e 01 	lds	r24, 0x016E	; 0x80016e <receivedChar>
     750:	8a 36       	cpi	r24, 0x6A	; 106
     752:	11 f4       	brne	.+4      	; 0x758 <main+0x144>
				readEnd = 128;
     754:	00 e8       	ldi	r16, 0x80	; 128
     756:	01 c0       	rjmp	.+2      	; 0x75a <main+0x146>
		// ---------- ROM ----------
		// Read one 16bit byte from ROM using address (and increment) until anything but 1 is received
		else if (receivedChar == GBA_READ_ROM || receivedChar == GBA_READ_ROM_256BYTE) {
			gba_mode();
			
			uint8_t readEnd = 32;
     758:	00 e2       	ldi	r16, 0x20	; 32
			if (receivedChar == GBA_READ_ROM_256BYTE) {
				readEnd = 128;
			}
			
			receivedChar = '1';
     75a:	21 e3       	ldi	r18, 0x31	; 49
     75c:	20 93 6e 01 	sts	0x016E, r18	; 0x80016e <receivedChar>
     760:	88 24       	eor	r8, r8
     762:	8a 94       	dec	r8
     764:	80 0e       	add	r8, r16
     766:	91 2c       	mov	r9, r1
     768:	a1 2c       	mov	r10, r1
     76a:	b1 2c       	mov	r11, r1
     76c:	8f ef       	ldi	r24, 0xFF	; 255
     76e:	88 1a       	sub	r8, r24
     770:	98 0a       	sbc	r9, r24
     772:	a8 0a       	sbc	r10, r24
     774:	b8 0a       	sbc	r11, r24
			while (receivedChar == '1') {
     776:	80 91 6e 01 	lds	r24, 0x016E	; 0x80016e <receivedChar>
     77a:	81 33       	cpi	r24, 0x31	; 49
     77c:	09 f0       	breq	.+2      	; 0x780 <main+0x16c>
     77e:	5b cf       	rjmp	.-330    	; 0x636 <main+0x22>
				PORTD |= (1<<ACTIVITY_LED);
     780:	93 9a       	sbi	0x12, 3	; 18
     782:	26 01       	movw	r4, r12
     784:	37 01       	movw	r6, r14
				
				for (uint8_t x = 0; x < readEnd; x++) {
					uint16_t dataRead = gba_read_16bit_data(address);
     786:	c3 01       	movw	r24, r6
     788:	b2 01       	movw	r22, r4
     78a:	d1 dc       	rcall	.-1630   	; 0x12e <gba_read_16bit_data>
     78c:	19 2f       	mov	r17, r25
					
					// Low byte & High byte
					USART_Transmit(dataRead & 0xFF);
     78e:	5e dc       	rcall	.-1860   	; 0x4c <USART_Transmit>
					USART_Transmit(dataRead >> 8);
     790:	81 2f       	mov	r24, r17
     792:	5c dc       	rcall	.-1864   	; 0x4c <USART_Transmit>
					
					address++;
     794:	9f ef       	ldi	r25, 0xFF	; 255
     796:	49 1a       	sub	r4, r25
     798:	59 0a       	sbc	r5, r25
     79a:	69 0a       	sbc	r6, r25
     79c:	79 0a       	sbc	r7, r25
			
			receivedChar = '1';
			while (receivedChar == '1') {
				PORTD |= (1<<ACTIVITY_LED);
				
				for (uint8_t x = 0; x < readEnd; x++) {
     79e:	84 2d       	mov	r24, r4
     7a0:	8c 19       	sub	r24, r12
     7a2:	80 17       	cp	r24, r16
     7a4:	80 f3       	brcs	.-32     	; 0x786 <main+0x172>
     7a6:	c8 0c       	add	r12, r8
     7a8:	d9 1c       	adc	r13, r9
     7aa:	ea 1c       	adc	r14, r10
     7ac:	fb 1c       	adc	r15, r11
					USART_Transmit(dataRead >> 8);
					
					address++;
				}
				
				PORTD &= ~(1<<ACTIVITY_LED);
     7ae:	93 98       	cbi	0x12, 3	; 18
				receivedChar = USART_Receive();
     7b0:	49 dc       	rcall	.-1902   	; 0x44 <USART_Receive>
     7b2:	80 93 6e 01 	sts	0x016E, r24	; 0x80016e <receivedChar>
     7b6:	df cf       	rjmp	.-66     	; 0x776 <main+0x162>
			}
		}
		
		// ---------- SRAM ----------
		// Read RAM from address (and increment) until anything but 1 is received
		else if (receivedChar == GBA_READ_SRAM) {
     7b8:	9d 36       	cpi	r25, 0x6D	; 109
     7ba:	f9 f4       	brne	.+62     	; 0x7fa <main+0x1e6>
			gb_mode(); // Set GB mode as it uses 16 bit address with 8 bit data
     7bc:	70 dc       	rcall	.-1824   	; 0x9e <gb_mode>
			
			receivedChar = '1';
     7be:	e1 e3       	ldi	r30, 0x31	; 49
     7c0:	e0 93 6e 01 	sts	0x016E, r30	; 0x80016e <receivedChar>
			while (receivedChar == '1') {
     7c4:	80 91 6e 01 	lds	r24, 0x016E	; 0x80016e <receivedChar>
     7c8:	81 33       	cpi	r24, 0x31	; 49
     7ca:	c1 f5       	brne	.+112    	; 0x83c <main+0x228>
				PORTD |= (1<<ACTIVITY_LED);
     7cc:	93 9a       	sbi	0x12, 3	; 18
     7ce:	00 e0       	ldi	r16, 0x00	; 0
     7d0:	10 e0       	ldi	r17, 0x00	; 0
				for (uint8_t x = 0; x < 64; x++) {
					USART_Transmit(gba_read_ram_8bit_data(address));
     7d2:	c8 01       	movw	r24, r16
     7d4:	8c 0d       	add	r24, r12
     7d6:	9d 1d       	adc	r25, r13
     7d8:	b9 dc       	rcall	.-1678   	; 0x14c <gba_read_ram_8bit_data>
     7da:	38 dc       	rcall	.-1936   	; 0x4c <USART_Transmit>
     7dc:	0f 5f       	subi	r16, 0xFF	; 255
     7de:	1f 4f       	sbci	r17, 0xFF	; 255
			gb_mode(); // Set GB mode as it uses 16 bit address with 8 bit data
			
			receivedChar = '1';
			while (receivedChar == '1') {
				PORTD |= (1<<ACTIVITY_LED);
				for (uint8_t x = 0; x < 64; x++) {
     7e0:	00 34       	cpi	r16, 0x40	; 64
     7e2:	11 05       	cpc	r17, r1
     7e4:	b1 f7       	brne	.-20     	; 0x7d2 <main+0x1be>
     7e6:	f0 e4       	ldi	r31, 0x40	; 64
     7e8:	cf 0e       	add	r12, r31
     7ea:	d1 1c       	adc	r13, r1
     7ec:	e1 1c       	adc	r14, r1
     7ee:	f1 1c       	adc	r15, r1
					USART_Transmit(gba_read_ram_8bit_data(address));
					address++;
				}
				
				PORTD &= ~(1<<ACTIVITY_LED);
     7f0:	93 98       	cbi	0x12, 3	; 18
				receivedChar = USART_Receive();
     7f2:	28 dc       	rcall	.-1968   	; 0x44 <USART_Receive>
     7f4:	80 93 6e 01 	sts	0x016E, r24	; 0x80016e <receivedChar>
     7f8:	e5 cf       	rjmp	.-54     	; 0x7c4 <main+0x1b0>
			
			gba_mode(); // Set back
		}
		
		// Write to RAM on address (and increment) with 64 bytes of data
		else if (receivedChar == GBA_WRITE_SRAM) {
     7fa:	97 37       	cpi	r25, 0x77	; 119
     7fc:	09 f5       	brne	.+66     	; 0x840 <main+0x22c>
			gb_mode();
     7fe:	4f dc       	rcall	.-1890   	; 0x9e <gb_mode>
			
			usart_read_bytes(64);
     800:	80 e4       	ldi	r24, 0x40	; 64
     802:	90 e0       	ldi	r25, 0x00	; 0
     804:	27 dc       	rcall	.-1970   	; 0x54 <usart_read_bytes>
			
			PORTD |= (1<<ACTIVITY_LED);
     806:	93 9a       	sbi	0x12, 3	; 18
     808:	6e e6       	ldi	r22, 0x6E	; 110
     80a:	a6 2e       	mov	r10, r22
     80c:	60 e0       	ldi	r22, 0x00	; 0
     80e:	b6 2e       	mov	r11, r22
     810:	00 e0       	ldi	r16, 0x00	; 0
     812:	10 e0       	ldi	r17, 0x00	; 0
			for (uint8_t x = 0; x < 64; x++) {
				gba_write_ram_8bit_data(address, receivedBuffer[x]);
     814:	f5 01       	movw	r30, r10
     816:	61 91       	ld	r22, Z+
     818:	5f 01       	movw	r10, r30
     81a:	c8 01       	movw	r24, r16
     81c:	8c 0d       	add	r24, r12
     81e:	9d 1d       	adc	r25, r13
     820:	9e dc       	rcall	.-1732   	; 0x15e <gba_write_ram_8bit_data>
     822:	0f 5f       	subi	r16, 0xFF	; 255
     824:	1f 4f       	sbci	r17, 0xFF	; 255
			gb_mode();
			
			usart_read_bytes(64);
			
			PORTD |= (1<<ACTIVITY_LED);
			for (uint8_t x = 0; x < 64; x++) {
     826:	00 34       	cpi	r16, 0x40	; 64
     828:	11 05       	cpc	r17, r1
     82a:	a1 f7       	brne	.-24     	; 0x814 <main+0x200>
     82c:	f0 e4       	ldi	r31, 0x40	; 64
     82e:	cf 0e       	add	r12, r31
     830:	d1 1c       	adc	r13, r1
     832:	e1 1c       	adc	r14, r1
     834:	f1 1c       	adc	r15, r1
				gba_write_ram_8bit_data(address, receivedBuffer[x]);
				address++;
			}
			USART_Transmit(SEND_ACK); // Send back acknowledgement
     836:	81 e3       	ldi	r24, 0x31	; 49
     838:	09 dc       	rcall	.-2030   	; 0x4c <USART_Transmit>
			
			PORTD &= ~(1<<ACTIVITY_LED);
     83a:	93 98       	cbi	0x12, 3	; 18
			gba_mode(); // Set back
     83c:	5a dc       	rcall	.-1868   	; 0xf2 <gba_mode>
     83e:	fb ce       	rjmp	.-522    	; 0x636 <main+0x22>
		}
		
		// Write 1 byte to SRAM address
		else if (receivedChar == GBA_WRITE_ONE_BYTE_SRAM) {
     840:	9f 36       	cpi	r25, 0x6F	; 111
     842:	31 f4       	brne	.+12     	; 0x850 <main+0x23c>
			gb_mode();
     844:	2c dc       	rcall	.-1960   	; 0x9e <gb_mode>
			
			uint8_t data = USART_Receive();
     846:	fe db       	rcall	.-2052   	; 0x44 <USART_Receive>
			gba_write_ram_8bit_data(address, data);
     848:	68 2f       	mov	r22, r24
     84a:	c6 01       	movw	r24, r12
     84c:	88 dc       	rcall	.-1776   	; 0x15e <gba_write_ram_8bit_data>
     84e:	23 c0       	rjmp	.+70     	; 0x896 <main+0x282>
		}
		
		
		// ---------- FLASH ----------
		// Read the Flash Manufacturer and Device ID
		else if (receivedChar == GBA_FLASH_READ_ID) {
     850:	99 36       	cpi	r25, 0x69	; 105
     852:	49 f4       	brne	.+18     	; 0x866 <main+0x252>
			gb_mode();
     854:	24 dc       	rcall	.-1976   	; 0x9e <gb_mode>
			
			flash_read_chip_id();
     856:	34 dd       	rcall	.-1432   	; 0x2c0 <flash_read_chip_id>
			USART_Transmit(flashChipIdBuffer[0]);
     858:	80 91 6c 00 	lds	r24, 0x006C	; 0x80006c <flashChipIdBuffer>
     85c:	f7 db       	rcall	.-2066   	; 0x4c <USART_Transmit>
			USART_Transmit(flashChipIdBuffer[1]);
     85e:	80 91 6d 00 	lds	r24, 0x006D	; 0x80006d <flashChipIdBuffer+0x1>
     862:	f4 db       	rcall	.-2072   	; 0x4c <USART_Transmit>
     864:	eb cf       	rjmp	.-42     	; 0x83c <main+0x228>
			
			gba_mode(); // Set back
		}
		
		// Change bank
		else if (receivedChar == GBA_FLASH_SET_BANK) {
     866:	9b 36       	cpi	r25, 0x6B	; 107
     868:	49 f4       	brne	.+18     	; 0x87c <main+0x268>
			usart_read_chars(); // Read data
     86a:	09 dc       	rcall	.-2030   	; 0x7e <usart_read_chars>
			uint8_t bank = atoi(receivedBuffer); // Convert data string to dec
     86c:	8e e6       	ldi	r24, 0x6E	; 110
     86e:	90 e0       	ldi	r25, 0x00	; 0
     870:	ce d3       	rcall	.+1948   	; 0x100e <atoi>
     872:	18 2f       	mov	r17, r24
			
			gb_mode();
     874:	14 dc       	rcall	.-2008   	; 0x9e <gb_mode>
			flash_switch_bank(bank);
     876:	81 2f       	mov	r24, r17
     878:	58 dd       	rcall	.-1360   	; 0x32a <flash_switch_bank>
     87a:	e0 cf       	rjmp	.-64     	; 0x83c <main+0x228>
			
			gba_mode(); // Set back
		}
		
		// Erase 4K sector on Flash (sector 0 to 15 for 512Kbit)
		else if (receivedChar == GBA_FLASH_4K_SECTOR_ERASE) {
     87c:	93 37       	cpi	r25, 0x73	; 115
     87e:	69 f4       	brne	.+26     	; 0x89a <main+0x286>
			gb_mode();
     880:	0e dc       	rcall	.-2020   	; 0x9e <gb_mode>
			
			usart_read_chars(); // Read sector
     882:	fd db       	rcall	.-2054   	; 0x7e <usart_read_chars>
			uint8_t sectorAddress = strtol(receivedBuffer, NULL, 16); // Convert address string in hex to dec
     884:	40 e1       	ldi	r20, 0x10	; 16
     886:	50 e0       	ldi	r21, 0x00	; 0
     888:	60 e0       	ldi	r22, 0x00	; 0
     88a:	70 e0       	ldi	r23, 0x00	; 0
     88c:	8e e6       	ldi	r24, 0x6E	; 110
     88e:	90 e0       	ldi	r25, 0x00	; 0
     890:	ad d2       	rcall	.+1370   	; 0xdec <strtol>
     892:	86 2f       	mov	r24, r22
			
			flash_erase_4k_sector(sectorAddress);
     894:	5d dd       	rcall	.-1350   	; 0x350 <flash_erase_4k_sector>
			USART_Transmit(SEND_ACK); // Send back acknowledgement
     896:	81 e3       	ldi	r24, 0x31	; 49
     898:	e4 cf       	rjmp	.-56     	; 0x862 <main+0x24e>
			
			gba_mode(); // Set back
		}
		
		// Write 64 bytes to Flash address one byte write at a time (and increment)
		else if (receivedChar == GBA_FLASH_WRITE_BYTE) {
     89a:	92 36       	cpi	r25, 0x62	; 98
     89c:	c1 f4       	brne	.+48     	; 0x8ce <main+0x2ba>
			gb_mode();
     89e:	ff db       	rcall	.-2050   	; 0x9e <gb_mode>
			
			usart_read_bytes(64);
     8a0:	80 e4       	ldi	r24, 0x40	; 64
     8a2:	90 e0       	ldi	r25, 0x00	; 0
     8a4:	d7 db       	rcall	.-2130   	; 0x54 <usart_read_bytes>
			
			PORTD |= (1<<ACTIVITY_LED);
     8a6:	93 9a       	sbi	0x12, 3	; 18
     8a8:	5e e6       	ldi	r21, 0x6E	; 110
     8aa:	a5 2e       	mov	r10, r21
     8ac:	50 e0       	ldi	r21, 0x00	; 0
     8ae:	b5 2e       	mov	r11, r21
     8b0:	00 e0       	ldi	r16, 0x00	; 0
     8b2:	10 e0       	ldi	r17, 0x00	; 0
			for (uint8_t x = 0; x < 64; x++) {
				flash_write_byte(address, receivedBuffer[x]);
     8b4:	f5 01       	movw	r30, r10
     8b6:	61 91       	ld	r22, Z+
     8b8:	5f 01       	movw	r10, r30
     8ba:	c8 01       	movw	r24, r16
     8bc:	8c 0d       	add	r24, r12
     8be:	9d 1d       	adc	r25, r13
     8c0:	6b dd       	rcall	.-1322   	; 0x398 <flash_write_byte>
     8c2:	0f 5f       	subi	r16, 0xFF	; 255
     8c4:	1f 4f       	sbci	r17, 0xFF	; 255
			gb_mode();
			
			usart_read_bytes(64);
			
			PORTD |= (1<<ACTIVITY_LED);
			for (uint8_t x = 0; x < 64; x++) {
     8c6:	00 34       	cpi	r16, 0x40	; 64
     8c8:	11 05       	cpc	r17, r1
     8ca:	a1 f7       	brne	.-24     	; 0x8b4 <main+0x2a0>
     8cc:	af cf       	rjmp	.-162    	; 0x82c <main+0x218>
			PORTD &= ~(1<<ACTIVITY_LED);
			gba_mode(); // Set back
		}
		
		// Write 128 bytes to flash sector for Atmel flash (and increment)
		else if (receivedChar == GBA_FLASH_WRITE_ATMEL) {
     8ce:	91 36       	cpi	r25, 0x61	; 97
     8d0:	69 f4       	brne	.+26     	; 0x8ec <main+0x2d8>
			gb_mode();
     8d2:	e5 db       	rcall	.-2102   	; 0x9e <gb_mode>
			
			usart_read_bytes(128);
     8d4:	80 e8       	ldi	r24, 0x80	; 128
     8d6:	90 e0       	ldi	r25, 0x00	; 0
     8d8:	bd db       	rcall	.-2182   	; 0x54 <usart_read_bytes>
			
			PORTD |= (1<<ACTIVITY_LED);
     8da:	93 9a       	sbi	0x12, 3	; 18
			flash_write_sector(address); // Address used as sector number
     8dc:	c6 01       	movw	r24, r12
     8de:	78 dd       	rcall	.-1296   	; 0x3d0 <flash_write_sector>
			address++;
     8e0:	2f ef       	ldi	r18, 0xFF	; 255
     8e2:	c2 1a       	sub	r12, r18
     8e4:	d2 0a       	sbc	r13, r18
     8e6:	e2 0a       	sbc	r14, r18
     8e8:	f2 0a       	sbc	r15, r18
     8ea:	a5 cf       	rjmp	.-182    	; 0x836 <main+0x222>
		}
		
		
		// ---------- EEPROM ----------
		// Set EEPROM size
		else if (receivedChar == GBA_SET_EEPROM_SIZE) {
     8ec:	93 35       	cpi	r25, 0x53	; 83
     8ee:	51 f4       	brne	.+20     	; 0x904 <main+0x2f0>
			usart_read_chars(); // Read size
     8f0:	c6 db       	rcall	.-2164   	; 0x7e <usart_read_chars>
			eepromSize = strtol(receivedBuffer, NULL, 16); // Convert size to dec
     8f2:	40 e1       	ldi	r20, 0x10	; 16
     8f4:	50 e0       	ldi	r21, 0x00	; 0
     8f6:	60 e0       	ldi	r22, 0x00	; 0
     8f8:	70 e0       	ldi	r23, 0x00	; 0
     8fa:	8e e6       	ldi	r24, 0x6E	; 110
     8fc:	90 e0       	ldi	r25, 0x00	; 0
     8fe:	76 d2       	rcall	.+1260   	; 0xdec <strtol>
     900:	69 83       	std	Y+1, r22	; 0x01
     902:	99 ce       	rjmp	.-718    	; 0x636 <main+0x22>
		}
		
		// Read the EEPROM on address (and increment) until anything but 1 is received
		else if (receivedChar == GBA_READ_EEPROM) {
     904:	95 36       	cpi	r25, 0x65	; 101
     906:	f1 f4       	brne	.+60     	; 0x944 <main+0x330>
			gba_eeprom_mode();
     908:	3a dc       	rcall	.-1932   	; 0x17e <gba_eeprom_mode>
			
			receivedChar = '1';
     90a:	81 e3       	ldi	r24, 0x31	; 49
					USART_Transmit(eepromBuffer[c]);
				}
				address++; // Increment to next 8 bytes
				
				PORTD &= ~(1<<ACTIVITY_LED);
				receivedChar = USART_Receive();
     90c:	80 93 6e 01 	sts	0x016E, r24	; 0x80016e <receivedChar>
		// Read the EEPROM on address (and increment) until anything but 1 is received
		else if (receivedChar == GBA_READ_EEPROM) {
			gba_eeprom_mode();
			
			receivedChar = '1';
			while (receivedChar == '1') {
     910:	80 91 6e 01 	lds	r24, 0x016E	; 0x80016e <receivedChar>
     914:	81 33       	cpi	r24, 0x31	; 49
     916:	09 f0       	breq	.+2      	; 0x91a <main+0x306>
     918:	91 cf       	rjmp	.-222    	; 0x83c <main+0x228>
				PORTD |= (1<<ACTIVITY_LED);
     91a:	93 9a       	sbi	0x12, 3	; 18
				gba_eeprom_read(address, eepromSize);
     91c:	69 81       	ldd	r22, Y+1	; 0x01
     91e:	c6 01       	movw	r24, r12
     920:	6b dc       	rcall	.-1834   	; 0x1f8 <gba_eeprom_read>
     922:	0f e6       	ldi	r16, 0x6F	; 111
     924:	11 e0       	ldi	r17, 0x01	; 1
				
				// Send back the 8 bytes of data
				for (uint8_t c = 0; c < 8; c++) {
					USART_Transmit(eepromBuffer[c]);
     926:	f8 01       	movw	r30, r16
     928:	81 91       	ld	r24, Z+
     92a:	8f 01       	movw	r16, r30
     92c:	8f db       	rcall	.-2274   	; 0x4c <USART_Transmit>
			while (receivedChar == '1') {
				PORTD |= (1<<ACTIVITY_LED);
				gba_eeprom_read(address, eepromSize);
				
				// Send back the 8 bytes of data
				for (uint8_t c = 0; c < 8; c++) {
     92e:	20 16       	cp	r2, r16
     930:	31 06       	cpc	r3, r17
     932:	c9 f7       	brne	.-14     	; 0x926 <main+0x312>
					USART_Transmit(eepromBuffer[c]);
				}
				address++; // Increment to next 8 bytes
     934:	ff ef       	ldi	r31, 0xFF	; 255
     936:	cf 1a       	sub	r12, r31
     938:	df 0a       	sbc	r13, r31
     93a:	ef 0a       	sbc	r14, r31
     93c:	ff 0a       	sbc	r15, r31
				
				PORTD &= ~(1<<ACTIVITY_LED);
     93e:	93 98       	cbi	0x12, 3	; 18
				receivedChar = USART_Receive();
     940:	81 db       	rcall	.-2302   	; 0x44 <USART_Receive>
     942:	e4 cf       	rjmp	.-56     	; 0x90c <main+0x2f8>
			
			gba_mode(); // Set back
		}
		
		// Write 8 bytes to the EEPROM address (and increment)
		else if (receivedChar == GBA_WRITE_EEPROM) {
     944:	90 37       	cpi	r25, 0x70	; 112
     946:	d1 f4       	brne	.+52     	; 0x97c <main+0x368>
			gba_eeprom_mode();
     948:	1a dc       	rcall	.-1996   	; 0x17e <gba_eeprom_mode>
     94a:	0f e6       	ldi	r16, 0x6F	; 111
     94c:	11 e0       	ldi	r17, 0x01	; 1
			
			// Read 8 bytes from USART and place in buffer
			for (uint8_t x = 0; x < 8; x++) {
				eepromBuffer[x] = USART_Receive();
     94e:	7a db       	rcall	.-2316   	; 0x44 <USART_Receive>
     950:	f8 01       	movw	r30, r16
     952:	81 93       	st	Z+, r24
     954:	8f 01       	movw	r16, r30
		// Write 8 bytes to the EEPROM address (and increment)
		else if (receivedChar == GBA_WRITE_EEPROM) {
			gba_eeprom_mode();
			
			// Read 8 bytes from USART and place in buffer
			for (uint8_t x = 0; x < 8; x++) {
     956:	2e 16       	cp	r2, r30
     958:	3f 06       	cpc	r3, r31
     95a:	c9 f7       	brne	.-14     	; 0x94e <main+0x33a>
				eepromBuffer[x] = USART_Receive();
			}
			PORTD |= (1<<ACTIVITY_LED);
     95c:	93 9a       	sbi	0x12, 3	; 18
			
			gba_eeprom_write(address, eepromSize);
     95e:	69 81       	ldd	r22, Y+1	; 0x01
     960:	c6 01       	movw	r24, r12
     962:	77 dc       	rcall	.-1810   	; 0x252 <gba_eeprom_write>
			address++;
     964:	ff ef       	ldi	r31, 0xFF	; 255
     966:	cf 1a       	sub	r12, r31
     968:	df 0a       	sbc	r13, r31
     96a:	ef 0a       	sbc	r14, r31
     96c:	ff 0a       	sbc	r15, r31
     96e:	8f e7       	ldi	r24, 0x7F	; 127
     970:	9e e3       	ldi	r25, 0x3E	; 62
     972:	01 97       	sbiw	r24, 0x01	; 1
     974:	f1 f7       	brne	.-4      	; 0x972 <main+0x35e>
     976:	00 c0       	rjmp	.+0      	; 0x978 <main+0x364>
     978:	00 00       	nop
     97a:	5d cf       	rjmp	.-326    	; 0x836 <main+0x222>
		}
		
		
		// ---------- GB FLASH CARTS ----------
		// Select which pin need to pulse as WE (Audio or WR)
		else if (receivedChar == GB_FLASH_WE_PIN) {
     97c:	90 35       	cpi	r25, 0x50	; 80
     97e:	49 f4       	brne	.+18     	; 0x992 <main+0x37e>
			flashWriteWePin = USART_Receive();
     980:	61 db       	rcall	.-2366   	; 0x44 <USART_Receive>
     982:	80 93 77 01 	sts	0x0177, r24	; 0x800177 <flashWriteWePin>
			
			if (flashWriteWePin == WE_AS_AUDIO_PIN) {
     986:	81 34       	cpi	r24, 0x41	; 65
     988:	09 f0       	breq	.+2      	; 0x98c <main+0x378>
     98a:	55 ce       	rjmp	.-854    	; 0x636 <main+0x22>
				DDRE |= (1<<AUDIO_PIN);
     98c:	31 9a       	sbi	0x06, 1	; 6
				audioPin_high;
     98e:	39 9a       	sbi	0x07, 1	; 7
     990:	52 ce       	rjmp	.-860    	; 0x636 <main+0x22>
			}
		}
		
		// Load the program method to use
		else if (receivedChar == GB_FLASH_PROGRAM_METHOD) {
     992:	95 34       	cpi	r25, 0x45	; 69
     994:	19 f5       	brne	.+70     	; 0x9dc <main+0x3c8>
     996:	00 e6       	ldi	r16, 0x60	; 96
     998:	10 e0       	ldi	r17, 0x00	; 0
			for (uint8_t x = 0; x < 3; x++) {
				usart_read_chars(); // Address
     99a:	71 db       	rcall	.-2334   	; 0x7e <usart_read_chars>
				flashWriteCycle[x][0] = strtol(receivedBuffer, NULL, 16);
     99c:	40 e1       	ldi	r20, 0x10	; 16
     99e:	50 e0       	ldi	r21, 0x00	; 0
     9a0:	60 e0       	ldi	r22, 0x00	; 0
     9a2:	70 e0       	ldi	r23, 0x00	; 0
     9a4:	8e e6       	ldi	r24, 0x6E	; 110
     9a6:	90 e0       	ldi	r25, 0x00	; 0
     9a8:	21 d2       	rcall	.+1090   	; 0xdec <strtol>
     9aa:	f8 01       	movw	r30, r16
     9ac:	71 83       	std	Z+1, r23	; 0x01
     9ae:	60 83       	st	Z, r22
				USART_Transmit(SEND_ACK);
     9b0:	81 e3       	ldi	r24, 0x31	; 49
     9b2:	4c db       	rcall	.-2408   	; 0x4c <USART_Transmit>
				
				usart_read_chars(); // Data
     9b4:	64 db       	rcall	.-2360   	; 0x7e <usart_read_chars>
				flashWriteCycle[x][1] = strtol(receivedBuffer, NULL, 16);
     9b6:	40 e1       	ldi	r20, 0x10	; 16
     9b8:	50 e0       	ldi	r21, 0x00	; 0
     9ba:	60 e0       	ldi	r22, 0x00	; 0
     9bc:	70 e0       	ldi	r23, 0x00	; 0
     9be:	8e e6       	ldi	r24, 0x6E	; 110
     9c0:	90 e0       	ldi	r25, 0x00	; 0
     9c2:	14 d2       	rcall	.+1064   	; 0xdec <strtol>
     9c4:	f8 01       	movw	r30, r16
     9c6:	73 83       	std	Z+3, r23	; 0x03
     9c8:	62 83       	std	Z+2, r22	; 0x02
				USART_Transmit(SEND_ACK);
     9ca:	81 e3       	ldi	r24, 0x31	; 49
     9cc:	3f db       	rcall	.-2434   	; 0x4c <USART_Transmit>
     9ce:	0c 5f       	subi	r16, 0xFC	; 252
     9d0:	1f 4f       	sbci	r17, 0xFF	; 255
			}
		}
		
		// Load the program method to use
		else if (receivedChar == GB_FLASH_PROGRAM_METHOD) {
			for (uint8_t x = 0; x < 3; x++) {
     9d2:	f0 e0       	ldi	r31, 0x00	; 0
     9d4:	0c 36       	cpi	r16, 0x6C	; 108
     9d6:	1f 07       	cpc	r17, r31
     9d8:	01 f7       	brne	.-64     	; 0x99a <main+0x386>
     9da:	2d ce       	rjmp	.-934    	; 0x636 <main+0x22>
				USART_Transmit(SEND_ACK);
			}
		}
		
		// Write address and one byte to Flash, pulse a pin
		else if (receivedChar == GB_FLASH_WRITE_BYTE) {
     9dc:	96 34       	cpi	r25, 0x46	; 70
     9de:	b1 f4       	brne	.+44     	; 0xa0c <main+0x3f8>
			usart_read_chars(); // Read address
     9e0:	4e db       	rcall	.-2404   	; 0x7e <usart_read_chars>
			uint16_t flashAddress = strtol(receivedBuffer, NULL, 16);
     9e2:	40 e1       	ldi	r20, 0x10	; 16
     9e4:	50 e0       	ldi	r21, 0x00	; 0
     9e6:	60 e0       	ldi	r22, 0x00	; 0
     9e8:	70 e0       	ldi	r23, 0x00	; 0
     9ea:	8e e6       	ldi	r24, 0x6E	; 110
     9ec:	90 e0       	ldi	r25, 0x00	; 0
     9ee:	fe d1       	rcall	.+1020   	; 0xdec <strtol>
     9f0:	4b 01       	movw	r8, r22
     9f2:	5c 01       	movw	r10, r24
			
			usart_read_chars(); // Read data byte
     9f4:	44 db       	rcall	.-2424   	; 0x7e <usart_read_chars>
			uint8_t flashByte = strtol(receivedBuffer, NULL, 16);
     9f6:	40 e1       	ldi	r20, 0x10	; 16
     9f8:	50 e0       	ldi	r21, 0x00	; 0
     9fa:	60 e0       	ldi	r22, 0x00	; 0
     9fc:	70 e0       	ldi	r23, 0x00	; 0
     9fe:	8e e6       	ldi	r24, 0x6E	; 110
     a00:	90 e0       	ldi	r25, 0x00	; 0
     a02:	f4 d1       	rcall	.+1000   	; 0xdec <strtol>
			
			PORTD |= (1<<ACTIVITY_LED);
     a04:	93 9a       	sbi	0x12, 3	; 18
			gb_flash_write_bus_cycle(flashAddress, flashByte);
     a06:	c4 01       	movw	r24, r8
     a08:	22 dd       	rcall	.-1468   	; 0x44e <gb_flash_write_bus_cycle>
     a0a:	41 c0       	rjmp	.+130    	; 0xa8e <main+0x47a>
			
			USART_Transmit(SEND_ACK); // Send back acknowledgement
		}
		
		// Write 64 bytes to Flash address one byte write at a time (and increment), pulse a pin
		else if (receivedChar == GB_FLASH_WRITE_64BYTE) {
     a0c:	94 35       	cpi	r25, 0x54	; 84
     a0e:	e1 f4       	brne	.+56     	; 0xa48 <main+0x434>
			usart_read_bytes(64);
     a10:	80 e4       	ldi	r24, 0x40	; 64
     a12:	90 e0       	ldi	r25, 0x00	; 0
     a14:	1f db       	rcall	.-2498   	; 0x54 <usart_read_bytes>
			
			PORTD |= (1<<ACTIVITY_LED);
     a16:	93 9a       	sbi	0x12, 3	; 18
     a18:	4e e6       	ldi	r20, 0x6E	; 110
     a1a:	a4 2e       	mov	r10, r20
     a1c:	40 e0       	ldi	r20, 0x00	; 0
     a1e:	b4 2e       	mov	r11, r20
     a20:	00 e0       	ldi	r16, 0x00	; 0
     a22:	10 e0       	ldi	r17, 0x00	; 0
			for (uint8_t x = 0; x < 64; x++) {
				gb_flash_write_byte(address, receivedBuffer[x]);
     a24:	f5 01       	movw	r30, r10
     a26:	61 91       	ld	r22, Z+
     a28:	5f 01       	movw	r10, r30
     a2a:	c8 01       	movw	r24, r16
     a2c:	8c 0d       	add	r24, r12
     a2e:	9d 1d       	adc	r25, r13
     a30:	25 dd       	rcall	.-1462   	; 0x47c <gb_flash_write_byte>
     a32:	0f 5f       	subi	r16, 0xFF	; 255
     a34:	1f 4f       	sbci	r17, 0xFF	; 255
		// Write 64 bytes to Flash address one byte write at a time (and increment), pulse a pin
		else if (receivedChar == GB_FLASH_WRITE_64BYTE) {
			usart_read_bytes(64);
			
			PORTD |= (1<<ACTIVITY_LED);
			for (uint8_t x = 0; x < 64; x++) {
     a36:	00 34       	cpi	r16, 0x40	; 64
     a38:	11 05       	cpc	r17, r1
     a3a:	a1 f7       	brne	.-24     	; 0xa24 <main+0x410>
     a3c:	f0 e4       	ldi	r31, 0x40	; 64
     a3e:	cf 0e       	add	r12, r31
     a40:	d1 1c       	adc	r13, r1
     a42:	e1 1c       	adc	r14, r1
     a44:	f1 1c       	adc	r15, r1
     a46:	d7 c0       	rjmp	.+430    	; 0xbf6 <main+0x5e2>
		}
		
		
		// ---------- GBA FLASH CARTS ----------
		// Write 24 bit address, 16 bit data and pulse a pin
		else if (receivedChar == GBA_FLASH_CART_WRITE_BYTE) {
     a48:	9e 36       	cpi	r25, 0x6E	; 110
     a4a:	21 f5       	brne	.+72     	; 0xa94 <main+0x480>
			usart_read_chars(); // Read address
     a4c:	18 db       	rcall	.-2512   	; 0x7e <usart_read_chars>
			uint32_t flashAddress = strtol(receivedBuffer, NULL, 16); // Convert address string in hex to dec
     a4e:	40 e1       	ldi	r20, 0x10	; 16
     a50:	50 e0       	ldi	r21, 0x00	; 0
     a52:	60 e0       	ldi	r22, 0x00	; 0
     a54:	70 e0       	ldi	r23, 0x00	; 0
     a56:	8e e6       	ldi	r24, 0x6E	; 110
     a58:	90 e0       	ldi	r25, 0x00	; 0
     a5a:	c8 d1       	rcall	.+912    	; 0xdec <strtol>
     a5c:	4b 01       	movw	r8, r22
     a5e:	5c 01       	movw	r10, r24
			
			receivedChar = USART_Receive(); // Wait for byte
     a60:	f1 da       	rcall	.-2590   	; 0x44 <USART_Receive>
     a62:	80 93 6e 01 	sts	0x016E, r24	; 0x80016e <receivedChar>
			if (receivedChar == GBA_FLASH_CART_WRITE_BYTE) {
     a66:	8e 36       	cpi	r24, 0x6E	; 110
     a68:	09 f0       	breq	.+2      	; 0xa6c <main+0x458>
     a6a:	e5 cd       	rjmp	.-1078   	; 0x636 <main+0x22>
				usart_read_chars(); // Read data
     a6c:	08 db       	rcall	.-2544   	; 0x7e <usart_read_chars>
				uint16_t flashByte = strtol(receivedBuffer, NULL, 16); // Convert data byte in hex to dec
     a6e:	40 e1       	ldi	r20, 0x10	; 16
     a70:	50 e0       	ldi	r21, 0x00	; 0
     a72:	60 e0       	ldi	r22, 0x00	; 0
     a74:	70 e0       	ldi	r23, 0x00	; 0
     a76:	8e e6       	ldi	r24, 0x6E	; 110
     a78:	90 e0       	ldi	r25, 0x00	; 0
     a7a:	b8 d1       	rcall	.+880    	; 0xdec <strtol>
				
				PORTD |= (1<<ACTIVITY_LED);
     a7c:	93 9a       	sbi	0x12, 3	; 18
				GBA_DDR_ROM_ADDR23_16 = 0xFF;
     a7e:	2f ef       	ldi	r18, 0xFF	; 255
     a80:	24 bb       	out	0x14, r18	; 20
				GBA_DDR_ROM_ADDR15_8 = 0xFF;
     a82:	2a bb       	out	0x1a, r18	; 26
				GBA_DDR_ROM_ADDR7_0 = 0xFF;
     a84:	27 bb       	out	0x17, r18	; 23
				gba_flash_write_bus_cycle(flashAddress, flashByte);
     a86:	ab 01       	movw	r20, r22
     a88:	c5 01       	movw	r24, r10
     a8a:	b4 01       	movw	r22, r8
     a8c:	29 dd       	rcall	.-1454   	; 0x4e0 <gba_flash_write_bus_cycle>
				PORTD &= ~(1<<ACTIVITY_LED);
     a8e:	93 98       	cbi	0x12, 3	; 18
				
				USART_Transmit(SEND_ACK); // Send back acknowledgement
     a90:	81 e3       	ldi	r24, 0x31	; 49
     a92:	8d c1       	rjmp	.+794    	; 0xdae <main+0x79a>
			}
		}
		
		// Write 64 or 256 bytes to Flash address, combine 2 bytes and write one at a time (and increment address by 2), pulse a pin
		else if (receivedChar == GBA_FLASH_WRITE_64BYTE || receivedChar == GBA_FLASH_WRITE_256BYTE) {
     a94:	91 37       	cpi	r25, 0x71	; 113
     a96:	11 f0       	breq	.+4      	; 0xa9c <main+0x488>
     a98:	94 37       	cpi	r25, 0x74	; 116
     a9a:	c1 f5       	brne	.+112    	; 0xb0c <main+0x4f8>
			PORTD |= (1<<ACTIVITY_LED);
     a9c:	93 9a       	sbi	0x12, 3	; 18
			
			int readLength = 64;
			if (receivedChar == GBA_FLASH_WRITE_256BYTE) {
     a9e:	80 91 6e 01 	lds	r24, 0x016E	; 0x80016e <receivedChar>
     aa2:	84 37       	cpi	r24, 0x74	; 116
     aa4:	19 f4       	brne	.+6      	; 0xaac <main+0x498>
				readLength = 256;
     aa6:	00 e0       	ldi	r16, 0x00	; 0
     aa8:	11 e0       	ldi	r17, 0x01	; 1
     aaa:	02 c0       	rjmp	.+4      	; 0xab0 <main+0x49c>
		
		// Write 64 or 256 bytes to Flash address, combine 2 bytes and write one at a time (and increment address by 2), pulse a pin
		else if (receivedChar == GBA_FLASH_WRITE_64BYTE || receivedChar == GBA_FLASH_WRITE_256BYTE) {
			PORTD |= (1<<ACTIVITY_LED);
			
			int readLength = 64;
     aac:	00 e4       	ldi	r16, 0x40	; 64
     aae:	10 e0       	ldi	r17, 0x00	; 0
			if (receivedChar == GBA_FLASH_WRITE_256BYTE) {
				readLength = 256;
			}
			usart_read_bytes(readLength);
     ab0:	c8 01       	movw	r24, r16
     ab2:	d0 da       	rcall	.-2656   	; 0x54 <usart_read_bytes>
     ab4:	3e e6       	ldi	r19, 0x6E	; 110
     ab6:	a3 2e       	mov	r10, r19
     ab8:	30 e0       	ldi	r19, 0x00	; 0
     aba:	b3 2e       	mov	r11, r19
     abc:	26 01       	movw	r4, r12
     abe:	37 01       	movw	r6, r14
			
			for (int x = 0; x < readLength; x += 2) {
				uint16_t combinedBytes = (uint16_t) receivedBuffer[x+1] << 8 | (uint16_t) receivedBuffer[x];
				gba_flash_write_byte_swapped(address, combinedBytes);
     ac0:	f5 01       	movw	r30, r10
     ac2:	41 81       	ldd	r20, Z+1	; 0x01
     ac4:	50 e0       	ldi	r21, 0x00	; 0
     ac6:	54 2f       	mov	r21, r20
     ac8:	44 27       	eor	r20, r20
     aca:	80 81       	ld	r24, Z
     acc:	48 2b       	or	r20, r24
     ace:	c3 01       	movw	r24, r6
     ad0:	b2 01       	movw	r22, r4
     ad2:	4e dd       	rcall	.-1380   	; 0x570 <gba_flash_write_byte_swapped>
				address++;
     ad4:	ff ef       	ldi	r31, 0xFF	; 255
     ad6:	4f 1a       	sub	r4, r31
     ad8:	5f 0a       	sbc	r5, r31
     ada:	6f 0a       	sbc	r6, r31
     adc:	7f 0a       	sbc	r7, r31
     ade:	22 e0       	ldi	r18, 0x02	; 2
     ae0:	a2 0e       	add	r10, r18
     ae2:	b1 1c       	adc	r11, r1
			if (receivedChar == GBA_FLASH_WRITE_256BYTE) {
				readLength = 256;
			}
			usart_read_bytes(readLength);
			
			for (int x = 0; x < readLength; x += 2) {
     ae4:	c5 01       	movw	r24, r10
     ae6:	8e 56       	subi	r24, 0x6E	; 110
     ae8:	90 40       	sbci	r25, 0x00	; 0
     aea:	80 17       	cp	r24, r16
     aec:	91 07       	cpc	r25, r17
     aee:	44 f3       	brlt	.-48     	; 0xac0 <main+0x4ac>
     af0:	8f ef       	ldi	r24, 0xFF	; 255
     af2:	c8 1a       	sub	r12, r24
     af4:	d8 0a       	sbc	r13, r24
     af6:	e8 0a       	sbc	r14, r24
     af8:	f8 0a       	sbc	r15, r24
     afa:	01 50       	subi	r16, 0x01	; 1
     afc:	11 09       	sbc	r17, r1
     afe:	16 95       	lsr	r17
     b00:	07 95       	ror	r16
     b02:	c0 0e       	add	r12, r16
     b04:	d1 1e       	adc	r13, r17
     b06:	e1 1c       	adc	r14, r1
     b08:	f1 1c       	adc	r15, r1
     b0a:	75 c0       	rjmp	.+234    	; 0xbf6 <main+0x5e2>
			PORTD &= ~(1<<ACTIVITY_LED);
		}
		
		// Intel flash command based chips
		// Write 64 bytes to Flash address, combine 2 bytes and write one at a time (and increment address by 2), pulse a pin
		else if (receivedChar == GBA_FLASH_WRITE_INTEL_64BYTE) {
     b0c:	9c 36       	cpi	r25, 0x6C	; 108
     b0e:	09 f0       	breq	.+2      	; 0xb12 <main+0x4fe>
     b10:	74 c0       	rjmp	.+232    	; 0xbfa <main+0x5e6>
			PORTD |= (1<<ACTIVITY_LED);
     b12:	93 9a       	sbi	0x12, 3	; 18
			usart_read_bytes(64);
     b14:	80 e4       	ldi	r24, 0x40	; 64
     b16:	90 e0       	ldi	r25, 0x00	; 0
     b18:	9d da       	rcall	.-2758   	; 0x54 <usart_read_bytes>
			
			// Set address lines as outputs
			GBA_DDR_ROM_ADDR23_16 = 0xFF;
     b1a:	9f ef       	ldi	r25, 0xFF	; 255
     b1c:	94 bb       	out	0x14, r25	; 20
			GBA_DDR_ROM_ADDR15_8 = 0xFF;
     b1e:	9a bb       	out	0x1a, r25	; 26
			GBA_DDR_ROM_ADDR7_0 = 0xFF;
     b20:	97 bb       	out	0x17, r25	; 23
			
			// Unlock
			gba_flash_write_bus_cycle(address, 0x60);
     b22:	40 e6       	ldi	r20, 0x60	; 96
     b24:	50 e0       	ldi	r21, 0x00	; 0
     b26:	c7 01       	movw	r24, r14
     b28:	b6 01       	movw	r22, r12
     b2a:	da dc       	rcall	.-1612   	; 0x4e0 <gba_flash_write_bus_cycle>
			gba_flash_write_bus_cycle(address, 0xD0);
     b2c:	40 ed       	ldi	r20, 0xD0	; 208
     b2e:	50 e0       	ldi	r21, 0x00	; 0
     b30:	c7 01       	movw	r24, r14
     b32:	b6 01       	movw	r22, r12
     b34:	d5 dc       	rcall	.-1622   	; 0x4e0 <gba_flash_write_bus_cycle>
			
			// Buffered write command
			gba_flash_write_bus_cycle(address, 0xE8);
     b36:	48 ee       	ldi	r20, 0xE8	; 232
     b38:	50 e0       	ldi	r21, 0x00	; 0
     b3a:	c7 01       	movw	r24, r14
     b3c:	b6 01       	movw	r22, r12
     b3e:	d0 dc       	rcall	.-1632   	; 0x4e0 <gba_flash_write_bus_cycle>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     b40:	e5 e8       	ldi	r30, 0x85	; 133
     b42:	ea 95       	dec	r30
     b44:	f1 f7       	brne	.-4      	; 0xb42 <main+0x52e>
     b46:	00 00       	nop
			_delay_us(50);
			
			// Wait for first 2 bytes to be 0x80, 0x00
			uint16_t dataVerify = gba_read_16bit_data(address);
     b48:	c7 01       	movw	r24, r14
     b4a:	b6 01       	movw	r22, r12
     b4c:	f0 da       	rcall	.-2592   	; 0x12e <gba_read_16bit_data>
			while (dataVerify != 0x0080) {
     b4e:	80 38       	cpi	r24, 0x80	; 128
     b50:	91 05       	cpc	r25, r1
     b52:	41 f0       	breq	.+16     	; 0xb64 <main+0x550>
				dataVerify = gba_read_16bit_data(address);
     b54:	c7 01       	movw	r24, r14
     b56:	b6 01       	movw	r22, r12
     b58:	ea da       	rcall	.-2604   	; 0x12e <gba_read_16bit_data>
     b5a:	f5 e8       	ldi	r31, 0x85	; 133
     b5c:	fa 95       	dec	r31
     b5e:	f1 f7       	brne	.-4      	; 0xb5c <main+0x548>
     b60:	00 00       	nop
     b62:	f5 cf       	rjmp	.-22     	; 0xb4e <main+0x53a>
				_delay_us(50);
			}
			
			
			// Set address lines as outputs
			GBA_DDR_ROM_ADDR23_16 = 0xFF;
     b64:	2f ef       	ldi	r18, 0xFF	; 255
     b66:	24 bb       	out	0x14, r18	; 20
			GBA_DDR_ROM_ADDR15_8 = 0xFF;
     b68:	2a bb       	out	0x1a, r18	; 26
			GBA_DDR_ROM_ADDR7_0 = 0xFF;
     b6a:	27 bb       	out	0x17, r18	; 23
			
			// Set length
			gba_flash_write_bus_cycle(address, 0x1F);
     b6c:	4f e1       	ldi	r20, 0x1F	; 31
     b6e:	50 e0       	ldi	r21, 0x00	; 0
     b70:	c7 01       	movw	r24, r14
     b72:	b6 01       	movw	r22, r12
     b74:	b5 dc       	rcall	.-1686   	; 0x4e0 <gba_flash_write_bus_cycle>
     b76:	0e e6       	ldi	r16, 0x6E	; 110
     b78:	10 e0       	ldi	r17, 0x00	; 0
     b7a:	46 01       	movw	r8, r12
     b7c:	57 01       	movw	r10, r14
			
			// Write data
			for (int x = 0; x < 64; x += 2) {
				uint16_t combinedBytes = (uint16_t) receivedBuffer[x+1] << 8 | (uint16_t) receivedBuffer[x];
				gba_flash_write_bus_cycle(address, combinedBytes);
     b7e:	f8 01       	movw	r30, r16
     b80:	41 81       	ldd	r20, Z+1	; 0x01
     b82:	50 e0       	ldi	r21, 0x00	; 0
     b84:	54 2f       	mov	r21, r20
     b86:	44 27       	eor	r20, r20
     b88:	80 81       	ld	r24, Z
     b8a:	48 2b       	or	r20, r24
     b8c:	c5 01       	movw	r24, r10
     b8e:	b4 01       	movw	r22, r8
     b90:	a7 dc       	rcall	.-1714   	; 0x4e0 <gba_flash_write_bus_cycle>
				address++;
     b92:	ff ef       	ldi	r31, 0xFF	; 255
     b94:	8f 1a       	sub	r8, r31
     b96:	9f 0a       	sbc	r9, r31
     b98:	af 0a       	sbc	r10, r31
     b9a:	bf 0a       	sbc	r11, r31
     b9c:	0e 5f       	subi	r16, 0xFE	; 254
     b9e:	1f 4f       	sbci	r17, 0xFF	; 255
			
			// Set length
			gba_flash_write_bus_cycle(address, 0x1F);
			
			// Write data
			for (int x = 0; x < 64; x += 2) {
     ba0:	20 e0       	ldi	r18, 0x00	; 0
     ba2:	0e 3a       	cpi	r16, 0xAE	; 174
     ba4:	12 07       	cpc	r17, r18
     ba6:	59 f7       	brne	.-42     	; 0xb7e <main+0x56a>
     ba8:	80 e2       	ldi	r24, 0x20	; 32
     baa:	c8 0e       	add	r12, r24
     bac:	d1 1c       	adc	r13, r1
     bae:	e1 1c       	adc	r14, r1
     bb0:	f1 1c       	adc	r15, r1
				gba_flash_write_bus_cycle(address, combinedBytes);
				address++;
			}
			
			// Write buffer to flash
			gba_flash_write_bus_cycle(address, 0xD0);
     bb2:	40 ed       	ldi	r20, 0xD0	; 208
     bb4:	50 e0       	ldi	r21, 0x00	; 0
     bb6:	c7 01       	movw	r24, r14
     bb8:	b6 01       	movw	r22, r12
     bba:	92 dc       	rcall	.-1756   	; 0x4e0 <gba_flash_write_bus_cycle>
     bbc:	ef e6       	ldi	r30, 0x6F	; 111
     bbe:	f3 e0       	ldi	r31, 0x03	; 3
     bc0:	31 97       	sbiw	r30, 0x01	; 1
     bc2:	f1 f7       	brne	.-4      	; 0xbc0 <main+0x5ac>
     bc4:	00 c0       	rjmp	.+0      	; 0xbc6 <main+0x5b2>
     bc6:	00 00       	nop
			_delay_us(440);
			
			// Wait for first 2 bytes to be 0x80, 0x00
			dataVerify = gba_read_16bit_data(address);
     bc8:	c7 01       	movw	r24, r14
     bca:	b6 01       	movw	r22, r12
     bcc:	b0 da       	rcall	.-2720   	; 0x12e <gba_read_16bit_data>
			while (dataVerify != 0x0080) {
     bce:	80 38       	cpi	r24, 0x80	; 128
     bd0:	91 05       	cpc	r25, r1
     bd2:	41 f0       	breq	.+16     	; 0xbe4 <main+0x5d0>
				dataVerify = gba_read_16bit_data(address);
     bd4:	c7 01       	movw	r24, r14
     bd6:	b6 01       	movw	r22, r12
     bd8:	aa da       	rcall	.-2732   	; 0x12e <gba_read_16bit_data>
     bda:	f5 e8       	ldi	r31, 0x85	; 133
     bdc:	fa 95       	dec	r31
     bde:	f1 f7       	brne	.-4      	; 0xbdc <main+0x5c8>
     be0:	00 00       	nop
     be2:	f5 cf       	rjmp	.-22     	; 0xbce <main+0x5ba>
				_delay_us(50);
			}
			
			
			// Set address lines as outputs
			GBA_DDR_ROM_ADDR23_16 = 0xFF;
     be4:	2f ef       	ldi	r18, 0xFF	; 255
     be6:	24 bb       	out	0x14, r18	; 20
			GBA_DDR_ROM_ADDR15_8 = 0xFF;
     be8:	2a bb       	out	0x1a, r18	; 26
			GBA_DDR_ROM_ADDR7_0 = 0xFF;
     bea:	27 bb       	out	0x17, r18	; 23
			
			// Back to reading mode
			gba_flash_write_bus_cycle(address, 0xFF);
     bec:	4f ef       	ldi	r20, 0xFF	; 255
     bee:	50 e0       	ldi	r21, 0x00	; 0
     bf0:	c7 01       	movw	r24, r14
     bf2:	b6 01       	movw	r22, r12
     bf4:	75 dc       	rcall	.-1814   	; 0x4e0 <gba_flash_write_bus_cycle>
			
			USART_Transmit(SEND_ACK); // Send back acknowledgement
     bf6:	81 e3       	ldi	r24, 0x31	; 49
     bf8:	c3 c0       	rjmp	.+390    	; 0xd80 <main+0x76c>
		
		
		// ---------- General commands ----------
		// Set any pin as input/output
		// Reads the DDR/PORT (e.g. DDRB/PORTB is 'B') and the hex value that represents pins to set to an input (e.g. PB7 is 0x80)
		else if (receivedChar == SET_INPUT || receivedChar == SET_OUTPUT) {
     bfa:	99 34       	cpi	r25, 0x49	; 73
     bfc:	19 f0       	breq	.+6      	; 0xc04 <main+0x5f0>
     bfe:	9f 34       	cpi	r25, 0x4F	; 79
     c00:	09 f0       	breq	.+2      	; 0xc04 <main+0x5f0>
     c02:	50 c0       	rjmp	.+160    	; 0xca4 <main+0x690>
			char portChar = USART_Receive();
     c04:	1f da       	rcall	.-3010   	; 0x44 <USART_Receive>
     c06:	18 2f       	mov	r17, r24
			usart_read_chars();
     c08:	3a da       	rcall	.-2956   	; 0x7e <usart_read_chars>
			uint8_t setValue = strtol(receivedBuffer, NULL, 16);
     c0a:	40 e1       	ldi	r20, 0x10	; 16
     c0c:	50 e0       	ldi	r21, 0x00	; 0
     c0e:	60 e0       	ldi	r22, 0x00	; 0
     c10:	70 e0       	ldi	r23, 0x00	; 0
     c12:	8e e6       	ldi	r24, 0x6E	; 110
     c14:	90 e0       	ldi	r25, 0x00	; 0
     c16:	ea d0       	rcall	.+468    	; 0xdec <strtol>
			
			PORTD |= (1<<ACTIVITY_LED);
     c18:	93 9a       	sbi	0x12, 3	; 18
			if (receivedChar == SET_INPUT) {
     c1a:	80 91 6e 01 	lds	r24, 0x016E	; 0x80016e <receivedChar>
     c1e:	89 34       	cpi	r24, 0x49	; 73
     c20:	f9 f4       	brne	.+62     	; 0xc60 <main+0x64c>
				if (portChar == 'A') {
     c22:	11 34       	cpi	r17, 0x41	; 65
     c24:	21 f4       	brne	.+8      	; 0xc2e <main+0x61a>
					DDRA &= ~(setValue);
     c26:	8a b3       	in	r24, 0x1a	; 26
     c28:	60 95       	com	r22
     c2a:	68 23       	and	r22, r24
     c2c:	20 c0       	rjmp	.+64     	; 0xc6e <main+0x65a>
				}
				else if (portChar == 'B') {
     c2e:	12 34       	cpi	r17, 0x42	; 66
     c30:	21 f4       	brne	.+8      	; 0xc3a <main+0x626>
					DDRB &= ~(setValue);
     c32:	87 b3       	in	r24, 0x17	; 23
     c34:	60 95       	com	r22
     c36:	68 23       	and	r22, r24
     c38:	20 c0       	rjmp	.+64     	; 0xc7a <main+0x666>
				}
				else if (portChar == 'C') {
     c3a:	13 34       	cpi	r17, 0x43	; 67
     c3c:	21 f4       	brne	.+8      	; 0xc46 <main+0x632>
					DDRC &= ~(setValue);
     c3e:	84 b3       	in	r24, 0x14	; 20
     c40:	60 95       	com	r22
     c42:	68 23       	and	r22, r24
     c44:	20 c0       	rjmp	.+64     	; 0xc86 <main+0x672>
				}
				else if (portChar == 'D') {
     c46:	14 34       	cpi	r17, 0x44	; 68
     c48:	21 f4       	brne	.+8      	; 0xc52 <main+0x63e>
					DDRD &= ~(setValue);
     c4a:	81 b3       	in	r24, 0x11	; 17
     c4c:	60 95       	com	r22
     c4e:	68 23       	and	r22, r24
     c50:	20 c0       	rjmp	.+64     	; 0xc92 <main+0x67e>
				}
				else if (portChar == 'E') {
     c52:	15 34       	cpi	r17, 0x45	; 69
     c54:	09 f0       	breq	.+2      	; 0xc58 <main+0x644>
     c56:	95 c0       	rjmp	.+298    	; 0xd82 <main+0x76e>
					DDRE &= ~(setValue);
     c58:	86 b1       	in	r24, 0x06	; 6
     c5a:	60 95       	com	r22
     c5c:	68 23       	and	r22, r24
     c5e:	20 c0       	rjmp	.+64     	; 0xca0 <main+0x68c>
				}
			}
			else if (receivedChar == SET_OUTPUT) {
     c60:	8f 34       	cpi	r24, 0x4F	; 79
     c62:	09 f0       	breq	.+2      	; 0xc66 <main+0x652>
     c64:	8e c0       	rjmp	.+284    	; 0xd82 <main+0x76e>
				if (portChar == 'A') {
     c66:	11 34       	cpi	r17, 0x41	; 65
     c68:	21 f4       	brne	.+8      	; 0xc72 <main+0x65e>
					DDRA |= (setValue);
     c6a:	8a b3       	in	r24, 0x1a	; 26
     c6c:	68 2b       	or	r22, r24
     c6e:	6a bb       	out	0x1a, r22	; 26
     c70:	88 c0       	rjmp	.+272    	; 0xd82 <main+0x76e>
				}
				else if (portChar == 'B') {
     c72:	12 34       	cpi	r17, 0x42	; 66
     c74:	21 f4       	brne	.+8      	; 0xc7e <main+0x66a>
					DDRB |= (setValue);
     c76:	87 b3       	in	r24, 0x17	; 23
     c78:	68 2b       	or	r22, r24
     c7a:	67 bb       	out	0x17, r22	; 23
     c7c:	82 c0       	rjmp	.+260    	; 0xd82 <main+0x76e>
				}
				else if (portChar == 'C') {
     c7e:	13 34       	cpi	r17, 0x43	; 67
     c80:	21 f4       	brne	.+8      	; 0xc8a <main+0x676>
					DDRC |= (setValue);
     c82:	84 b3       	in	r24, 0x14	; 20
     c84:	68 2b       	or	r22, r24
     c86:	64 bb       	out	0x14, r22	; 20
     c88:	7c c0       	rjmp	.+248    	; 0xd82 <main+0x76e>
				}
				else if (portChar == 'D') {
     c8a:	14 34       	cpi	r17, 0x44	; 68
     c8c:	21 f4       	brne	.+8      	; 0xc96 <main+0x682>
					DDRD |= (setValue);
     c8e:	81 b3       	in	r24, 0x11	; 17
     c90:	68 2b       	or	r22, r24
     c92:	61 bb       	out	0x11, r22	; 17
     c94:	76 c0       	rjmp	.+236    	; 0xd82 <main+0x76e>
				}
				else if (portChar == 'E') {
     c96:	15 34       	cpi	r17, 0x45	; 69
     c98:	09 f0       	breq	.+2      	; 0xc9c <main+0x688>
     c9a:	73 c0       	rjmp	.+230    	; 0xd82 <main+0x76e>
					DDRE |= (setValue);
     c9c:	86 b1       	in	r24, 0x06	; 6
     c9e:	68 2b       	or	r22, r24
     ca0:	66 b9       	out	0x06, r22	; 6
     ca2:	6f c0       	rjmp	.+222    	; 0xd82 <main+0x76e>
			}
			PORTD &= ~(1<<ACTIVITY_LED);
		}
		
		// Set pin output as low
		else if (receivedChar == SET_OUTPUT_LOW) {
     ca4:	9c 34       	cpi	r25, 0x4C	; 76
     ca6:	51 f5       	brne	.+84     	; 0xcfc <main+0x6e8>
			char portChar = USART_Receive();			
     ca8:	cd d9       	rcall	.-3174   	; 0x44 <USART_Receive>
     caa:	18 2f       	mov	r17, r24
			usart_read_chars();
     cac:	e8 d9       	rcall	.-3120   	; 0x7e <usart_read_chars>
			uint8_t setValue = strtol(receivedBuffer, NULL, 16);
     cae:	40 e1       	ldi	r20, 0x10	; 16
     cb0:	50 e0       	ldi	r21, 0x00	; 0
     cb2:	60 e0       	ldi	r22, 0x00	; 0
     cb4:	70 e0       	ldi	r23, 0x00	; 0
     cb6:	8e e6       	ldi	r24, 0x6E	; 110
     cb8:	90 e0       	ldi	r25, 0x00	; 0
     cba:	98 d0       	rcall	.+304    	; 0xdec <strtol>
			
			PORTD |= (1<<ACTIVITY_LED);
     cbc:	93 9a       	sbi	0x12, 3	; 18
			if (portChar == 'A') {
     cbe:	11 34       	cpi	r17, 0x41	; 65
     cc0:	21 f4       	brne	.+8      	; 0xcca <main+0x6b6>
				PORTA &= ~(setValue);
     cc2:	8b b3       	in	r24, 0x1b	; 27
     cc4:	60 95       	com	r22
     cc6:	68 23       	and	r22, r24
     cc8:	2a c0       	rjmp	.+84     	; 0xd1e <main+0x70a>
			}
			else if (portChar == 'B') {
     cca:	12 34       	cpi	r17, 0x42	; 66
     ccc:	21 f4       	brne	.+8      	; 0xcd6 <main+0x6c2>
				PORTB &= ~(setValue);
     cce:	88 b3       	in	r24, 0x18	; 24
     cd0:	60 95       	com	r22
     cd2:	68 23       	and	r22, r24
     cd4:	2a c0       	rjmp	.+84     	; 0xd2a <main+0x716>
			}
			else if (portChar == 'C') {
     cd6:	13 34       	cpi	r17, 0x43	; 67
     cd8:	21 f4       	brne	.+8      	; 0xce2 <main+0x6ce>
				PORTC &= ~(setValue);
     cda:	85 b3       	in	r24, 0x15	; 21
     cdc:	60 95       	com	r22
     cde:	68 23       	and	r22, r24
     ce0:	2a c0       	rjmp	.+84     	; 0xd36 <main+0x722>
			}
			else if (portChar == 'D') {
     ce2:	14 34       	cpi	r17, 0x44	; 68
     ce4:	21 f4       	brne	.+8      	; 0xcee <main+0x6da>
				PORTD &= ~(setValue);
     ce6:	82 b3       	in	r24, 0x12	; 18
     ce8:	60 95       	com	r22
     cea:	68 23       	and	r22, r24
     cec:	2a c0       	rjmp	.+84     	; 0xd42 <main+0x72e>
			}
			else if (portChar == 'E') {
     cee:	15 34       	cpi	r17, 0x45	; 69
     cf0:	09 f0       	breq	.+2      	; 0xcf4 <main+0x6e0>
     cf2:	47 c0       	rjmp	.+142    	; 0xd82 <main+0x76e>
				PORTE &= ~(setValue);
     cf4:	87 b1       	in	r24, 0x07	; 7
     cf6:	60 95       	com	r22
     cf8:	68 23       	and	r22, r24
     cfa:	29 c0       	rjmp	.+82     	; 0xd4e <main+0x73a>
			}
			PORTD &= ~(1<<ACTIVITY_LED);
		}
		
		// Set pin output as high
		else if (receivedChar == SET_OUTPUT_HIGH) {
     cfc:	98 34       	cpi	r25, 0x48	; 72
     cfe:	49 f5       	brne	.+82     	; 0xd52 <main+0x73e>
			char portChar = USART_Receive();			
     d00:	a1 d9       	rcall	.-3262   	; 0x44 <USART_Receive>
     d02:	18 2f       	mov	r17, r24
			usart_read_chars();
     d04:	bc d9       	rcall	.-3208   	; 0x7e <usart_read_chars>
			uint8_t setValue = strtol(receivedBuffer, NULL, 16);
     d06:	40 e1       	ldi	r20, 0x10	; 16
     d08:	50 e0       	ldi	r21, 0x00	; 0
     d0a:	60 e0       	ldi	r22, 0x00	; 0
     d0c:	70 e0       	ldi	r23, 0x00	; 0
     d0e:	8e e6       	ldi	r24, 0x6E	; 110
     d10:	90 e0       	ldi	r25, 0x00	; 0
     d12:	6c d0       	rcall	.+216    	; 0xdec <strtol>
			
			PORTD |= (1<<ACTIVITY_LED);
     d14:	93 9a       	sbi	0x12, 3	; 18
			if (portChar == 'A') {
     d16:	11 34       	cpi	r17, 0x41	; 65
     d18:	21 f4       	brne	.+8      	; 0xd22 <main+0x70e>
				PORTA |= (setValue);
     d1a:	8b b3       	in	r24, 0x1b	; 27
     d1c:	68 2b       	or	r22, r24
     d1e:	6b bb       	out	0x1b, r22	; 27
     d20:	30 c0       	rjmp	.+96     	; 0xd82 <main+0x76e>
			}
			else if (portChar == 'B') {
     d22:	12 34       	cpi	r17, 0x42	; 66
     d24:	21 f4       	brne	.+8      	; 0xd2e <main+0x71a>
				PORTB |= (setValue);
     d26:	88 b3       	in	r24, 0x18	; 24
     d28:	68 2b       	or	r22, r24
     d2a:	68 bb       	out	0x18, r22	; 24
     d2c:	2a c0       	rjmp	.+84     	; 0xd82 <main+0x76e>
			}
			else if (portChar == 'C') {
     d2e:	13 34       	cpi	r17, 0x43	; 67
     d30:	21 f4       	brne	.+8      	; 0xd3a <main+0x726>
				PORTC |= (setValue);
     d32:	85 b3       	in	r24, 0x15	; 21
     d34:	68 2b       	or	r22, r24
     d36:	65 bb       	out	0x15, r22	; 21
     d38:	24 c0       	rjmp	.+72     	; 0xd82 <main+0x76e>
			}
			else if (portChar == 'D') {
     d3a:	14 34       	cpi	r17, 0x44	; 68
     d3c:	21 f4       	brne	.+8      	; 0xd46 <main+0x732>
				PORTD |= (setValue);
     d3e:	82 b3       	in	r24, 0x12	; 18
     d40:	68 2b       	or	r22, r24
     d42:	62 bb       	out	0x12, r22	; 18
     d44:	1e c0       	rjmp	.+60     	; 0xd82 <main+0x76e>
			}
			else if (portChar == 'E') {
     d46:	15 34       	cpi	r17, 0x45	; 69
     d48:	e1 f4       	brne	.+56     	; 0xd82 <main+0x76e>
				PORTE |= (setValue);
     d4a:	87 b1       	in	r24, 0x07	; 7
     d4c:	68 2b       	or	r22, r24
     d4e:	67 b9       	out	0x07, r22	; 7
     d50:	18 c0       	rjmp	.+48     	; 0xd82 <main+0x76e>
			}
			PORTD &= ~(1<<ACTIVITY_LED);
		}
		
		// Read all pins of a PORT and return the value
		else if (receivedChar == READ_INPUT) {
     d52:	94 34       	cpi	r25, 0x44	; 68
     d54:	c1 f4       	brne	.+48     	; 0xd86 <main+0x772>
			char portChar = USART_Receive();			
     d56:	76 d9       	rcall	.-3348   	; 0x44 <USART_Receive>
			
			PORTD |= (1<<ACTIVITY_LED);
     d58:	93 9a       	sbi	0x12, 3	; 18
			if (portChar == 'A') {
     d5a:	81 34       	cpi	r24, 0x41	; 65
     d5c:	11 f4       	brne	.+4      	; 0xd62 <main+0x74e>
				USART_Transmit(PINA);
     d5e:	89 b3       	in	r24, 0x19	; 25
     d60:	0f c0       	rjmp	.+30     	; 0xd80 <main+0x76c>
			}
			else if (portChar == 'B') {
     d62:	82 34       	cpi	r24, 0x42	; 66
     d64:	11 f4       	brne	.+4      	; 0xd6a <main+0x756>
				USART_Transmit(PINB);
     d66:	86 b3       	in	r24, 0x16	; 22
     d68:	0b c0       	rjmp	.+22     	; 0xd80 <main+0x76c>
			}
			else if (portChar == 'C') {
     d6a:	83 34       	cpi	r24, 0x43	; 67
     d6c:	11 f4       	brne	.+4      	; 0xd72 <main+0x75e>
				USART_Transmit(PINC);
     d6e:	83 b3       	in	r24, 0x13	; 19
     d70:	07 c0       	rjmp	.+14     	; 0xd80 <main+0x76c>
			}
			else if (portChar == 'D') {
     d72:	84 34       	cpi	r24, 0x44	; 68
     d74:	11 f4       	brne	.+4      	; 0xd7a <main+0x766>
				USART_Transmit(PIND);
     d76:	80 b3       	in	r24, 0x10	; 16
     d78:	03 c0       	rjmp	.+6      	; 0xd80 <main+0x76c>
			}
			else if (portChar == 'E') {
     d7a:	85 34       	cpi	r24, 0x45	; 69
     d7c:	11 f4       	brne	.+4      	; 0xd82 <main+0x76e>
				USART_Transmit(PINE);
     d7e:	85 b1       	in	r24, 0x05	; 5
     d80:	65 d9       	rcall	.-3382   	; 0x4c <USART_Transmit>
			}
			PORTD &= ~(1<<ACTIVITY_LED);
     d82:	93 98       	cbi	0x12, 3	; 18
     d84:	58 cc       	rjmp	.-1872   	; 0x636 <main+0x22>
		}
		
		// Set the reset common lines variable on or off, useful if you are controlling all the pins directly
		else if (receivedChar == RESET_COMMON_LINES) {
     d86:	9d 34       	cpi	r25, 0x4D	; 77
     d88:	59 f4       	brne	.+22     	; 0xda0 <main+0x78c>
			char commonChar = USART_Receive();
     d8a:	5c d9       	rcall	.-3400   	; 0x44 <USART_Receive>
			if (commonChar == '1') {
     d8c:	81 33       	cpi	r24, 0x31	; 49
     d8e:	19 f4       	brne	.+6      	; 0xd96 <main+0x782>
				resetCommonLines = 1;
     d90:	91 e0       	ldi	r25, 0x01	; 1
     d92:	9a 83       	std	Y+2, r25	; 0x02
     d94:	53 cc       	rjmp	.-1882   	; 0x63c <main+0x28>
			}
			else if (commonChar == '0') {
     d96:	80 33       	cpi	r24, 0x30	; 48
     d98:	09 f0       	breq	.+2      	; 0xd9c <main+0x788>
     d9a:	4d cc       	rjmp	.-1894   	; 0x636 <main+0x22>
				resetCommonLines = 0;
     d9c:	1a 82       	std	Y+2, r1	; 0x02
     d9e:	4f cc       	rjmp	.-1890   	; 0x63e <main+0x2a>
			}
		}
		
		// Send back the PCB version number
		else if (receivedChar == READ_PCB_VERSION) {
     da0:	98 36       	cpi	r25, 0x68	; 104
     da2:	11 f4       	brne	.+4      	; 0xda8 <main+0x794>
			USART_Transmit(PCB_VERSION);
     da4:	82 e0       	ldi	r24, 0x02	; 2
     da6:	03 c0       	rjmp	.+6      	; 0xdae <main+0x79a>
		}
		
		// Send back the firmware version number
		else if (receivedChar == READ_FIRMWARE_VERSION) {
     da8:	96 35       	cpi	r25, 0x56	; 86
     daa:	19 f4       	brne	.+6      	; 0xdb2 <main+0x79e>
			USART_Transmit(FIRMWARE_VERSION);
     dac:	8a e0       	ldi	r24, 0x0A	; 10
     dae:	4e d9       	rcall	.-3428   	; 0x4c <USART_Transmit>
     db0:	42 cc       	rjmp	.-1916   	; 0x636 <main+0x22>
		}
		
		// Reset the AVR if it matches the number
		else if (receivedChar == RESET_AVR) {
     db2:	9a 32       	cpi	r25, 0x2A	; 42
     db4:	09 f0       	breq	.+2      	; 0xdb8 <main+0x7a4>
     db6:	3f cc       	rjmp	.-1922   	; 0x636 <main+0x22>
			usart_read_chars();
     db8:	62 d9       	rcall	.-3388   	; 0x7e <usart_read_chars>
			uint32_t resetValue = strtol(receivedBuffer, NULL, 16);
     dba:	40 e1       	ldi	r20, 0x10	; 16
     dbc:	50 e0       	ldi	r21, 0x00	; 0
     dbe:	60 e0       	ldi	r22, 0x00	; 0
     dc0:	70 e0       	ldi	r23, 0x00	; 0
     dc2:	8e e6       	ldi	r24, 0x6E	; 110
     dc4:	90 e0       	ldi	r25, 0x00	; 0
     dc6:	12 d0       	rcall	.+36     	; 0xdec <strtol>
			if (resetValue == RESET_VALUE) {
     dc8:	61 3e       	cpi	r22, 0xE1	; 225
     dca:	75 4e       	sbci	r23, 0xE5	; 229
     dcc:	87 40       	sbci	r24, 0x07	; 7
     dce:	91 05       	cpc	r25, r1
     dd0:	09 f0       	breq	.+2      	; 0xdd4 <main+0x7c0>
     dd2:	31 cc       	rjmp	.-1950   	; 0x636 <main+0x22>
				// Clear watchdog flag
				MCUCSR &= ~(1<<WDRF);
     dd4:	84 b7       	in	r24, 0x34	; 52
     dd6:	87 7f       	andi	r24, 0xF7	; 247
     dd8:	84 bf       	out	0x34, r24	; 52
				
				// Start timed sequence
				WDTCR = (1<<WDCE) | (1<<WDE);
     dda:	f8 e1       	ldi	r31, 0x18	; 24
     ddc:	f1 bd       	out	0x21, r31	; 33
				
				// Reset in 250 ms
				WDTCR = (1<<WDP2) | (1<<WDE);
     dde:	2c e0       	ldi	r18, 0x0C	; 12
     de0:	21 bd       	out	0x21, r18	; 33
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
     de2:	8f ef       	ldi	r24, 0xFF	; 255
     de4:	9f ef       	ldi	r25, 0xFF	; 255
     de6:	01 97       	sbiw	r24, 0x01	; 1
     de8:	f1 f7       	brne	.-4      	; 0xde6 <main+0x7d2>
     dea:	25 cc       	rjmp	.-1974   	; 0x636 <main+0x22>

00000dec <strtol>:
     dec:	a0 e0       	ldi	r26, 0x00	; 0
     dee:	b0 e0       	ldi	r27, 0x00	; 0
     df0:	eb ef       	ldi	r30, 0xFB	; 251
     df2:	f6 e0       	ldi	r31, 0x06	; 6
     df4:	78 c1       	rjmp	.+752    	; 0x10e6 <__prologue_saves__+0x2>
     df6:	5c 01       	movw	r10, r24
     df8:	6b 01       	movw	r12, r22
     dfa:	7a 01       	movw	r14, r20
     dfc:	61 15       	cp	r22, r1
     dfe:	71 05       	cpc	r23, r1
     e00:	19 f0       	breq	.+6      	; 0xe08 <strtol+0x1c>
     e02:	fb 01       	movw	r30, r22
     e04:	91 83       	std	Z+1, r25	; 0x01
     e06:	80 83       	st	Z, r24
     e08:	e1 14       	cp	r14, r1
     e0a:	f1 04       	cpc	r15, r1
     e0c:	29 f0       	breq	.+10     	; 0xe18 <strtol+0x2c>
     e0e:	c7 01       	movw	r24, r14
     e10:	02 97       	sbiw	r24, 0x02	; 2
     e12:	83 97       	sbiw	r24, 0x23	; 35
     e14:	08 f0       	brcs	.+2      	; 0xe18 <strtol+0x2c>
     e16:	e2 c0       	rjmp	.+452    	; 0xfdc <strtol+0x1f0>
     e18:	e5 01       	movw	r28, r10
     e1a:	21 96       	adiw	r28, 0x01	; 1
     e1c:	f5 01       	movw	r30, r10
     e1e:	10 81       	ld	r17, Z
     e20:	81 2f       	mov	r24, r17
     e22:	90 e0       	ldi	r25, 0x00	; 0
     e24:	11 d1       	rcall	.+546    	; 0x1048 <isspace>
     e26:	89 2b       	or	r24, r25
     e28:	11 f0       	breq	.+4      	; 0xe2e <strtol+0x42>
     e2a:	5e 01       	movw	r10, r28
     e2c:	f5 cf       	rjmp	.-22     	; 0xe18 <strtol+0x2c>
     e2e:	1d 32       	cpi	r17, 0x2D	; 45
     e30:	29 f4       	brne	.+10     	; 0xe3c <strtol+0x50>
     e32:	21 96       	adiw	r28, 0x01	; 1
     e34:	f5 01       	movw	r30, r10
     e36:	11 81       	ldd	r17, Z+1	; 0x01
     e38:	01 e0       	ldi	r16, 0x01	; 1
     e3a:	07 c0       	rjmp	.+14     	; 0xe4a <strtol+0x5e>
     e3c:	1b 32       	cpi	r17, 0x2B	; 43
     e3e:	21 f4       	brne	.+8      	; 0xe48 <strtol+0x5c>
     e40:	e5 01       	movw	r28, r10
     e42:	22 96       	adiw	r28, 0x02	; 2
     e44:	f5 01       	movw	r30, r10
     e46:	11 81       	ldd	r17, Z+1	; 0x01
     e48:	00 e0       	ldi	r16, 0x00	; 0
     e4a:	e1 14       	cp	r14, r1
     e4c:	f1 04       	cpc	r15, r1
     e4e:	09 f1       	breq	.+66     	; 0xe92 <strtol+0xa6>
     e50:	f0 e1       	ldi	r31, 0x10	; 16
     e52:	ef 16       	cp	r14, r31
     e54:	f1 04       	cpc	r15, r1
     e56:	29 f4       	brne	.+10     	; 0xe62 <strtol+0x76>
     e58:	3e c0       	rjmp	.+124    	; 0xed6 <strtol+0xea>
     e5a:	10 e3       	ldi	r17, 0x30	; 48
     e5c:	e1 14       	cp	r14, r1
     e5e:	f1 04       	cpc	r15, r1
     e60:	21 f1       	breq	.+72     	; 0xeaa <strtol+0xbe>
     e62:	28 e0       	ldi	r18, 0x08	; 8
     e64:	e2 16       	cp	r14, r18
     e66:	f1 04       	cpc	r15, r1
     e68:	01 f1       	breq	.+64     	; 0xeaa <strtol+0xbe>
     e6a:	54 f4       	brge	.+20     	; 0xe80 <strtol+0x94>
     e6c:	e2 e0       	ldi	r30, 0x02	; 2
     e6e:	ee 16       	cp	r14, r30
     e70:	f1 04       	cpc	r15, r1
     e72:	21 f5       	brne	.+72     	; 0xebc <strtol+0xd0>
     e74:	81 2c       	mov	r8, r1
     e76:	91 2c       	mov	r9, r1
     e78:	a1 2c       	mov	r10, r1
     e7a:	b0 e4       	ldi	r27, 0x40	; 64
     e7c:	bb 2e       	mov	r11, r27
     e7e:	3d c0       	rjmp	.+122    	; 0xefa <strtol+0x10e>
     e80:	fa e0       	ldi	r31, 0x0A	; 10
     e82:	ef 16       	cp	r14, r31
     e84:	f1 04       	cpc	r15, r1
     e86:	39 f0       	breq	.+14     	; 0xe96 <strtol+0xaa>
     e88:	20 e1       	ldi	r18, 0x10	; 16
     e8a:	e2 16       	cp	r14, r18
     e8c:	f1 04       	cpc	r15, r1
     e8e:	b1 f4       	brne	.+44     	; 0xebc <strtol+0xd0>
     e90:	2f c0       	rjmp	.+94     	; 0xef0 <strtol+0x104>
     e92:	10 33       	cpi	r17, 0x30	; 48
     e94:	11 f1       	breq	.+68     	; 0xeda <strtol+0xee>
     e96:	fa e0       	ldi	r31, 0x0A	; 10
     e98:	ef 2e       	mov	r14, r31
     e9a:	f1 2c       	mov	r15, r1
     e9c:	ac ec       	ldi	r26, 0xCC	; 204
     e9e:	8a 2e       	mov	r8, r26
     ea0:	98 2c       	mov	r9, r8
     ea2:	a8 2c       	mov	r10, r8
     ea4:	ac e0       	ldi	r26, 0x0C	; 12
     ea6:	ba 2e       	mov	r11, r26
     ea8:	28 c0       	rjmp	.+80     	; 0xefa <strtol+0x10e>
     eaa:	78 e0       	ldi	r23, 0x08	; 8
     eac:	e7 2e       	mov	r14, r23
     eae:	f1 2c       	mov	r15, r1
     eb0:	81 2c       	mov	r8, r1
     eb2:	91 2c       	mov	r9, r1
     eb4:	a1 2c       	mov	r10, r1
     eb6:	e0 e1       	ldi	r30, 0x10	; 16
     eb8:	be 2e       	mov	r11, r30
     eba:	1f c0       	rjmp	.+62     	; 0xefa <strtol+0x10e>
     ebc:	60 e0       	ldi	r22, 0x00	; 0
     ebe:	70 e0       	ldi	r23, 0x00	; 0
     ec0:	80 e0       	ldi	r24, 0x00	; 0
     ec2:	90 e8       	ldi	r25, 0x80	; 128
     ec4:	97 01       	movw	r18, r14
     ec6:	0f 2c       	mov	r0, r15
     ec8:	00 0c       	add	r0, r0
     eca:	44 0b       	sbc	r20, r20
     ecc:	55 0b       	sbc	r21, r21
     ece:	de d0       	rcall	.+444    	; 0x108c <__udivmodsi4>
     ed0:	49 01       	movw	r8, r18
     ed2:	5a 01       	movw	r10, r20
     ed4:	12 c0       	rjmp	.+36     	; 0xefa <strtol+0x10e>
     ed6:	10 33       	cpi	r17, 0x30	; 48
     ed8:	59 f4       	brne	.+22     	; 0xef0 <strtol+0x104>
     eda:	88 81       	ld	r24, Y
     edc:	8f 7d       	andi	r24, 0xDF	; 223
     ede:	88 35       	cpi	r24, 0x58	; 88
     ee0:	09 f0       	breq	.+2      	; 0xee4 <strtol+0xf8>
     ee2:	bb cf       	rjmp	.-138    	; 0xe5a <strtol+0x6e>
     ee4:	19 81       	ldd	r17, Y+1	; 0x01
     ee6:	22 96       	adiw	r28, 0x02	; 2
     ee8:	02 60       	ori	r16, 0x02	; 2
     eea:	80 e1       	ldi	r24, 0x10	; 16
     eec:	e8 2e       	mov	r14, r24
     eee:	f1 2c       	mov	r15, r1
     ef0:	81 2c       	mov	r8, r1
     ef2:	91 2c       	mov	r9, r1
     ef4:	a1 2c       	mov	r10, r1
     ef6:	68 e0       	ldi	r22, 0x08	; 8
     ef8:	b6 2e       	mov	r11, r22
     efa:	40 e0       	ldi	r20, 0x00	; 0
     efc:	60 e0       	ldi	r22, 0x00	; 0
     efe:	70 e0       	ldi	r23, 0x00	; 0
     f00:	cb 01       	movw	r24, r22
     f02:	27 01       	movw	r4, r14
     f04:	0f 2c       	mov	r0, r15
     f06:	00 0c       	add	r0, r0
     f08:	66 08       	sbc	r6, r6
     f0a:	77 08       	sbc	r7, r7
     f0c:	fe 01       	movw	r30, r28
     f0e:	50 ed       	ldi	r21, 0xD0	; 208
     f10:	35 2e       	mov	r3, r21
     f12:	31 0e       	add	r3, r17
     f14:	29 e0       	ldi	r18, 0x09	; 9
     f16:	23 15       	cp	r18, r3
     f18:	70 f4       	brcc	.+28     	; 0xf36 <strtol+0x14a>
     f1a:	2f eb       	ldi	r18, 0xBF	; 191
     f1c:	21 0f       	add	r18, r17
     f1e:	2a 31       	cpi	r18, 0x1A	; 26
     f20:	18 f4       	brcc	.+6      	; 0xf28 <strtol+0x13c>
     f22:	39 ec       	ldi	r19, 0xC9	; 201
     f24:	33 2e       	mov	r3, r19
     f26:	06 c0       	rjmp	.+12     	; 0xf34 <strtol+0x148>
     f28:	2f e9       	ldi	r18, 0x9F	; 159
     f2a:	21 0f       	add	r18, r17
     f2c:	2a 31       	cpi	r18, 0x1A	; 26
     f2e:	10 f5       	brcc	.+68     	; 0xf74 <strtol+0x188>
     f30:	29 ea       	ldi	r18, 0xA9	; 169
     f32:	32 2e       	mov	r3, r18
     f34:	31 0e       	add	r3, r17
     f36:	23 2d       	mov	r18, r3
     f38:	30 e0       	ldi	r19, 0x00	; 0
     f3a:	2e 15       	cp	r18, r14
     f3c:	3f 05       	cpc	r19, r15
     f3e:	d4 f4       	brge	.+52     	; 0xf74 <strtol+0x188>
     f40:	47 fd       	sbrc	r20, 7
     f42:	15 c0       	rjmp	.+42     	; 0xf6e <strtol+0x182>
     f44:	86 16       	cp	r8, r22
     f46:	97 06       	cpc	r9, r23
     f48:	a8 06       	cpc	r10, r24
     f4a:	b9 06       	cpc	r11, r25
     f4c:	68 f0       	brcs	.+26     	; 0xf68 <strtol+0x17c>
     f4e:	a3 01       	movw	r20, r6
     f50:	92 01       	movw	r18, r4
     f52:	8d d0       	rcall	.+282    	; 0x106e <__mulsi3>
     f54:	63 0d       	add	r22, r3
     f56:	71 1d       	adc	r23, r1
     f58:	81 1d       	adc	r24, r1
     f5a:	91 1d       	adc	r25, r1
     f5c:	61 30       	cpi	r22, 0x01	; 1
     f5e:	71 05       	cpc	r23, r1
     f60:	81 05       	cpc	r24, r1
     f62:	20 e8       	ldi	r18, 0x80	; 128
     f64:	92 07       	cpc	r25, r18
     f66:	10 f0       	brcs	.+4      	; 0xf6c <strtol+0x180>
     f68:	4f ef       	ldi	r20, 0xFF	; 255
     f6a:	01 c0       	rjmp	.+2      	; 0xf6e <strtol+0x182>
     f6c:	41 e0       	ldi	r20, 0x01	; 1
     f6e:	21 96       	adiw	r28, 0x01	; 1
     f70:	10 81       	ld	r17, Z
     f72:	cc cf       	rjmp	.-104    	; 0xf0c <strtol+0x120>
     f74:	20 2f       	mov	r18, r16
     f76:	21 70       	andi	r18, 0x01	; 1
     f78:	c1 14       	cp	r12, r1
     f7a:	d1 04       	cpc	r13, r1
     f7c:	71 f0       	breq	.+28     	; 0xf9a <strtol+0x1ae>
     f7e:	44 23       	and	r20, r20
     f80:	29 f0       	breq	.+10     	; 0xf8c <strtol+0x1a0>
     f82:	21 97       	sbiw	r28, 0x01	; 1
     f84:	f6 01       	movw	r30, r12
     f86:	d1 83       	std	Z+1, r29	; 0x01
     f88:	c0 83       	st	Z, r28
     f8a:	07 c0       	rjmp	.+14     	; 0xf9a <strtol+0x1ae>
     f8c:	01 ff       	sbrs	r16, 1
     f8e:	19 c0       	rjmp	.+50     	; 0xfc2 <strtol+0x1d6>
     f90:	22 97       	sbiw	r28, 0x02	; 2
     f92:	f6 01       	movw	r30, r12
     f94:	d1 83       	std	Z+1, r29	; 0x01
     f96:	c0 83       	st	Z, r28
     f98:	14 c0       	rjmp	.+40     	; 0xfc2 <strtol+0x1d6>
     f9a:	47 ff       	sbrs	r20, 7
     f9c:	12 c0       	rjmp	.+36     	; 0xfc2 <strtol+0x1d6>
     f9e:	22 23       	and	r18, r18
     fa0:	29 f0       	breq	.+10     	; 0xfac <strtol+0x1c0>
     fa2:	60 e0       	ldi	r22, 0x00	; 0
     fa4:	70 e0       	ldi	r23, 0x00	; 0
     fa6:	80 e0       	ldi	r24, 0x00	; 0
     fa8:	90 e8       	ldi	r25, 0x80	; 128
     faa:	04 c0       	rjmp	.+8      	; 0xfb4 <strtol+0x1c8>
     fac:	6f ef       	ldi	r22, 0xFF	; 255
     fae:	7f ef       	ldi	r23, 0xFF	; 255
     fb0:	8f ef       	ldi	r24, 0xFF	; 255
     fb2:	9f e7       	ldi	r25, 0x7F	; 127
     fb4:	22 e2       	ldi	r18, 0x22	; 34
     fb6:	30 e0       	ldi	r19, 0x00	; 0
     fb8:	30 93 79 01 	sts	0x0179, r19	; 0x800179 <errno+0x1>
     fbc:	20 93 78 01 	sts	0x0178, r18	; 0x800178 <errno>
     fc0:	09 c0       	rjmp	.+18     	; 0xfd4 <strtol+0x1e8>
     fc2:	22 23       	and	r18, r18
     fc4:	81 f0       	breq	.+32     	; 0xfe6 <strtol+0x1fa>
     fc6:	90 95       	com	r25
     fc8:	80 95       	com	r24
     fca:	70 95       	com	r23
     fcc:	61 95       	neg	r22
     fce:	7f 4f       	sbci	r23, 0xFF	; 255
     fd0:	8f 4f       	sbci	r24, 0xFF	; 255
     fd2:	9f 4f       	sbci	r25, 0xFF	; 255
     fd4:	46 2f       	mov	r20, r22
     fd6:	37 2f       	mov	r19, r23
     fd8:	28 2f       	mov	r18, r24
     fda:	12 c0       	rjmp	.+36     	; 0x1000 <strtol+0x214>
     fdc:	40 e0       	ldi	r20, 0x00	; 0
     fde:	30 e0       	ldi	r19, 0x00	; 0
     fe0:	20 e0       	ldi	r18, 0x00	; 0
     fe2:	90 e0       	ldi	r25, 0x00	; 0
     fe4:	0d c0       	rjmp	.+26     	; 0x1000 <strtol+0x214>
     fe6:	97 ff       	sbrs	r25, 7
     fe8:	f5 cf       	rjmp	.-22     	; 0xfd4 <strtol+0x1e8>
     fea:	82 e2       	ldi	r24, 0x22	; 34
     fec:	90 e0       	ldi	r25, 0x00	; 0
     fee:	90 93 79 01 	sts	0x0179, r25	; 0x800179 <errno+0x1>
     ff2:	80 93 78 01 	sts	0x0178, r24	; 0x800178 <errno>
     ff6:	6f ef       	ldi	r22, 0xFF	; 255
     ff8:	7f ef       	ldi	r23, 0xFF	; 255
     ffa:	8f ef       	ldi	r24, 0xFF	; 255
     ffc:	9f e7       	ldi	r25, 0x7F	; 127
     ffe:	ea cf       	rjmp	.-44     	; 0xfd4 <strtol+0x1e8>
    1000:	64 2f       	mov	r22, r20
    1002:	73 2f       	mov	r23, r19
    1004:	82 2f       	mov	r24, r18
    1006:	cd b7       	in	r28, 0x3d	; 61
    1008:	de b7       	in	r29, 0x3e	; 62
    100a:	e1 e1       	ldi	r30, 0x11	; 17
    100c:	88 c0       	rjmp	.+272    	; 0x111e <__epilogue_restores__+0x2>

0000100e <atoi>:
    100e:	fc 01       	movw	r30, r24
    1010:	88 27       	eor	r24, r24
    1012:	99 27       	eor	r25, r25
    1014:	e8 94       	clt
    1016:	21 91       	ld	r18, Z+
    1018:	20 32       	cpi	r18, 0x20	; 32
    101a:	e9 f3       	breq	.-6      	; 0x1016 <atoi+0x8>
    101c:	29 30       	cpi	r18, 0x09	; 9
    101e:	10 f0       	brcs	.+4      	; 0x1024 <atoi+0x16>
    1020:	2e 30       	cpi	r18, 0x0E	; 14
    1022:	c8 f3       	brcs	.-14     	; 0x1016 <atoi+0x8>
    1024:	2b 32       	cpi	r18, 0x2B	; 43
    1026:	39 f0       	breq	.+14     	; 0x1036 <atoi+0x28>
    1028:	2d 32       	cpi	r18, 0x2D	; 45
    102a:	31 f4       	brne	.+12     	; 0x1038 <atoi+0x2a>
    102c:	68 94       	set
    102e:	03 c0       	rjmp	.+6      	; 0x1036 <atoi+0x28>
    1030:	13 d0       	rcall	.+38     	; 0x1058 <__mulhi_const_10>
    1032:	82 0f       	add	r24, r18
    1034:	91 1d       	adc	r25, r1
    1036:	21 91       	ld	r18, Z+
    1038:	20 53       	subi	r18, 0x30	; 48
    103a:	2a 30       	cpi	r18, 0x0A	; 10
    103c:	c8 f3       	brcs	.-14     	; 0x1030 <atoi+0x22>
    103e:	1e f4       	brtc	.+6      	; 0x1046 <atoi+0x38>
    1040:	90 95       	com	r25
    1042:	81 95       	neg	r24
    1044:	9f 4f       	sbci	r25, 0xFF	; 255
    1046:	08 95       	ret

00001048 <isspace>:
    1048:	91 11       	cpse	r25, r1
    104a:	0e c0       	rjmp	.+28     	; 0x1068 <__ctype_isfalse>
    104c:	80 32       	cpi	r24, 0x20	; 32
    104e:	19 f0       	breq	.+6      	; 0x1056 <isspace+0xe>
    1050:	89 50       	subi	r24, 0x09	; 9
    1052:	85 50       	subi	r24, 0x05	; 5
    1054:	d0 f7       	brcc	.-12     	; 0x104a <isspace+0x2>
    1056:	08 95       	ret

00001058 <__mulhi_const_10>:
    1058:	7a e0       	ldi	r23, 0x0A	; 10
    105a:	97 9f       	mul	r25, r23
    105c:	90 2d       	mov	r25, r0
    105e:	87 9f       	mul	r24, r23
    1060:	80 2d       	mov	r24, r0
    1062:	91 0d       	add	r25, r1
    1064:	11 24       	eor	r1, r1
    1066:	08 95       	ret

00001068 <__ctype_isfalse>:
    1068:	99 27       	eor	r25, r25
    106a:	88 27       	eor	r24, r24

0000106c <__ctype_istrue>:
    106c:	08 95       	ret

0000106e <__mulsi3>:
    106e:	db 01       	movw	r26, r22
    1070:	8f 93       	push	r24
    1072:	9f 93       	push	r25
    1074:	2d d0       	rcall	.+90     	; 0x10d0 <__muluhisi3>
    1076:	bf 91       	pop	r27
    1078:	af 91       	pop	r26
    107a:	a2 9f       	mul	r26, r18
    107c:	80 0d       	add	r24, r0
    107e:	91 1d       	adc	r25, r1
    1080:	a3 9f       	mul	r26, r19
    1082:	90 0d       	add	r25, r0
    1084:	b2 9f       	mul	r27, r18
    1086:	90 0d       	add	r25, r0
    1088:	11 24       	eor	r1, r1
    108a:	08 95       	ret

0000108c <__udivmodsi4>:
    108c:	a1 e2       	ldi	r26, 0x21	; 33
    108e:	1a 2e       	mov	r1, r26
    1090:	aa 1b       	sub	r26, r26
    1092:	bb 1b       	sub	r27, r27
    1094:	fd 01       	movw	r30, r26
    1096:	0d c0       	rjmp	.+26     	; 0x10b2 <__udivmodsi4_ep>

00001098 <__udivmodsi4_loop>:
    1098:	aa 1f       	adc	r26, r26
    109a:	bb 1f       	adc	r27, r27
    109c:	ee 1f       	adc	r30, r30
    109e:	ff 1f       	adc	r31, r31
    10a0:	a2 17       	cp	r26, r18
    10a2:	b3 07       	cpc	r27, r19
    10a4:	e4 07       	cpc	r30, r20
    10a6:	f5 07       	cpc	r31, r21
    10a8:	20 f0       	brcs	.+8      	; 0x10b2 <__udivmodsi4_ep>
    10aa:	a2 1b       	sub	r26, r18
    10ac:	b3 0b       	sbc	r27, r19
    10ae:	e4 0b       	sbc	r30, r20
    10b0:	f5 0b       	sbc	r31, r21

000010b2 <__udivmodsi4_ep>:
    10b2:	66 1f       	adc	r22, r22
    10b4:	77 1f       	adc	r23, r23
    10b6:	88 1f       	adc	r24, r24
    10b8:	99 1f       	adc	r25, r25
    10ba:	1a 94       	dec	r1
    10bc:	69 f7       	brne	.-38     	; 0x1098 <__udivmodsi4_loop>
    10be:	60 95       	com	r22
    10c0:	70 95       	com	r23
    10c2:	80 95       	com	r24
    10c4:	90 95       	com	r25
    10c6:	9b 01       	movw	r18, r22
    10c8:	ac 01       	movw	r20, r24
    10ca:	bd 01       	movw	r22, r26
    10cc:	cf 01       	movw	r24, r30
    10ce:	08 95       	ret

000010d0 <__muluhisi3>:
    10d0:	40 d0       	rcall	.+128    	; 0x1152 <__umulhisi3>
    10d2:	a5 9f       	mul	r26, r21
    10d4:	90 0d       	add	r25, r0
    10d6:	b4 9f       	mul	r27, r20
    10d8:	90 0d       	add	r25, r0
    10da:	a4 9f       	mul	r26, r20
    10dc:	80 0d       	add	r24, r0
    10de:	91 1d       	adc	r25, r1
    10e0:	11 24       	eor	r1, r1
    10e2:	08 95       	ret

000010e4 <__prologue_saves__>:
    10e4:	2f 92       	push	r2
    10e6:	3f 92       	push	r3
    10e8:	4f 92       	push	r4
    10ea:	5f 92       	push	r5
    10ec:	6f 92       	push	r6
    10ee:	7f 92       	push	r7
    10f0:	8f 92       	push	r8
    10f2:	9f 92       	push	r9
    10f4:	af 92       	push	r10
    10f6:	bf 92       	push	r11
    10f8:	cf 92       	push	r12
    10fa:	df 92       	push	r13
    10fc:	ef 92       	push	r14
    10fe:	ff 92       	push	r15
    1100:	0f 93       	push	r16
    1102:	1f 93       	push	r17
    1104:	cf 93       	push	r28
    1106:	df 93       	push	r29
    1108:	cd b7       	in	r28, 0x3d	; 61
    110a:	de b7       	in	r29, 0x3e	; 62
    110c:	ca 1b       	sub	r28, r26
    110e:	db 0b       	sbc	r29, r27
    1110:	0f b6       	in	r0, 0x3f	; 63
    1112:	f8 94       	cli
    1114:	de bf       	out	0x3e, r29	; 62
    1116:	0f be       	out	0x3f, r0	; 63
    1118:	cd bf       	out	0x3d, r28	; 61
    111a:	09 94       	ijmp

0000111c <__epilogue_restores__>:
    111c:	2a 88       	ldd	r2, Y+18	; 0x12
    111e:	39 88       	ldd	r3, Y+17	; 0x11
    1120:	48 88       	ldd	r4, Y+16	; 0x10
    1122:	5f 84       	ldd	r5, Y+15	; 0x0f
    1124:	6e 84       	ldd	r6, Y+14	; 0x0e
    1126:	7d 84       	ldd	r7, Y+13	; 0x0d
    1128:	8c 84       	ldd	r8, Y+12	; 0x0c
    112a:	9b 84       	ldd	r9, Y+11	; 0x0b
    112c:	aa 84       	ldd	r10, Y+10	; 0x0a
    112e:	b9 84       	ldd	r11, Y+9	; 0x09
    1130:	c8 84       	ldd	r12, Y+8	; 0x08
    1132:	df 80       	ldd	r13, Y+7	; 0x07
    1134:	ee 80       	ldd	r14, Y+6	; 0x06
    1136:	fd 80       	ldd	r15, Y+5	; 0x05
    1138:	0c 81       	ldd	r16, Y+4	; 0x04
    113a:	1b 81       	ldd	r17, Y+3	; 0x03
    113c:	aa 81       	ldd	r26, Y+2	; 0x02
    113e:	b9 81       	ldd	r27, Y+1	; 0x01
    1140:	ce 0f       	add	r28, r30
    1142:	d1 1d       	adc	r29, r1
    1144:	0f b6       	in	r0, 0x3f	; 63
    1146:	f8 94       	cli
    1148:	de bf       	out	0x3e, r29	; 62
    114a:	0f be       	out	0x3f, r0	; 63
    114c:	cd bf       	out	0x3d, r28	; 61
    114e:	ed 01       	movw	r28, r26
    1150:	08 95       	ret

00001152 <__umulhisi3>:
    1152:	a2 9f       	mul	r26, r18
    1154:	b0 01       	movw	r22, r0
    1156:	b3 9f       	mul	r27, r19
    1158:	c0 01       	movw	r24, r0
    115a:	a3 9f       	mul	r26, r19
    115c:	01 d0       	rcall	.+2      	; 0x1160 <__umulhisi3+0xe>
    115e:	b2 9f       	mul	r27, r18
    1160:	70 0d       	add	r23, r0
    1162:	81 1d       	adc	r24, r1
    1164:	11 24       	eor	r1, r1
    1166:	91 1d       	adc	r25, r1
    1168:	08 95       	ret

0000116a <_exit>:
    116a:	f8 94       	cli

0000116c <__stop_program>:
    116c:	ff cf       	rjmp	.-2      	; 0x116c <__stop_program>
