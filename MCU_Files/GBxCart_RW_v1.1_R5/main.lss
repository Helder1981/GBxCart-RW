
main.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000f7c  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000000  00800060  00000f7c  00001010  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          0000008e  00800060  00800060  00001010  2**0
                  ALLOC
  3 .comment      0000005c  00000000  00000000  00001010  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  0000106c  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000028  00000000  00000000  000010ac  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00001f2d  00000000  00000000  000010d4  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000006c1  00000000  00000000  00003001  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000fe9  00000000  00000000  000036c2  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000318  00000000  00000000  000046ac  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000005bf  00000000  00000000  000049c4  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00001701  00000000  00000000  00004f83  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000060  00000000  00000000  00006684  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	10 c0       	rjmp	.+32     	; 0x22 <__ctors_end>
   2:	1f c0       	rjmp	.+62     	; 0x42 <__bad_interrupt>
   4:	1e c0       	rjmp	.+60     	; 0x42 <__bad_interrupt>
   6:	1d c0       	rjmp	.+58     	; 0x42 <__bad_interrupt>
   8:	1c c0       	rjmp	.+56     	; 0x42 <__bad_interrupt>
   a:	1b c0       	rjmp	.+54     	; 0x42 <__bad_interrupt>
   c:	1a c0       	rjmp	.+52     	; 0x42 <__bad_interrupt>
   e:	19 c0       	rjmp	.+50     	; 0x42 <__bad_interrupt>
  10:	18 c0       	rjmp	.+48     	; 0x42 <__bad_interrupt>
  12:	17 c0       	rjmp	.+46     	; 0x42 <__bad_interrupt>
  14:	16 c0       	rjmp	.+44     	; 0x42 <__bad_interrupt>
  16:	15 c0       	rjmp	.+42     	; 0x42 <__bad_interrupt>
  18:	14 c0       	rjmp	.+40     	; 0x42 <__bad_interrupt>
  1a:	13 c0       	rjmp	.+38     	; 0x42 <__bad_interrupt>
  1c:	12 c0       	rjmp	.+36     	; 0x42 <__bad_interrupt>
  1e:	11 c0       	rjmp	.+34     	; 0x42 <__bad_interrupt>
  20:	10 c0       	rjmp	.+32     	; 0x42 <__bad_interrupt>

00000022 <__ctors_end>:
  22:	11 24       	eor	r1, r1
  24:	1f be       	out	0x3f, r1	; 63
  26:	cf e5       	ldi	r28, 0x5F	; 95
  28:	d2 e0       	ldi	r29, 0x02	; 2
  2a:	de bf       	out	0x3e, r29	; 62
  2c:	cd bf       	out	0x3d, r28	; 61

0000002e <__do_clear_bss>:
  2e:	20 e0       	ldi	r18, 0x00	; 0
  30:	a0 e6       	ldi	r26, 0x60	; 96
  32:	b0 e0       	ldi	r27, 0x00	; 0
  34:	01 c0       	rjmp	.+2      	; 0x38 <.do_clear_bss_start>

00000036 <.do_clear_bss_loop>:
  36:	1d 92       	st	X+, r1

00000038 <.do_clear_bss_start>:
  38:	ae 3e       	cpi	r26, 0xEE	; 238
  3a:	b2 07       	cpc	r27, r18
  3c:	e1 f7       	brne	.-8      	; 0x36 <.do_clear_bss_loop>
  3e:	be d2       	rcall	.+1404   	; 0x5bc <main>
  40:	9b c7       	rjmp	.+3894   	; 0xf78 <_exit>

00000042 <__bad_interrupt>:
  42:	de cf       	rjmp	.-68     	; 0x0 <__vectors>

00000044 <USART_Receive>:
uint8_t eepromBuffer[8];
uint8_t flashChipIdBuffer[2];

// Receive USART data
uint8_t USART_Receive(void) {
	while ( !(UCSRA & (1<<RXC)) ); // Wait for data to be received
  44:	5f 9b       	sbis	0x0b, 7	; 11
  46:	fe cf       	rjmp	.-4      	; 0x44 <USART_Receive>
	return UDR; // Get and return received data from buffer
  48:	8c b1       	in	r24, 0x0c	; 12
}
  4a:	08 95       	ret

0000004c <USART_Transmit>:

// Transmit USART data
void USART_Transmit(unsigned char data) {
	while ( !( UCSRA & (1<<UDRE)) ); // Wait for empty transmit buffer
  4c:	5d 9b       	sbis	0x0b, 5	; 11
  4e:	fe cf       	rjmp	.-4      	; 0x4c <USART_Transmit>
	UDR = data;
  50:	8c b9       	out	0x0c, r24	; 12
  52:	08 95       	ret

00000054 <usart_read_bytes>:
}

// Read 1-128 bytes from the USART 
void usart_read_bytes(uint8_t count) {
  54:	0f 93       	push	r16
  56:	1f 93       	push	r17
  58:	cf 93       	push	r28
  5a:	df 93       	push	r29
  5c:	d8 2f       	mov	r29, r24
  5e:	02 e6       	ldi	r16, 0x62	; 98
  60:	10 e0       	ldi	r17, 0x00	; 0
	for (uint8_t x = 0; x < count; x++) {
  62:	c0 e0       	ldi	r28, 0x00	; 0
  64:	cd 17       	cp	r28, r29
  66:	31 f0       	breq	.+12     	; 0x74 <usart_read_bytes+0x20>
		receivedBuffer[x] = USART_Receive();
  68:	ed df       	rcall	.-38     	; 0x44 <USART_Receive>
  6a:	f8 01       	movw	r30, r16
  6c:	81 93       	st	Z+, r24
  6e:	8f 01       	movw	r16, r30
	UDR = data;
}

// Read 1-128 bytes from the USART 
void usart_read_bytes(uint8_t count) {
	for (uint8_t x = 0; x < count; x++) {
  70:	cf 5f       	subi	r28, 0xFF	; 255
  72:	f8 cf       	rjmp	.-16     	; 0x64 <usart_read_bytes+0x10>
		receivedBuffer[x] = USART_Receive();
	}
}
  74:	df 91       	pop	r29
  76:	cf 91       	pop	r28
  78:	1f 91       	pop	r17
  7a:	0f 91       	pop	r16
  7c:	08 95       	ret

0000007e <usart_read_chars>:

// Read the USART until a 0 (string terminator byte) is received
void usart_read_chars(void) {
  7e:	cf 93       	push	r28
	uint8_t x = 0;
  80:	c0 e0       	ldi	r28, 0x00	; 0
	while (1) {
		receivedBuffer[x] = USART_Receive();
  82:	e0 df       	rcall	.-64     	; 0x44 <USART_Receive>
  84:	ec 2f       	mov	r30, r28
  86:	f0 e0       	ldi	r31, 0x00	; 0
  88:	ee 59       	subi	r30, 0x9E	; 158
  8a:	ff 4f       	sbci	r31, 0xFF	; 255
  8c:	80 83       	st	Z, r24
		if (receivedBuffer[x] == 0) {
  8e:	88 23       	and	r24, r24
  90:	11 f0       	breq	.+4      	; 0x96 <usart_read_chars+0x18>
			break;
		}
		x++;
  92:	cf 5f       	subi	r28, 0xFF	; 255
	}
  94:	f6 cf       	rjmp	.-20     	; 0x82 <usart_read_chars+0x4>
}
  96:	cf 91       	pop	r28
  98:	08 95       	ret

0000009a <rd_wr_csmreq_cs2_reset>:

// Turn RD, WR, CS/MREQ and CS2 to high so they are deselected (reset state)
void rd_wr_csmreq_cs2_reset(void) {
	cs2Pin_high; // CS2 off
  9a:	3a 9a       	sbi	0x07, 2	; 7
	cs_mreqPin_high; // CS/MREQ off
  9c:	94 9a       	sbi	0x12, 4	; 18
	rdPin_high; // RD off
  9e:	95 9a       	sbi	0x12, 5	; 18
	wrPin_high; // WR off
  a0:	96 9a       	sbi	0x12, 6	; 18
  a2:	08 95       	ret

000000a4 <gb_mode>:
// ****** Gameboy / Gameboy Colour functions ******

// Set Gameboy mode
void gb_mode(void) {
	// Set inputs
	PORT_DATA7_0 = 0;
  a4:	15 ba       	out	0x15, r1	; 21
	DDR_DATA7_0 = 0;
  a6:	14 ba       	out	0x14, r1	; 20
	
	// Set outputs
	PORT_ADDR7_0 = 0;
  a8:	18 ba       	out	0x18, r1	; 24
	PORT_ADDR15_8 = 0;
  aa:	1b ba       	out	0x1b, r1	; 27
	DDR_ADDR7_0 = 0xFF;
  ac:	8f ef       	ldi	r24, 0xFF	; 255
  ae:	87 bb       	out	0x17, r24	; 23
	DDR_ADDR15_8 = 0xFF;
  b0:	8a bb       	out	0x1a, r24	; 26
  b2:	08 95       	ret

000000b4 <set_16bit_address>:
}

// Set the 16 bit address on A15-0
void set_16bit_address(uint16_t address) {
	PORT_ADDR15_8 = (address >> 8);
  b4:	9b bb       	out	0x1b, r25	; 27
	PORT_ADDR7_0 = (address & 0xFF);
  b6:	88 bb       	out	0x18, r24	; 24
  b8:	08 95       	ret

000000ba <read_8bit_data>:
}

// Set the address and read a byte from the 8 bit data line
uint8_t read_8bit_data(uint16_t address) {
	set_16bit_address(address);
  ba:	fc df       	rcall	.-8      	; 0xb4 <set_16bit_address>
	
	cs_mreqPin_low;
  bc:	94 98       	cbi	0x12, 4	; 18
	rdPin_low;
  be:	95 98       	cbi	0x12, 5	; 18
	
	asm volatile("nop"); // Delay a little (minimum needed is 1 nops, 2 nops for GB camera)
  c0:	00 00       	nop
	asm volatile("nop");
  c2:	00 00       	nop
	uint8_t data = PIN_DATA7_0; // Read data
  c4:	83 b3       	in	r24, 0x13	; 19
	
	rdPin_high;
  c6:	95 9a       	sbi	0x12, 5	; 18
	cs_mreqPin_high;
  c8:	94 9a       	sbi	0x12, 4	; 18
	
	return data;
}
  ca:	08 95       	ret

000000cc <write_8bit_data>:

// Set the address and write a byte to the 8 bit data line and pulse cs/mREQ if writing to RAM
void write_8bit_data(uint16_t address, uint8_t data, uint8_t type) {
  cc:	cf 93       	push	r28
  ce:	df 93       	push	r29
  d0:	d6 2f       	mov	r29, r22
  d2:	c4 2f       	mov	r28, r20
	set_16bit_address(address);
  d4:	ef df       	rcall	.-34     	; 0xb4 <set_16bit_address>
	
	DDR_DATA7_0 = 0xFF; // Set data pins as outputs
  d6:	8f ef       	ldi	r24, 0xFF	; 255
  d8:	84 bb       	out	0x14, r24	; 20
	PORT_DATA7_0 = data; // Set data
  da:	d5 bb       	out	0x15, r29	; 21
	
	// Pulse WR and mREQ if the type matches
	wrPin_low;
  dc:	96 98       	cbi	0x12, 6	; 18
	if (type == MEMORY_WRITE) {
  de:	c1 30       	cpi	r28, 0x01	; 1
  e0:	09 f4       	brne	.+2      	; 0xe4 <write_8bit_data+0x18>
		cs_mreqPin_low;
  e2:	94 98       	cbi	0x12, 4	; 18
	}
	
	asm volatile("nop");
  e4:	00 00       	nop
	
	if (type == MEMORY_WRITE) {
  e6:	c1 30       	cpi	r28, 0x01	; 1
  e8:	09 f4       	brne	.+2      	; 0xec <write_8bit_data+0x20>
		cs_mreqPin_high;
  ea:	94 9a       	sbi	0x12, 4	; 18
	}
	wrPin_high;
  ec:	96 9a       	sbi	0x12, 6	; 18
	
	// Clear data outputs and set data pins as inputs
	PORT_DATA7_0 = 0;
  ee:	15 ba       	out	0x15, r1	; 21
	DDR_DATA7_0 = 0;
  f0:	14 ba       	out	0x14, r1	; 20
}
  f2:	df 91       	pop	r29
  f4:	cf 91       	pop	r28
  f6:	08 95       	ret

000000f8 <gba_mode>:
// ****** Gameboy Advance functions ****** 

// Set GBA mode
void gba_mode(void) {
	// Set outputs for reading ROM addresses as default
	GBA_PORT_ROM_ADDR7_0 = 0;
  f8:	18 ba       	out	0x18, r1	; 24
	GBA_PORT_ROM_ADDR15_8 = 0;
  fa:	1b ba       	out	0x1b, r1	; 27
	GBA_PORT_ROM_ADDR23_16 = 0;
  fc:	15 ba       	out	0x15, r1	; 21
	GBA_DDR_ROM_ADDR7_0 = 0xFF;
  fe:	8f ef       	ldi	r24, 0xFF	; 255
 100:	87 bb       	out	0x17, r24	; 23
	GBA_DDR_ROM_ADDR15_8 = 0xFF;
 102:	8a bb       	out	0x1a, r24	; 26
	GBA_DDR_ROM_ADDR23_16 = 0xFF;
 104:	84 bb       	out	0x14, r24	; 20
 106:	08 95       	ret

00000108 <gba_set_24bit_address>:
}

// Set the 24 bit address on A23-0
void gba_set_24bit_address(uint32_t address) {	
 108:	0f 93       	push	r16
 10a:	1f 93       	push	r17
	GBA_PORT_ROM_ADDR23_16 = 0; // Set 0-23 address lines low and set as outputs
 10c:	15 ba       	out	0x15, r1	; 21
	GBA_PORT_ROM_ADDR15_8 = 0;
 10e:	1b ba       	out	0x1b, r1	; 27
	GBA_PORT_ROM_ADDR7_0 = 0;
 110:	18 ba       	out	0x18, r1	; 24
	GBA_DDR_ROM_ADDR23_16 = 0xFF;
 112:	2f ef       	ldi	r18, 0xFF	; 255
 114:	24 bb       	out	0x14, r18	; 20
	GBA_DDR_ROM_ADDR15_8 = 0xFF;
 116:	2a bb       	out	0x1a, r18	; 26
	GBA_DDR_ROM_ADDR7_0 = 0xFF;
 118:	27 bb       	out	0x17, r18	; 23
	
	GBA_PORT_ROM_ADDR23_16 = (address >> 16);
 11a:	8c 01       	movw	r16, r24
 11c:	22 27       	eor	r18, r18
 11e:	33 27       	eor	r19, r19
 120:	05 bb       	out	0x15, r16	; 21
	GBA_PORT_ROM_ADDR15_8 = (address >> 8);
 122:	07 2f       	mov	r16, r23
 124:	18 2f       	mov	r17, r24
 126:	29 2f       	mov	r18, r25
 128:	33 27       	eor	r19, r19
 12a:	0b bb       	out	0x1b, r16	; 27
	GBA_PORT_ROM_ADDR7_0 = (address & 0xFF);
 12c:	68 bb       	out	0x18, r22	; 24
}
 12e:	1f 91       	pop	r17
 130:	0f 91       	pop	r16
 132:	08 95       	ret

00000134 <gba_read_16bit_data>:

// ---------- ROM/SRAM ----------

// Read a byte from the 16 bit data line non-sequentially
uint16_t gba_read_16bit_data(uint32_t address) {
	gba_set_24bit_address(address);
 134:	e9 df       	rcall	.-46     	; 0x108 <gba_set_24bit_address>
	
	cs_mreqPin_low;
 136:	94 98       	cbi	0x12, 4	; 18
	
	GBA_PORT_ROM_ADDR15_8 = 0; // Set address lines low and set as inputs
 138:	1b ba       	out	0x1b, r1	; 27
	GBA_PORT_ROM_ADDR7_0 = 0;
 13a:	18 ba       	out	0x18, r1	; 24
	GBA_DDR_ROM_ADDR15_8 = 0;
 13c:	1a ba       	out	0x1a, r1	; 26
	GBA_DDR_ROM_ADDR7_0 = 0;
 13e:	17 ba       	out	0x17, r1	; 23
	
	rdPin_low;
 140:	95 98       	cbi	0x12, 5	; 18
	asm volatile("nop");
 142:	00 00       	nop
	
	uint16_t data = (GBA_PIN_ROM_DATA15_8 << 8) | GBA_PIN_ROM_DATA7_0; // Read data
 144:	29 b3       	in	r18, 0x19	; 25
 146:	86 b3       	in	r24, 0x16	; 22
	
	rdPin_high;
 148:	95 9a       	sbi	0x12, 5	; 18
	cs_mreqPin_high;
 14a:	94 9a       	sbi	0x12, 4	; 18
	
	return data;
 14c:	90 e0       	ldi	r25, 0x00	; 0
}
 14e:	92 2b       	or	r25, r18
 150:	08 95       	ret

00000152 <gba_read_ram_8bit_data>:

// Set the address and read a byte from the 8 bit data line
uint8_t gba_read_ram_8bit_data(uint16_t address) {
	set_16bit_address(address);
 152:	b0 df       	rcall	.-160    	; 0xb4 <set_16bit_address>
	
	rdPin_low;
 154:	95 98       	cbi	0x12, 5	; 18
	cs2Pin_low; // CS2 pin low for SRAM/Flash select
 156:	3a 98       	cbi	0x07, 2	; 7
	
	asm volatile("nop"); // Delay a little (minimum needed is 2)
 158:	00 00       	nop
	asm volatile("nop");
 15a:	00 00       	nop
	
	uint8_t data = GBA_PIN_RAM_DATA7_0; // Read data
 15c:	83 b3       	in	r24, 0x13	; 19
	
	cs2Pin_high;
 15e:	3a 9a       	sbi	0x07, 2	; 7
	rdPin_high;
 160:	95 9a       	sbi	0x12, 5	; 18
	
	return data;
}
 162:	08 95       	ret

00000164 <gba_write_ram_8bit_data>:

// Set the address and write a byte to the 8 bit data line 
void gba_write_ram_8bit_data(uint16_t address, uint8_t data) {
 164:	cf 93       	push	r28
 166:	c6 2f       	mov	r28, r22
	set_16bit_address(address);
 168:	a5 df       	rcall	.-182    	; 0xb4 <set_16bit_address>
	
	GBA_DDR_RAM_DATA7_0 = 0xFF; // Set data pins as outputs
 16a:	8f ef       	ldi	r24, 0xFF	; 255
 16c:	84 bb       	out	0x14, r24	; 20
	GBA_PORT_RAM_DATA7_0 = data; // Set data
 16e:	c5 bb       	out	0x15, r28	; 21
	
	// Pulse WR
	wrPin_low;
 170:	96 98       	cbi	0x12, 6	; 18
	cs2Pin_low; // CS2 pin low for SRAM/Flash select
 172:	3a 98       	cbi	0x07, 2	; 7
	
	asm volatile("nop");
 174:	00 00       	nop
	asm volatile("nop");
 176:	00 00       	nop
	
	cs2Pin_high;
 178:	3a 9a       	sbi	0x07, 2	; 7
	wrPin_high;
 17a:	96 9a       	sbi	0x12, 6	; 18
	
	// Clear data outputs and set data pins as inputs
	GBA_PORT_RAM_DATA7_0 = 0;
 17c:	15 ba       	out	0x15, r1	; 21
	GBA_DDR_RAM_DATA7_0 = 0;
 17e:	14 ba       	out	0x14, r1	; 20
}
 180:	cf 91       	pop	r28
 182:	08 95       	ret

00000184 <gba_eeprom_mode>:

// ---------- EEPROM ----------

// Set address/data all high (includes AD0/A23)
void gba_eeprom_mode (void) {
	GBA_DDR_ROM_ADDR7_0 = 0xFF;
 184:	8f ef       	ldi	r24, 0xFF	; 255
 186:	87 bb       	out	0x17, r24	; 23
	GBA_DDR_ROM_ADDR15_8 = 0xFF;
 188:	8a bb       	out	0x1a, r24	; 26
	GBA_DDR_ROM_ADDR23_16 = 0xFF;
 18a:	84 bb       	out	0x14, r24	; 20
	GBA_PORT_ROM_ADDR7_0 = 0x80;
 18c:	90 e8       	ldi	r25, 0x80	; 128
 18e:	98 bb       	out	0x18, r25	; 24
	GBA_PORT_ROM_ADDR15_8 = 0xFF;
 190:	8b bb       	out	0x1b, r24	; 27
	GBA_PORT_ROM_ADDR23_16 = 0xFF;
 192:	85 bb       	out	0x15, r24	; 21
 194:	08 95       	ret

00000196 <gba_eeprom_set_address>:
}

// Send out EEPROM address serially (WR clock, AD0 data out)
void gba_eeprom_set_address(uint16_t address, uint8_t eepromSize, uint8_t command) {
	cs_mreqPin_low;
 196:	94 98       	cbi	0x12, 4	; 18
	
	int8_t x = 0;
	if (eepromSize == EEPROM_64KBIT) {
 198:	62 30       	cpi	r22, 0x02	; 2
 19a:	49 f4       	brne	.+18     	; 0x1ae <gba_eeprom_set_address+0x18>
		if (command == EEPROM_READ) {
 19c:	41 11       	cpse	r20, r1
 19e:	05 c0       	rjmp	.+10     	; 0x1aa <gba_eeprom_set_address+0x14>
			address |= (1<<15) | (1<<14); // Set upper 2 bits high for read request
 1a0:	90 6c       	ori	r25, 0xC0	; 192
		}
		else {
			address |= (1<<15); // Set upper 1 bit high for write request
		}
		x = 15;
 1a2:	2f e0       	ldi	r18, 0x0F	; 15
		x = 7;
	}
	
	// Loop through address, 8 or 16 bits depending on EEPROM (includes the 2 bits for request type)
	while (x >= 0) {
		if (address & (1<<x)) {
 1a4:	e1 e0       	ldi	r30, 0x01	; 1
 1a6:	f0 e0       	ldi	r31, 0x00	; 0
 1a8:	13 c0       	rjmp	.+38     	; 0x1d0 <gba_eeprom_set_address+0x3a>
	if (eepromSize == EEPROM_64KBIT) {
		if (command == EEPROM_READ) {
			address |= (1<<15) | (1<<14); // Set upper 2 bits high for read request
		}
		else {
			address |= (1<<15); // Set upper 1 bit high for write request
 1aa:	90 68       	ori	r25, 0x80	; 128
 1ac:	fa cf       	rjmp	.-12     	; 0x1a2 <gba_eeprom_set_address+0xc>
		}
		x = 15;
	}
	else {
		if (command == EEPROM_READ) {
 1ae:	41 11       	cpse	r20, r1
 1b0:	02 c0       	rjmp	.+4      	; 0x1b6 <gba_eeprom_set_address+0x20>
			address |= (1<<7) | (1<<6);
 1b2:	80 6c       	ori	r24, 0xC0	; 192
 1b4:	01 c0       	rjmp	.+2      	; 0x1b8 <gba_eeprom_set_address+0x22>
		}
		else {
			address |= (1<<7);
 1b6:	80 68       	ori	r24, 0x80	; 128
		}
		x = 7;
 1b8:	27 e0       	ldi	r18, 0x07	; 7
 1ba:	f4 cf       	rjmp	.-24     	; 0x1a4 <gba_eeprom_set_address+0xe>
	while (x >= 0) {
		if (address & (1<<x)) {
			ad0Pin_high;
		}
		else {
			ad0Pin_low;
 1bc:	c0 98       	cbi	0x18, 0	; 24
		}
		
		wrPin_low; // CLK
 1be:	96 98       	cbi	0x12, 6	; 18
		asm ("nop");
 1c0:	00 00       	nop
		asm ("nop");
 1c2:	00 00       	nop
		wrPin_high; 
 1c4:	96 9a       	sbi	0x12, 6	; 18
		asm ("nop");
 1c6:	00 00       	nop
		asm ("nop");
 1c8:	00 00       	nop
 1ca:	21 50       	subi	r18, 0x01	; 1
		}
		x = 7;
	}
	
	// Loop through address, 8 or 16 bits depending on EEPROM (includes the 2 bits for request type)
	while (x >= 0) {
 1cc:	27 fd       	sbrc	r18, 7
 1ce:	0d c0       	rjmp	.+26     	; 0x1ea <gba_eeprom_set_address+0x54>
		if (address & (1<<x)) {
 1d0:	bf 01       	movw	r22, r30
 1d2:	02 2e       	mov	r0, r18
 1d4:	02 c0       	rjmp	.+4      	; 0x1da <gba_eeprom_set_address+0x44>
 1d6:	66 0f       	add	r22, r22
 1d8:	77 1f       	adc	r23, r23
 1da:	0a 94       	dec	r0
 1dc:	e2 f7       	brpl	.-8      	; 0x1d6 <gba_eeprom_set_address+0x40>
 1de:	68 23       	and	r22, r24
 1e0:	79 23       	and	r23, r25
 1e2:	67 2b       	or	r22, r23
 1e4:	59 f3       	breq	.-42     	; 0x1bc <gba_eeprom_set_address+0x26>
			ad0Pin_high;
 1e6:	c0 9a       	sbi	0x18, 0	; 24
 1e8:	ea cf       	rjmp	.-44     	; 0x1be <gba_eeprom_set_address+0x28>
		
		x--;
	}
	
	// Only send stop bit (0) and WR/CS high if reading, as writing is done in 1 continuous chunk
	if (command == EEPROM_READ) {  
 1ea:	41 11       	cpse	r20, r1
 1ec:	07 c0       	rjmp	.+14     	; 0x1fc <gba_eeprom_set_address+0x66>
		ad0Pin_low;
 1ee:	c0 98       	cbi	0x18, 0	; 24
		asm ("nop");
 1f0:	00 00       	nop
		wrPin_low;
 1f2:	96 98       	cbi	0x12, 6	; 18
		asm ("nop");
 1f4:	00 00       	nop
		asm ("nop");
 1f6:	00 00       	nop
		
		wrPin_high;
 1f8:	96 9a       	sbi	0x12, 6	; 18
		cs_mreqPin_high;
 1fa:	94 9a       	sbi	0x12, 4	; 18
 1fc:	08 95       	ret

000001fe <gba_eeprom_read>:
	}
}

// Read 8 bytes from the EEPROM address, data is valid on rising edge
void gba_eeprom_read(uint16_t address, uint8_t eepromSize) {
	gba_eeprom_set_address(address, eepromSize, EEPROM_READ);
 1fe:	40 e0       	ldi	r20, 0x00	; 0
 200:	ca df       	rcall	.-108    	; 0x196 <gba_eeprom_set_address>
	
	// Set AD0 pin as input
	GBA_PORT_EEPROM_DATA7_0 &= ~(1<<AD0);
 202:	c0 98       	cbi	0x18, 0	; 24
	GBA_DDR_EEPROM_DATA7_0 &= ~(1<<AD0);
 204:	b8 98       	cbi	0x17, 0	; 23
	
	cs_mreqPin_low;
 206:	94 98       	cbi	0x12, 4	; 18
 208:	84 e0       	ldi	r24, 0x04	; 4
	
	// Ignore first 4 bits
	for (int8_t x = 0; x < 4; x++) {
		rdPin_low; // CLK
 20a:	95 98       	cbi	0x12, 5	; 18
		asm ("nop");
 20c:	00 00       	nop
		asm ("nop");
 20e:	00 00       	nop
		rdPin_high; 
 210:	95 9a       	sbi	0x12, 5	; 18
		asm ("nop");
 212:	00 00       	nop
		asm ("nop");
 214:	00 00       	nop
 216:	81 50       	subi	r24, 0x01	; 1
	GBA_DDR_EEPROM_DATA7_0 &= ~(1<<AD0);
	
	cs_mreqPin_low;
	
	// Ignore first 4 bits
	for (int8_t x = 0; x < 4; x++) {
 218:	c1 f7       	brne	.-16     	; 0x20a <gba_eeprom_read+0xc>
 21a:	e4 ee       	ldi	r30, 0xE4	; 228
 21c:	f0 e0       	ldi	r31, 0x00	; 0
			asm ("nop");
			asm ("nop");
			rdPin_high;
			
			if (GBA_PIN_EEPROM_DATA7_0 & (1<<AD0)) {
				data |= (1<<x);
 21e:	41 e0       	ldi	r20, 0x01	; 1
 220:	50 e0       	ldi	r21, 0x00	; 0
	
	// Set AD0 pin as input
	GBA_PORT_EEPROM_DATA7_0 &= ~(1<<AD0);
	GBA_DDR_EEPROM_DATA7_0 &= ~(1<<AD0);
	
	cs_mreqPin_low;
 222:	87 e0       	ldi	r24, 0x07	; 7
 224:	90 e0       	ldi	r25, 0x00	; 0
 226:	20 e0       	ldi	r18, 0x00	; 0
	
	// Read out 64 bits
	for (uint8_t c = 0; c < 8; c++) {
		uint8_t data = 0;
		for (int8_t x = 7; x >= 0; x--) {
			rdPin_low; // CLK
 228:	95 98       	cbi	0x12, 5	; 18
			asm ("nop");
 22a:	00 00       	nop
			asm ("nop");
 22c:	00 00       	nop
			rdPin_high;
 22e:	95 9a       	sbi	0x12, 5	; 18
			
			if (GBA_PIN_EEPROM_DATA7_0 & (1<<AD0)) {
 230:	b0 9b       	sbis	0x16, 0	; 22
 232:	07 c0       	rjmp	.+14     	; 0x242 <gba_eeprom_read+0x44>
				data |= (1<<x);
 234:	ba 01       	movw	r22, r20
 236:	08 2e       	mov	r0, r24
 238:	01 c0       	rjmp	.+2      	; 0x23c <gba_eeprom_read+0x3e>
 23a:	66 0f       	add	r22, r22
 23c:	0a 94       	dec	r0
 23e:	ea f7       	brpl	.-6      	; 0x23a <gba_eeprom_read+0x3c>
 240:	26 2b       	or	r18, r22
 242:	01 97       	sbiw	r24, 0x01	; 1
 244:	88 f7       	brcc	.-30     	; 0x228 <gba_eeprom_read+0x2a>
			}
		}
		eepromBuffer[c] = data;
 246:	21 93       	st	Z+, r18
		asm ("nop");
		asm ("nop");
	}
	
	// Read out 64 bits
	for (uint8_t c = 0; c < 8; c++) {
 248:	80 e0       	ldi	r24, 0x00	; 0
 24a:	ec 3e       	cpi	r30, 0xEC	; 236
 24c:	f8 07       	cpc	r31, r24
 24e:	49 f7       	brne	.-46     	; 0x222 <gba_eeprom_read+0x24>
			}
		}
		eepromBuffer[c] = data;
	}
	
	cs_mreqPin_high;
 250:	94 9a       	sbi	0x12, 4	; 18
	
	// Set AD0 pin as output
	GBA_PORT_EEPROM_DATA7_0 |= (1<<AD0);
 252:	c0 9a       	sbi	0x18, 0	; 24
	GBA_DDR_EEPROM_DATA7_0 |= (1<<AD0);
 254:	b8 9a       	sbi	0x17, 0	; 23
 256:	08 95       	ret

00000258 <gba_eeprom_write>:
}

// Write 8 bytes to the EEPROM address
void gba_eeprom_write(uint16_t address, uint8_t eepromSize) {
	gba_eeprom_set_address(address, eepromSize, EEPROM_WRITE);
 258:	41 e0       	ldi	r20, 0x01	; 1
 25a:	9d df       	rcall	.-198    	; 0x196 <gba_eeprom_set_address>
 25c:	e4 ee       	ldi	r30, 0xE4	; 228
 25e:	f0 e0       	ldi	r31, 0x00	; 0
 260:	48 e0       	ldi	r20, 0x08	; 8
	GBA_PORT_EEPROM_DATA7_0 |= (1<<AD0);
	GBA_DDR_EEPROM_DATA7_0 |= (1<<AD0);
}

// Write 8 bytes to the EEPROM address
void gba_eeprom_write(uint16_t address, uint8_t eepromSize) {
 262:	27 e0       	ldi	r18, 0x07	; 7
 264:	30 e0       	ldi	r19, 0x00	; 0
	gba_eeprom_set_address(address, eepromSize, EEPROM_WRITE);
	
	// Write 64 bits
	for (uint8_t c = 0; c < 8; c++) {
		for (int8_t x = 7; x >= 0; x--) {
			if (eepromBuffer[c] & (1<<x)) {
 266:	80 81       	ld	r24, Z
 268:	90 e0       	ldi	r25, 0x00	; 0
 26a:	02 2e       	mov	r0, r18
 26c:	02 c0       	rjmp	.+4      	; 0x272 <__stack+0x13>
 26e:	95 95       	asr	r25
 270:	87 95       	ror	r24
 272:	0a 94       	dec	r0
 274:	e2 f7       	brpl	.-8      	; 0x26e <__stack+0xf>
 276:	80 ff       	sbrs	r24, 0
 278:	02 c0       	rjmp	.+4      	; 0x27e <__stack+0x1f>
				ad0Pin_high;
 27a:	c0 9a       	sbi	0x18, 0	; 24
 27c:	01 c0       	rjmp	.+2      	; 0x280 <__stack+0x21>
			}
			else {
				ad0Pin_low;
 27e:	c0 98       	cbi	0x18, 0	; 24
			}
			
			wrPin_low; // CLK
 280:	96 98       	cbi	0x12, 6	; 18
			asm ("nop");
 282:	00 00       	nop
			asm ("nop");
 284:	00 00       	nop
			wrPin_high; 
 286:	96 9a       	sbi	0x12, 6	; 18
			asm ("nop");
 288:	00 00       	nop
			asm ("nop");
 28a:	00 00       	nop
 28c:	21 50       	subi	r18, 0x01	; 1
 28e:	31 09       	sbc	r19, r1
 290:	50 f7       	brcc	.-44     	; 0x266 <__stack+0x7>
 292:	41 50       	subi	r20, 0x01	; 1
 294:	31 96       	adiw	r30, 0x01	; 1
// Write 8 bytes to the EEPROM address
void gba_eeprom_write(uint16_t address, uint8_t eepromSize) {
	gba_eeprom_set_address(address, eepromSize, EEPROM_WRITE);
	
	// Write 64 bits
	for (uint8_t c = 0; c < 8; c++) {
 296:	41 11       	cpse	r20, r1
 298:	e4 cf       	rjmp	.-56     	; 0x262 <__stack+0x3>
			asm ("nop");
		}
	}
	
	// Last bit low
	ad0Pin_low;
 29a:	c0 98       	cbi	0x18, 0	; 24
	wrPin_low; // CLK
 29c:	96 98       	cbi	0x12, 6	; 18
	asm ("nop");
 29e:	00 00       	nop
	asm ("nop");
 2a0:	00 00       	nop
	wrPin_high; 
 2a2:	96 9a       	sbi	0x12, 6	; 18
	asm ("nop");
 2a4:	00 00       	nop
	asm ("nop");
 2a6:	00 00       	nop
	
	cs_mreqPin_high;
 2a8:	94 9a       	sbi	0x12, 4	; 18
 2aa:	08 95       	ret

000002ac <flash_write_bus_cycle>:


// ---------- FLASH ----------

// Set the address and data for the write byte cycle to the flash
void flash_write_bus_cycle(uint16_t address, uint8_t data) {
 2ac:	cf 93       	push	r28
 2ae:	c6 2f       	mov	r28, r22
	GBA_DDR_RAM_DATA7_0 = 0xFF; // Set data pins as outputs
 2b0:	2f ef       	ldi	r18, 0xFF	; 255
 2b2:	24 bb       	out	0x14, r18	; 20
	set_16bit_address(address);
 2b4:	ff de       	rcall	.-514    	; 0xb4 <set_16bit_address>
	GBA_PORT_RAM_DATA7_0 = data;
 2b6:	c5 bb       	out	0x15, r28	; 21
	
	wrPin_low;
 2b8:	96 98       	cbi	0x12, 6	; 18
	cs2Pin_low;
 2ba:	3a 98       	cbi	0x07, 2	; 7
	asm volatile("nop");
 2bc:	00 00       	nop
	wrPin_high;
 2be:	96 9a       	sbi	0x12, 6	; 18
	cs2Pin_high;
 2c0:	3a 9a       	sbi	0x07, 2	; 7
}
 2c2:	cf 91       	pop	r28
 2c4:	08 95       	ret

000002c6 <flash_read_chip_id>:

// Read the flash manufacturer and device ID (Software ID)
void flash_read_chip_id(void) {
 2c6:	cf 93       	push	r28
 2c8:	df 93       	push	r29
	flash_write_bus_cycle(0x5555, 0xAA);
 2ca:	6a ea       	ldi	r22, 0xAA	; 170
 2cc:	85 e5       	ldi	r24, 0x55	; 85
 2ce:	95 e5       	ldi	r25, 0x55	; 85
 2d0:	ed df       	rcall	.-38     	; 0x2ac <flash_write_bus_cycle>
	flash_write_bus_cycle(0x2AAA, 0x55);
 2d2:	65 e5       	ldi	r22, 0x55	; 85
 2d4:	8a ea       	ldi	r24, 0xAA	; 170
 2d6:	9a e2       	ldi	r25, 0x2A	; 42
 2d8:	e9 df       	rcall	.-46     	; 0x2ac <flash_write_bus_cycle>
	flash_write_bus_cycle(0x5555, 0x90); // Software ID entry
 2da:	60 e9       	ldi	r22, 0x90	; 144
 2dc:	85 e5       	ldi	r24, 0x55	; 85
 2de:	95 e5       	ldi	r25, 0x55	; 85
 2e0:	e5 df       	rcall	.-54     	; 0x2ac <flash_write_bus_cycle>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 2e2:	8f e3       	ldi	r24, 0x3F	; 63
 2e4:	9c e9       	ldi	r25, 0x9C	; 156
 2e6:	01 97       	sbiw	r24, 0x01	; 1
 2e8:	f1 f7       	brne	.-4      	; 0x2e6 <flash_read_chip_id+0x20>
 2ea:	00 c0       	rjmp	.+0      	; 0x2ec <flash_read_chip_id+0x26>
 2ec:	00 00       	nop
	_delay_ms(20); // Wait a little (for Atmel chip)
	
	// Set data as inputs
	GBA_PORT_RAM_DATA7_0 = 0;
 2ee:	15 ba       	out	0x15, r1	; 21
	GBA_DDR_RAM_DATA7_0 = 0;
 2f0:	14 ba       	out	0x14, r1	; 20
	
	// Read and transmit the 2 bytes
	flashChipIdBuffer[0] = gba_read_ram_8bit_data(0x0000);
 2f2:	80 e0       	ldi	r24, 0x00	; 0
 2f4:	90 e0       	ldi	r25, 0x00	; 0
 2f6:	2d df       	rcall	.-422    	; 0x152 <gba_read_ram_8bit_data>
 2f8:	c0 e6       	ldi	r28, 0x60	; 96
 2fa:	d0 e0       	ldi	r29, 0x00	; 0
 2fc:	88 83       	st	Y, r24
	flashChipIdBuffer[1] = gba_read_ram_8bit_data(0x0001);
 2fe:	81 e0       	ldi	r24, 0x01	; 1
 300:	90 e0       	ldi	r25, 0x00	; 0
 302:	27 df       	rcall	.-434    	; 0x152 <gba_read_ram_8bit_data>
 304:	89 83       	std	Y+1, r24	; 0x01
	
	flash_write_bus_cycle(0x5555, 0xAA);
 306:	6a ea       	ldi	r22, 0xAA	; 170
 308:	85 e5       	ldi	r24, 0x55	; 85
 30a:	95 e5       	ldi	r25, 0x55	; 85
 30c:	cf df       	rcall	.-98     	; 0x2ac <flash_write_bus_cycle>
	flash_write_bus_cycle(0x2AAA, 0x55);
 30e:	65 e5       	ldi	r22, 0x55	; 85
 310:	8a ea       	ldi	r24, 0xAA	; 170
 312:	9a e2       	ldi	r25, 0x2A	; 42
 314:	cb df       	rcall	.-106    	; 0x2ac <flash_write_bus_cycle>
	flash_write_bus_cycle(0x5555, 0xF0); // Software ID exit
 316:	60 ef       	ldi	r22, 0xF0	; 240
 318:	85 e5       	ldi	r24, 0x55	; 85
 31a:	95 e5       	ldi	r25, 0x55	; 85
 31c:	c7 df       	rcall	.-114    	; 0x2ac <flash_write_bus_cycle>
 31e:	8f e3       	ldi	r24, 0x3F	; 63
 320:	9c e9       	ldi	r25, 0x9C	; 156
 322:	01 97       	sbiw	r24, 0x01	; 1
 324:	f1 f7       	brne	.-4      	; 0x322 <flash_read_chip_id+0x5c>
 326:	00 c0       	rjmp	.+0      	; 0x328 <flash_read_chip_id+0x62>
 328:	00 00       	nop
	_delay_ms(20); // Wait a little (for Atmel chip)
}
 32a:	df 91       	pop	r29
 32c:	cf 91       	pop	r28
 32e:	08 95       	ret

00000330 <flash_switch_bank>:

// Switch banks on the Flash
void flash_switch_bank(uint8_t bank) {
 330:	cf 93       	push	r28
 332:	c8 2f       	mov	r28, r24
	flash_write_bus_cycle(0x5555, 0xAA);
 334:	6a ea       	ldi	r22, 0xAA	; 170
 336:	85 e5       	ldi	r24, 0x55	; 85
 338:	95 e5       	ldi	r25, 0x55	; 85
 33a:	b8 df       	rcall	.-144    	; 0x2ac <flash_write_bus_cycle>
	flash_write_bus_cycle(0x2AAA, 0x55);
 33c:	65 e5       	ldi	r22, 0x55	; 85
 33e:	8a ea       	ldi	r24, 0xAA	; 170
 340:	9a e2       	ldi	r25, 0x2A	; 42
 342:	b4 df       	rcall	.-152    	; 0x2ac <flash_write_bus_cycle>
	
	flash_write_bus_cycle(0x5555, 0xB0);
 344:	60 eb       	ldi	r22, 0xB0	; 176
 346:	85 e5       	ldi	r24, 0x55	; 85
 348:	95 e5       	ldi	r25, 0x55	; 85
 34a:	b0 df       	rcall	.-160    	; 0x2ac <flash_write_bus_cycle>
	flash_write_bus_cycle(0x0000, bank);
 34c:	6c 2f       	mov	r22, r28
 34e:	80 e0       	ldi	r24, 0x00	; 0
 350:	90 e0       	ldi	r25, 0x00	; 0
}
 352:	cf 91       	pop	r28
void flash_switch_bank(uint8_t bank) {
	flash_write_bus_cycle(0x5555, 0xAA);
	flash_write_bus_cycle(0x2AAA, 0x55);
	
	flash_write_bus_cycle(0x5555, 0xB0);
	flash_write_bus_cycle(0x0000, bank);
 354:	ab cf       	rjmp	.-170    	; 0x2ac <flash_write_bus_cycle>

00000356 <flash_erase_4k_sector>:
}

// Erase 4K sector on Flash, expects first sector to start at 0, left shifts by 12 (A15-A12 to select sector for 512Kbit)
// Takes 25ms after last command to erase sector
void flash_erase_4k_sector(uint8_t sector) {
 356:	cf 93       	push	r28
 358:	c8 2f       	mov	r28, r24
	flash_write_bus_cycle(0x5555, 0xAA);
 35a:	6a ea       	ldi	r22, 0xAA	; 170
 35c:	85 e5       	ldi	r24, 0x55	; 85
 35e:	95 e5       	ldi	r25, 0x55	; 85
 360:	a5 df       	rcall	.-182    	; 0x2ac <flash_write_bus_cycle>
	flash_write_bus_cycle(0x2AAA, 0x55);
 362:	65 e5       	ldi	r22, 0x55	; 85
 364:	8a ea       	ldi	r24, 0xAA	; 170
 366:	9a e2       	ldi	r25, 0x2A	; 42
 368:	a1 df       	rcall	.-190    	; 0x2ac <flash_write_bus_cycle>
	flash_write_bus_cycle(0x5555, 0x80);
 36a:	60 e8       	ldi	r22, 0x80	; 128
 36c:	85 e5       	ldi	r24, 0x55	; 85
 36e:	95 e5       	ldi	r25, 0x55	; 85
 370:	9d df       	rcall	.-198    	; 0x2ac <flash_write_bus_cycle>
	flash_write_bus_cycle(0x5555, 0xAA);
 372:	6a ea       	ldi	r22, 0xAA	; 170
 374:	85 e5       	ldi	r24, 0x55	; 85
 376:	95 e5       	ldi	r25, 0x55	; 85
 378:	99 df       	rcall	.-206    	; 0x2ac <flash_write_bus_cycle>
	flash_write_bus_cycle(0x2AAA, 0x55);
 37a:	65 e5       	ldi	r22, 0x55	; 85
 37c:	8a ea       	ldi	r24, 0xAA	; 170
 37e:	9a e2       	ldi	r25, 0x2A	; 42
 380:	95 df       	rcall	.-214    	; 0x2ac <flash_write_bus_cycle>
	
	flash_write_bus_cycle((uint16_t) sector << 12, 0x30);
 382:	60 e3       	ldi	r22, 0x30	; 48
 384:	80 e0       	ldi	r24, 0x00	; 0
 386:	9c 2f       	mov	r25, r28
 388:	92 95       	swap	r25
 38a:	90 7f       	andi	r25, 0xF0	; 240
 38c:	8f df       	rcall	.-226    	; 0x2ac <flash_write_bus_cycle>
 38e:	8f e4       	ldi	r24, 0x4F	; 79
 390:	93 ec       	ldi	r25, 0xC3	; 195
 392:	01 97       	sbiw	r24, 0x01	; 1
 394:	f1 f7       	brne	.-4      	; 0x392 <flash_erase_4k_sector+0x3c>
 396:	00 c0       	rjmp	.+0      	; 0x398 <flash_erase_4k_sector+0x42>
 398:	00 00       	nop
	_delay_ms(25); // Wait 25ms for sector erase
}
 39a:	cf 91       	pop	r28
 39c:	08 95       	ret

0000039e <flash_write_byte>:

// Write a single byte to the Flash address
// Takes 20us to program Flash
void flash_write_byte(uint16_t address, uint8_t data) {
 39e:	1f 93       	push	r17
 3a0:	cf 93       	push	r28
 3a2:	df 93       	push	r29
 3a4:	ec 01       	movw	r28, r24
 3a6:	16 2f       	mov	r17, r22
	flash_write_bus_cycle(0x5555, 0xAA);
 3a8:	6a ea       	ldi	r22, 0xAA	; 170
 3aa:	85 e5       	ldi	r24, 0x55	; 85
 3ac:	95 e5       	ldi	r25, 0x55	; 85
 3ae:	7e df       	rcall	.-260    	; 0x2ac <flash_write_bus_cycle>
	flash_write_bus_cycle(0x2AAA, 0x55);
 3b0:	65 e5       	ldi	r22, 0x55	; 85
 3b2:	8a ea       	ldi	r24, 0xAA	; 170
 3b4:	9a e2       	ldi	r25, 0x2A	; 42
 3b6:	7a df       	rcall	.-268    	; 0x2ac <flash_write_bus_cycle>
	flash_write_bus_cycle(0x5555, 0xA0);
 3b8:	60 ea       	ldi	r22, 0xA0	; 160
 3ba:	85 e5       	ldi	r24, 0x55	; 85
 3bc:	95 e5       	ldi	r25, 0x55	; 85
 3be:	76 df       	rcall	.-276    	; 0x2ac <flash_write_bus_cycle>
	
	flash_write_bus_cycle(address, data);
 3c0:	61 2f       	mov	r22, r17
 3c2:	ce 01       	movw	r24, r28
 3c4:	73 df       	rcall	.-282    	; 0x2ac <flash_write_bus_cycle>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 3c6:	85 e3       	ldi	r24, 0x35	; 53
 3c8:	8a 95       	dec	r24
 3ca:	f1 f7       	brne	.-4      	; 0x3c8 <flash_write_byte+0x2a>
 3cc:	00 00       	nop
	_delay_us(20); // Wait byte program time
}
 3ce:	df 91       	pop	r29
 3d0:	cf 91       	pop	r28
 3d2:	1f 91       	pop	r17
 3d4:	08 95       	ret

000003d6 <flash_write_sector>:

// Write a sector (128 bytes) to the Atmel flash
// Takes 20ms for write cycle
void flash_write_sector(uint16_t sector) {
 3d6:	ef 92       	push	r14
 3d8:	ff 92       	push	r15
 3da:	0f 93       	push	r16
 3dc:	1f 93       	push	r17
 3de:	cf 93       	push	r28
 3e0:	df 93       	push	r29
 3e2:	8c 01       	movw	r16, r24
	flash_write_bus_cycle(0x5555, 0xAA);
 3e4:	6a ea       	ldi	r22, 0xAA	; 170
 3e6:	85 e5       	ldi	r24, 0x55	; 85
 3e8:	95 e5       	ldi	r25, 0x55	; 85
 3ea:	60 df       	rcall	.-320    	; 0x2ac <flash_write_bus_cycle>
	flash_write_bus_cycle(0x2AAA, 0x55);
 3ec:	65 e5       	ldi	r22, 0x55	; 85
 3ee:	8a ea       	ldi	r24, 0xAA	; 170
 3f0:	9a e2       	ldi	r25, 0x2A	; 42
 3f2:	5c df       	rcall	.-328    	; 0x2ac <flash_write_bus_cycle>
	flash_write_bus_cycle(0x5555, 0xA0);
 3f4:	60 ea       	ldi	r22, 0xA0	; 160
 3f6:	85 e5       	ldi	r24, 0x55	; 85
 3f8:	95 e5       	ldi	r25, 0x55	; 85
 3fa:	58 df       	rcall	.-336    	; 0x2ac <flash_write_bus_cycle>
	
	// Write the bytes (A0-A6 byte address, A7-A15 sector address)
	for (uint8_t x = 0; x < 128; x++) {
		flash_write_bus_cycle((uint16_t) (sector << 7) | (uint16_t) x, receivedBuffer[x]);
 3fc:	16 95       	lsr	r17
 3fe:	10 2f       	mov	r17, r16
 400:	00 27       	eor	r16, r16
 402:	17 95       	ror	r17
 404:	07 95       	ror	r16
 406:	92 e6       	ldi	r25, 0x62	; 98
 408:	e9 2e       	mov	r14, r25
 40a:	90 e0       	ldi	r25, 0x00	; 0
 40c:	f9 2e       	mov	r15, r25
 40e:	c0 e0       	ldi	r28, 0x00	; 0
 410:	d0 e0       	ldi	r29, 0x00	; 0
 412:	f7 01       	movw	r30, r14
 414:	61 91       	ld	r22, Z+
 416:	7f 01       	movw	r14, r30
 418:	ce 01       	movw	r24, r28
 41a:	80 2b       	or	r24, r16
 41c:	91 2b       	or	r25, r17
 41e:	46 df       	rcall	.-372    	; 0x2ac <flash_write_bus_cycle>
 420:	21 96       	adiw	r28, 0x01	; 1
	flash_write_bus_cycle(0x5555, 0xAA);
	flash_write_bus_cycle(0x2AAA, 0x55);
	flash_write_bus_cycle(0x5555, 0xA0);
	
	// Write the bytes (A0-A6 byte address, A7-A15 sector address)
	for (uint8_t x = 0; x < 128; x++) {
 422:	c0 38       	cpi	r28, 0x80	; 128
 424:	d1 05       	cpc	r29, r1
 426:	a9 f7       	brne	.-22     	; 0x412 <__LOCK_REGION_LENGTH__+0x12>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 428:	8f e3       	ldi	r24, 0x3F	; 63
 42a:	9c e9       	ldi	r25, 0x9C	; 156
 42c:	01 97       	sbiw	r24, 0x01	; 1
 42e:	f1 f7       	brne	.-4      	; 0x42c <__LOCK_REGION_LENGTH__+0x2c>
 430:	00 c0       	rjmp	.+0      	; 0x432 <__LOCK_REGION_LENGTH__+0x32>
 432:	00 00       	nop
		flash_write_bus_cycle((uint16_t) (sector << 7) | (uint16_t) x, receivedBuffer[x]);
	}
	_delay_ms(20); // Wait sector program time
}
 434:	df 91       	pop	r29
 436:	cf 91       	pop	r28
 438:	1f 91       	pop	r17
 43a:	0f 91       	pop	r16
 43c:	ff 90       	pop	r15
 43e:	ef 90       	pop	r14
 440:	08 95       	ret

00000442 <audio_flash_write_bus_cycle>:


// ---------- GB FLASH CARTS ----------

// 32K Audio WE - Set the address and data for the write byte cycle to the flash (pulsing audio pin)
void audio_flash_write_bus_cycle(uint16_t address, uint8_t data) {
 442:	cf 93       	push	r28
 444:	c6 2f       	mov	r28, r22
	GBA_DDR_RAM_DATA7_0 = 0xFF; // Set data pins as outputs
 446:	2f ef       	ldi	r18, 0xFF	; 255
 448:	24 bb       	out	0x14, r18	; 20
	set_16bit_address(address);
 44a:	34 de       	rcall	.-920    	; 0xb4 <set_16bit_address>
	GBA_PORT_RAM_DATA7_0 = data;
 44c:	c5 bb       	out	0x15, r28	; 21
	
	audioPin_low; // WE low
 44e:	39 98       	cbi	0x07, 1	; 7
	asm volatile("nop");
 450:	00 00       	nop
	asm volatile("nop");
 452:	00 00       	nop
	asm volatile("nop");
 454:	00 00       	nop
	audioPin_high; // WE high
 456:	39 9a       	sbi	0x07, 1	; 7
}
 458:	cf 91       	pop	r28
 45a:	08 95       	ret

0000045c <audio_flash_write_byte>:

// 32K Audio WE - Write a single byte to the Flash address. Takes 20us to program Flash.
void audio_flash_write_byte(uint16_t address, uint8_t data) {
 45c:	1f 93       	push	r17
 45e:	cf 93       	push	r28
 460:	df 93       	push	r29
 462:	ec 01       	movw	r28, r24
 464:	16 2f       	mov	r17, r22
	audio_flash_write_bus_cycle(0x555, 0xAA);
 466:	6a ea       	ldi	r22, 0xAA	; 170
 468:	85 e5       	ldi	r24, 0x55	; 85
 46a:	95 e0       	ldi	r25, 0x05	; 5
 46c:	ea df       	rcall	.-44     	; 0x442 <audio_flash_write_bus_cycle>
	audio_flash_write_bus_cycle(0x2AA, 0x55);
 46e:	65 e5       	ldi	r22, 0x55	; 85
 470:	8a ea       	ldi	r24, 0xAA	; 170
 472:	92 e0       	ldi	r25, 0x02	; 2
 474:	e6 df       	rcall	.-52     	; 0x442 <audio_flash_write_bus_cycle>
	audio_flash_write_bus_cycle(0x555, 0xA0);
 476:	60 ea       	ldi	r22, 0xA0	; 160
 478:	85 e5       	ldi	r24, 0x55	; 85
 47a:	95 e0       	ldi	r25, 0x05	; 5
 47c:	e2 df       	rcall	.-60     	; 0x442 <audio_flash_write_bus_cycle>
	audio_flash_write_bus_cycle(address, data);
 47e:	61 2f       	mov	r22, r17
 480:	ce 01       	movw	r24, r28
 482:	df df       	rcall	.-66     	; 0x442 <audio_flash_write_bus_cycle>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 484:	85 e3       	ldi	r24, 0x35	; 53
 486:	8a 95       	dec	r24
 488:	f1 f7       	brne	.-4      	; 0x486 <audio_flash_write_byte+0x2a>
 48a:	00 00       	nop
	_delay_us(20); // Wait byte program time
}
 48c:	df 91       	pop	r29
 48e:	cf 91       	pop	r28
 490:	1f 91       	pop	r17
 492:	08 95       	ret

00000494 <bv5_flash_write_bus_cycle>:

// BV5 - Set the address and data for the write byte cycle to the flash (pulsing WR pin)
void bv5_flash_write_bus_cycle(uint16_t address, uint8_t data) {
 494:	cf 93       	push	r28
 496:	c6 2f       	mov	r28, r22
	GBA_DDR_RAM_DATA7_0 = 0xFF; // Set data pins as outputs
 498:	2f ef       	ldi	r18, 0xFF	; 255
 49a:	24 bb       	out	0x14, r18	; 20
	set_16bit_address(address);
 49c:	0b de       	rcall	.-1002   	; 0xb4 <set_16bit_address>
	GBA_PORT_RAM_DATA7_0 = data;
 49e:	c5 bb       	out	0x15, r28	; 21
	
	wrPin_low;
 4a0:	96 98       	cbi	0x12, 6	; 18
	asm volatile("nop");
 4a2:	00 00       	nop
	asm volatile("nop");
 4a4:	00 00       	nop
	asm volatile("nop");
 4a6:	00 00       	nop
	wrPin_high;
 4a8:	96 9a       	sbi	0x12, 6	; 18
}
 4aa:	cf 91       	pop	r28
 4ac:	08 95       	ret

000004ae <bv5_flash_write_byte>:

// BV5 - Write a single byte to the Flash address. Time to wait depends on Flash.
// Data byte's bit 0 & 1 are swapped for chip commands as D0 & D1 lines are swapped
void bv5_flash_write_byte(uint16_t address, uint8_t data) {
 4ae:	1f 93       	push	r17
 4b0:	cf 93       	push	r28
 4b2:	df 93       	push	r29
 4b4:	ec 01       	movw	r28, r24
 4b6:	16 2f       	mov	r17, r22
	bv5_flash_write_bus_cycle(0xAAA, 0xA9);
 4b8:	69 ea       	ldi	r22, 0xA9	; 169
 4ba:	8a ea       	ldi	r24, 0xAA	; 170
 4bc:	9a e0       	ldi	r25, 0x0A	; 10
 4be:	ea df       	rcall	.-44     	; 0x494 <bv5_flash_write_bus_cycle>
	bv5_flash_write_bus_cycle(0x555, 0x56);
 4c0:	66 e5       	ldi	r22, 0x56	; 86
 4c2:	85 e5       	ldi	r24, 0x55	; 85
 4c4:	95 e0       	ldi	r25, 0x05	; 5
 4c6:	e6 df       	rcall	.-52     	; 0x494 <bv5_flash_write_bus_cycle>
	bv5_flash_write_bus_cycle(0xAAA, 0xA0);
 4c8:	60 ea       	ldi	r22, 0xA0	; 160
 4ca:	8a ea       	ldi	r24, 0xAA	; 170
 4cc:	9a e0       	ldi	r25, 0x0A	; 10
 4ce:	e2 df       	rcall	.-60     	; 0x494 <bv5_flash_write_bus_cycle>
	bv5_flash_write_bus_cycle(address, data);
 4d0:	61 2f       	mov	r22, r17
 4d2:	ce 01       	movw	r24, r28
 4d4:	df df       	rcall	.-66     	; 0x494 <bv5_flash_write_bus_cycle>
 4d6:	85 e3       	ldi	r24, 0x35	; 53
 4d8:	8a 95       	dec	r24
 4da:	f1 f7       	brne	.-4      	; 0x4d8 <bv5_flash_write_byte+0x2a>
 4dc:	00 00       	nop
	_delay_us(20); // Wait byte program time
}
 4de:	df 91       	pop	r29
 4e0:	cf 91       	pop	r28
 4e2:	1f 91       	pop	r17
 4e4:	08 95       	ret

000004e6 <gba_flash_write_bus_cycle>:


// ---------- GBA FLASH CARTS ----------

// Set the 24 bit address and 16 bit data for the write byte cycle to the flash (pulse WR pin)
void gba_flash_write_bus_cycle(uint32_t address, uint16_t data) {
 4e6:	cf 93       	push	r28
 4e8:	df 93       	push	r29
 4ea:	ea 01       	movw	r28, r20
	gba_set_24bit_address(address);
 4ec:	0d de       	rcall	.-998    	; 0x108 <gba_set_24bit_address>
	
	cs_mreqPin_low;
 4ee:	94 98       	cbi	0x12, 4	; 18
	
	GBA_DDR_ROM_ADDR15_8 = 0xFF; // Set data pins as outputs
 4f0:	8f ef       	ldi	r24, 0xFF	; 255
 4f2:	8a bb       	out	0x1a, r24	; 26
	GBA_DDR_ROM_ADDR7_0 = 0xFF;
 4f4:	87 bb       	out	0x17, r24	; 23
	GBA_PORT_ROM_DATA15_8 = data >> 8; // Set data
 4f6:	db bb       	out	0x1b, r29	; 27
	GBA_PORT_ROM_DATA7_0 = data & 0xFF;
 4f8:	c8 bb       	out	0x18, r28	; 24
	
	wrPin_low;
 4fa:	96 98       	cbi	0x12, 6	; 18
	asm volatile("nop");
 4fc:	00 00       	nop
	asm volatile("nop");
 4fe:	00 00       	nop
	asm volatile("nop");
 500:	00 00       	nop
	wrPin_high;
 502:	96 9a       	sbi	0x12, 6	; 18
	cs_mreqPin_high;
 504:	94 9a       	sbi	0x12, 4	; 18
}
 506:	df 91       	pop	r29
 508:	cf 91       	pop	r28
 50a:	08 95       	ret

0000050c <gba_flash_write_byte_swapped>:

// Write a 2 bytes to the Flash address. Time to wait depends on Flash.
// Address is divided by 2 as we are in GBA mode. 
// Data byte's bit 0 & 1 are swapped for chip commands as D0 & D1 lines are swapped
void gba_flash_write_byte_swapped(uint32_t address, uint16_t data) {
 50c:	cf 92       	push	r12
 50e:	df 92       	push	r13
 510:	ef 92       	push	r14
 512:	ff 92       	push	r15
 514:	cf 93       	push	r28
 516:	df 93       	push	r29
 518:	6b 01       	movw	r12, r22
 51a:	7c 01       	movw	r14, r24
 51c:	ea 01       	movw	r28, r20
	gba_flash_write_bus_cycle(0xAAA / 2, 0xA9);
 51e:	49 ea       	ldi	r20, 0xA9	; 169
 520:	50 e0       	ldi	r21, 0x00	; 0
 522:	65 e5       	ldi	r22, 0x55	; 85
 524:	75 e0       	ldi	r23, 0x05	; 5
 526:	80 e0       	ldi	r24, 0x00	; 0
 528:	90 e0       	ldi	r25, 0x00	; 0
 52a:	dd df       	rcall	.-70     	; 0x4e6 <gba_flash_write_bus_cycle>
	gba_flash_write_bus_cycle(0x555 / 2, 0x56);
 52c:	46 e5       	ldi	r20, 0x56	; 86
 52e:	50 e0       	ldi	r21, 0x00	; 0
 530:	6a ea       	ldi	r22, 0xAA	; 170
 532:	72 e0       	ldi	r23, 0x02	; 2
 534:	80 e0       	ldi	r24, 0x00	; 0
 536:	90 e0       	ldi	r25, 0x00	; 0
 538:	d6 df       	rcall	.-84     	; 0x4e6 <gba_flash_write_bus_cycle>
	gba_flash_write_bus_cycle(0xAAA / 2, 0xA0);
 53a:	40 ea       	ldi	r20, 0xA0	; 160
 53c:	50 e0       	ldi	r21, 0x00	; 0
 53e:	65 e5       	ldi	r22, 0x55	; 85
 540:	75 e0       	ldi	r23, 0x05	; 5
 542:	80 e0       	ldi	r24, 0x00	; 0
 544:	90 e0       	ldi	r25, 0x00	; 0
 546:	cf df       	rcall	.-98     	; 0x4e6 <gba_flash_write_bus_cycle>
	gba_flash_write_bus_cycle(address, data);
 548:	ae 01       	movw	r20, r28
 54a:	c7 01       	movw	r24, r14
 54c:	b6 01       	movw	r22, r12
 54e:	cb df       	rcall	.-106    	; 0x4e6 <gba_flash_write_bus_cycle>
 550:	85 e8       	ldi	r24, 0x85	; 133
 552:	8a 95       	dec	r24
 554:	f1 f7       	brne	.-4      	; 0x552 <gba_flash_write_byte_swapped+0x46>
 556:	00 00       	nop
	_delay_us(50); // Wait byte program time
}
 558:	df 91       	pop	r29
 55a:	cf 91       	pop	r28
 55c:	ff 90       	pop	r15
 55e:	ef 90       	pop	r14
 560:	df 90       	pop	r13
 562:	cf 90       	pop	r12
 564:	08 95       	ret

00000566 <setup>:


// Setup
void setup(void) {
	// Turn off watchdog
	MCUCSR &= ~(1<<WDRF);
 566:	84 b7       	in	r24, 0x34	; 52
 568:	87 7f       	andi	r24, 0xF7	; 247
 56a:	84 bf       	out	0x34, r24	; 52
	WDTCR = (1<<WDCE) | (1<<WDE);
 56c:	88 e1       	ldi	r24, 0x18	; 24
 56e:	81 bd       	out	0x21, r24	; 33
	WDTCR = 0;
 570:	11 bc       	out	0x21, r1	; 33
	
	// Reset common lines
	rd_wr_csmreq_cs2_reset();
 572:	93 dd       	rcall	.-1242   	; 0x9a <rd_wr_csmreq_cs2_reset>
	
	// Set outputs
	DDRD |= (1<<ACTIVITY_LED) | (1<<WR_PIN) | (1<<RD_PIN) | (1<<CS_MREQ_PIN) | (1<<LED_5V);
 574:	81 b3       	in	r24, 0x11	; 17
 576:	88 6f       	ori	r24, 0xF8	; 248
 578:	81 bb       	out	0x11, r24	; 17
	DDRE |= (1<<CS2_PIN) | (1<<LED_3V);
 57a:	86 b1       	in	r24, 0x06	; 6
 57c:	85 60       	ori	r24, 0x05	; 5
 57e:	86 b9       	out	0x06, r24	; 6
	
	// Set all pins as inputs
	PORT_DATA7_0 = 0;
 580:	15 ba       	out	0x15, r1	; 21
	DDR_DATA7_0 = 0;
 582:	14 ba       	out	0x14, r1	; 20
	PORT_ADDR7_0 = 0;
 584:	18 ba       	out	0x18, r1	; 24
	DDR_ADDR7_0 = 0;
 586:	17 ba       	out	0x17, r1	; 23
	PORT_ADDR15_8 = 0;
 588:	1b ba       	out	0x1b, r1	; 27
	DDR_ADDR15_8 = 0;
 58a:	1a ba       	out	0x1a, r1	; 26
	
	// Light up 3.3V or 5V
	if (PIND & (1<<SWITCH_DETECT)) {
 58c:	82 9b       	sbis	0x10, 2	; 16
 58e:	03 c0       	rjmp	.+6      	; 0x596 <setup+0x30>
		PORTD |= (1<<LED_5V);
 590:	97 9a       	sbi	0x12, 7	; 18
		PORTE &= ~(1<<LED_3V);
 592:	38 98       	cbi	0x07, 0	; 7
 594:	02 c0       	rjmp	.+4      	; 0x59a <setup+0x34>
	}
	else {
		PORTE |= (1<<LED_3V);
 596:	38 9a       	sbi	0x07, 0	; 7
		PORTD &= ~(1<<LED_5V);
 598:	97 98       	cbi	0x12, 7	; 18
	}
	
	// Light LED
	PORTD |= (1<<ACTIVITY_LED);
 59a:	93 9a       	sbi	0x12, 3	; 18
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 59c:	2f ef       	ldi	r18, 0xFF	; 255
 59e:	84 e3       	ldi	r24, 0x34	; 52
 5a0:	9c e0       	ldi	r25, 0x0C	; 12
 5a2:	21 50       	subi	r18, 0x01	; 1
 5a4:	80 40       	sbci	r24, 0x00	; 0
 5a6:	90 40       	sbci	r25, 0x00	; 0
 5a8:	e1 f7       	brne	.-8      	; 0x5a2 <setup+0x3c>
 5aa:	00 c0       	rjmp	.+0      	; 0x5ac <setup+0x46>
 5ac:	00 00       	nop
	_delay_ms(500);
	PORTD &= ~(1<<ACTIVITY_LED);
 5ae:	93 98       	cbi	0x12, 3	; 18
	
	// Setup USART
	UBRRL = 0; // 1Mbps Baud rate
 5b0:	19 b8       	out	0x09, r1	; 9
	sbi(UCSRA, U2X); // Double rate
 5b2:	59 9a       	sbi	0x0b, 1	; 11
	sbi(UCSRB, TXEN); // Transmitter enable
 5b4:	53 9a       	sbi	0x0a, 3	; 10
	sbi(UCSRB, RXEN); // Receiver enable
 5b6:	54 9a       	sbi	0x0a, 4	; 10
	
	// Turn on interrupts
	sei();
 5b8:	78 94       	sei
 5ba:	08 95       	ret

000005bc <main>:
#include <string.h>
#include "setup.c" // See defines, variables, constants, functions here


int main(void) {
	setup();
 5bc:	d4 df       	rcall	.-88     	; 0x566 <setup>
	
	uint32_t address = 0;
	uint8_t eepromSize = EEPROM_4KBIT;
	uint8_t cartMode = GB_MODE;
	uint8_t resetCommonLines = 1;
 5be:	88 24       	eor	r8, r8
 5c0:	83 94       	inc	r8

int main(void) {
	setup();
	
	uint32_t address = 0;
	uint8_t eepromSize = EEPROM_4KBIT;
 5c2:	99 24       	eor	r9, r9
 5c4:	93 94       	inc	r9


int main(void) {
	setup();
	
	uint32_t address = 0;
 5c6:	c1 2c       	mov	r12, r1
 5c8:	d1 2c       	mov	r13, r1
 5ca:	76 01       	movw	r14, r12
 5cc:	32 ea       	ldi	r19, 0xA2	; 162
 5ce:	63 2e       	mov	r6, r19
 5d0:	30 e0       	ldi	r19, 0x00	; 0
 5d2:	73 2e       	mov	r7, r19
 5d4:	0c ee       	ldi	r16, 0xEC	; 236
 5d6:	10 e0       	ldi	r17, 0x00	; 0
	uint8_t eepromSize = EEPROM_4KBIT;
	uint8_t cartMode = GB_MODE;
	uint8_t resetCommonLines = 1;
	
	while(1) {
		if (resetCommonLines == 1) {
 5d8:	21 e0       	ldi	r18, 0x01	; 1
 5da:	82 12       	cpse	r8, r18
 5dc:	01 c0       	rjmp	.+2      	; 0x5e0 <main+0x24>
			rd_wr_csmreq_cs2_reset();
 5de:	5d dd       	rcall	.-1350   	; 0x9a <rd_wr_csmreq_cs2_reset>
		}
		receivedChar = USART_Receive(); // Wait for 1 byte of data
 5e0:	31 dd       	rcall	.-1438   	; 0x44 <USART_Receive>
 5e2:	80 93 e3 00 	sts	0x00E3, r24	; 0x8000e3 <receivedChar>
		
		// Read the pin to find out which mode we are in, if it reads high, we are powered by 5V
		if (PIND & (1<<SWITCH_DETECT)) {
 5e6:	82 9b       	sbis	0x10, 2	; 16
 5e8:	04 c0       	rjmp	.+8      	; 0x5f2 <main+0x36>
			cartMode = GB_MODE;
			PORTD |= (1<<LED_5V);
 5ea:	97 9a       	sbi	0x12, 7	; 18
			PORTE &= ~(1<<LED_3V);
 5ec:	38 98       	cbi	0x07, 0	; 7
		}
		receivedChar = USART_Receive(); // Wait for 1 byte of data
		
		// Read the pin to find out which mode we are in, if it reads high, we are powered by 5V
		if (PIND & (1<<SWITCH_DETECT)) {
			cartMode = GB_MODE;
 5ee:	81 e0       	ldi	r24, 0x01	; 1
 5f0:	03 c0       	rjmp	.+6      	; 0x5f8 <main+0x3c>
			PORTD |= (1<<LED_5V);
			PORTE &= ~(1<<LED_3V);
		}
		else {
			cartMode = GBA_MODE;
			PORTE |= (1<<LED_3V);
 5f2:	38 9a       	sbi	0x07, 0	; 7
			PORTD &= ~(1<<LED_5V);
 5f4:	97 98       	cbi	0x12, 7	; 18
			cartMode = GB_MODE;
			PORTD |= (1<<LED_5V);
			PORTE &= ~(1<<LED_3V);
		}
		else {
			cartMode = GBA_MODE;
 5f6:	82 e0       	ldi	r24, 0x02	; 2
			PORTE |= (1<<LED_3V);
			PORTD &= ~(1<<LED_5V);
		}
		
		// Return the cart mode in use
		if (receivedChar == CART_MODE) {
 5f8:	90 91 e3 00 	lds	r25, 0x00E3	; 0x8000e3 <receivedChar>
 5fc:	93 34       	cpi	r25, 0x43	; 67
 5fe:	09 f4       	brne	.+2      	; 0x602 <main+0x46>
 600:	dd c2       	rjmp	.+1466   	; 0xbbc <main+0x600>
			USART_Transmit(cartMode);
		}
		
		// Change to GB mode or GBA mode if requested
		else if (receivedChar == GB_CART_MODE) {
 602:	97 34       	cpi	r25, 0x47	; 71
 604:	11 f4       	brne	.+4      	; 0x60a <main+0x4e>
			gb_mode();
 606:	4e dd       	rcall	.-1380   	; 0xa4 <gb_mode>
 608:	e7 cf       	rjmp	.-50     	; 0x5d8 <main+0x1c>
		}
		else if (receivedChar == GBA_CART_MODE) {
 60a:	97 36       	cpi	r25, 0x67	; 103
 60c:	09 f4       	brne	.+2      	; 0x610 <main+0x54>
 60e:	c5 c0       	rjmp	.+394    	; 0x79a <main+0x1de>
			gba_mode();
		}
		
		// Set address
		else if (receivedChar == SET_START_ADDRESS) {
 610:	91 34       	cpi	r25, 0x41	; 65
 612:	59 f4       	brne	.+22     	; 0x62a <main+0x6e>
			usart_read_chars(); // Read start address
 614:	34 dd       	rcall	.-1432   	; 0x7e <usart_read_chars>
			address = strtol(receivedBuffer, NULL, 16); // Convert address string in hex to dec
 616:	40 e1       	ldi	r20, 0x10	; 16
 618:	50 e0       	ldi	r21, 0x00	; 0
 61a:	60 e0       	ldi	r22, 0x00	; 0
 61c:	70 e0       	ldi	r23, 0x00	; 0
 61e:	82 e6       	ldi	r24, 0x62	; 98
 620:	90 e0       	ldi	r25, 0x00	; 0
 622:	eb d2       	rcall	.+1494   	; 0xbfa <strtol>
 624:	6b 01       	movw	r12, r22
 626:	7c 01       	movw	r14, r24
 628:	d7 cf       	rjmp	.-82     	; 0x5d8 <main+0x1c>
		
		
		// ****** Gameboy / Gameboy Colour ******
		
		// Read 64 bytes of ROM/RAM from address (and increment) until anything but 1 is received
		else if (receivedChar == READ_ROM_RAM) {
 62a:	92 35       	cpi	r25, 0x52	; 82
 62c:	e1 f4       	brne	.+56     	; 0x666 <main+0xaa>
			gb_mode();
 62e:	3a dd       	rcall	.-1420   	; 0xa4 <gb_mode>
			receivedChar = '1';
 630:	81 e3       	ldi	r24, 0x31	; 49
					USART_Transmit(read_8bit_data(address));
					address++;
				}
				
				PORTD &= ~(1<<ACTIVITY_LED);
				receivedChar = USART_Receive();
 632:	80 93 e3 00 	sts	0x00E3, r24	; 0x8000e3 <receivedChar>
		
		// Read 64 bytes of ROM/RAM from address (and increment) until anything but 1 is received
		else if (receivedChar == READ_ROM_RAM) {
			gb_mode();
			receivedChar = '1';
			while (receivedChar == '1') {
 636:	80 91 e3 00 	lds	r24, 0x00E3	; 0x8000e3 <receivedChar>
 63a:	81 33       	cpi	r24, 0x31	; 49
 63c:	69 f6       	brne	.-102    	; 0x5d8 <main+0x1c>
				PORTD |= (1<<ACTIVITY_LED);
 63e:	93 9a       	sbi	0x12, 3	; 18
 640:	c0 e0       	ldi	r28, 0x00	; 0
 642:	d0 e0       	ldi	r29, 0x00	; 0
				for (uint8_t x = 0; x < 64; x++) {
					USART_Transmit(read_8bit_data(address));
 644:	ce 01       	movw	r24, r28
 646:	8c 0d       	add	r24, r12
 648:	9d 1d       	adc	r25, r13
 64a:	37 dd       	rcall	.-1426   	; 0xba <read_8bit_data>
 64c:	ff dc       	rcall	.-1538   	; 0x4c <USART_Transmit>
 64e:	21 96       	adiw	r28, 0x01	; 1
		else if (receivedChar == READ_ROM_RAM) {
			gb_mode();
			receivedChar = '1';
			while (receivedChar == '1') {
				PORTD |= (1<<ACTIVITY_LED);
				for (uint8_t x = 0; x < 64; x++) {
 650:	c0 34       	cpi	r28, 0x40	; 64
 652:	d1 05       	cpc	r29, r1
 654:	b9 f7       	brne	.-18     	; 0x644 <main+0x88>
 656:	80 e4       	ldi	r24, 0x40	; 64
 658:	c8 0e       	add	r12, r24
 65a:	d1 1c       	adc	r13, r1
 65c:	e1 1c       	adc	r14, r1
 65e:	f1 1c       	adc	r15, r1
					USART_Transmit(read_8bit_data(address));
					address++;
				}
				
				PORTD &= ~(1<<ACTIVITY_LED);
 660:	93 98       	cbi	0x12, 3	; 18
				receivedChar = USART_Receive();
 662:	f0 dc       	rcall	.-1568   	; 0x44 <USART_Receive>
 664:	e6 cf       	rjmp	.-52     	; 0x632 <main+0x76>
			}
		}
		
		// Write 64 bytes to RAM on address (and increment)
		else if (receivedChar == WRITE_RAM) {
 666:	97 35       	cpi	r25, 0x57	; 87
 668:	d9 f4       	brne	.+54     	; 0x6a0 <main+0xe4>
			gb_mode();
 66a:	1c dd       	rcall	.-1480   	; 0xa4 <gb_mode>
			
			// Read 64 bytes first as CH340G sends them all at once
			usart_read_bytes(64);
 66c:	80 e4       	ldi	r24, 0x40	; 64
 66e:	f2 dc       	rcall	.-1564   	; 0x54 <usart_read_bytes>
			
			PORTD |= (1<<ACTIVITY_LED);
 670:	93 9a       	sbi	0x12, 3	; 18
 672:	c2 e6       	ldi	r28, 0x62	; 98
 674:	d0 e0       	ldi	r29, 0x00	; 0
 676:	a1 2c       	mov	r10, r1
 678:	b1 2c       	mov	r11, r1
			for (uint8_t x = 0; x < 64; x++) {
				write_8bit_data(address, receivedBuffer[x], MEMORY_WRITE);
 67a:	69 91       	ld	r22, Y+
 67c:	c5 01       	movw	r24, r10
 67e:	8c 0d       	add	r24, r12
 680:	9d 1d       	adc	r25, r13
 682:	41 e0       	ldi	r20, 0x01	; 1
 684:	23 dd       	rcall	.-1466   	; 0xcc <write_8bit_data>
 686:	9f ef       	ldi	r25, 0xFF	; 255
 688:	a9 1a       	sub	r10, r25
 68a:	b9 0a       	sbc	r11, r25
			
			// Read 64 bytes first as CH340G sends them all at once
			usart_read_bytes(64);
			
			PORTD |= (1<<ACTIVITY_LED);
			for (uint8_t x = 0; x < 64; x++) {
 68c:	e0 e4       	ldi	r30, 0x40	; 64
 68e:	ae 16       	cp	r10, r30
 690:	b1 04       	cpc	r11, r1
 692:	99 f7       	brne	.-26     	; 0x67a <main+0xbe>
 694:	f0 e4       	ldi	r31, 0x40	; 64
 696:	cf 0e       	add	r12, r31
 698:	d1 1c       	adc	r13, r1
 69a:	e1 1c       	adc	r14, r1
 69c:	f1 1c       	adc	r15, r1
 69e:	8f c1       	rjmp	.+798    	; 0x9be <main+0x402>
			PORTD &= ~(1<<ACTIVITY_LED);
			USART_Transmit('1'); // Send back acknowledgement
		}
		
		// Set bank address and write a byte
		else if (receivedChar == SET_BANK) {
 6a0:	92 34       	cpi	r25, 0x42	; 66
 6a2:	d1 f4       	brne	.+52     	; 0x6d8 <main+0x11c>
			gb_mode();
 6a4:	ff dc       	rcall	.-1538   	; 0xa4 <gb_mode>
			
			usart_read_chars(); // Read start address
 6a6:	eb dc       	rcall	.-1578   	; 0x7e <usart_read_chars>
			uint16_t bankaddress = strtol(receivedBuffer, NULL, 16); // Convert address string in hex to dec
 6a8:	40 e1       	ldi	r20, 0x10	; 16
 6aa:	50 e0       	ldi	r21, 0x00	; 0
 6ac:	60 e0       	ldi	r22, 0x00	; 0
 6ae:	70 e0       	ldi	r23, 0x00	; 0
 6b0:	82 e6       	ldi	r24, 0x62	; 98
 6b2:	90 e0       	ldi	r25, 0x00	; 0
 6b4:	a2 d2       	rcall	.+1348   	; 0xbfa <strtol>
 6b6:	1b 01       	movw	r2, r22
 6b8:	2c 01       	movw	r4, r24
			
			receivedChar = USART_Receive(); // Wait for bank number
 6ba:	c4 dc       	rcall	.-1656   	; 0x44 <USART_Receive>
 6bc:	80 93 e3 00 	sts	0x00E3, r24	; 0x8000e3 <receivedChar>
			if (receivedChar == 'B') {
 6c0:	82 34       	cpi	r24, 0x42	; 66
 6c2:	09 f0       	breq	.+2      	; 0x6c6 <main+0x10a>
 6c4:	89 cf       	rjmp	.-238    	; 0x5d8 <main+0x1c>
				usart_read_chars(); // Read data
 6c6:	db dc       	rcall	.-1610   	; 0x7e <usart_read_chars>
				uint8_t data = atoi(receivedBuffer); // Convert data string to dec
 6c8:	82 e6       	ldi	r24, 0x62	; 98
 6ca:	90 e0       	ldi	r25, 0x00	; 0
 6cc:	a7 d3       	rcall	.+1870   	; 0xe1c <atoi>
				
				write_8bit_data(bankaddress, data, BANK_WRITE);
 6ce:	40 e0       	ldi	r20, 0x00	; 0
 6d0:	68 2f       	mov	r22, r24
 6d2:	c1 01       	movw	r24, r2
 6d4:	fb dc       	rcall	.-1546   	; 0xcc <write_8bit_data>
 6d6:	80 cf       	rjmp	.-256    	; 0x5d8 <main+0x1c>
		
		// ****** Gameboy Advance ******
		
		// ---------- ROM ----------
		// Read one 16bit byte from ROM using address (and increment) until anything but 1 is received
		else if (receivedChar == GBA_READ_ROM) {
 6d8:	92 37       	cpi	r25, 0x72	; 114
 6da:	19 f5       	brne	.+70     	; 0x722 <main+0x166>
			gba_mode(); 
 6dc:	0d dd       	rcall	.-1510   	; 0xf8 <gba_mode>
			
			receivedChar = '1';
 6de:	81 e3       	ldi	r24, 0x31	; 49
					
					address++;
				}
				
				PORTD &= ~(1<<ACTIVITY_LED);
				receivedChar = USART_Receive();
 6e0:	80 93 e3 00 	sts	0x00E3, r24	; 0x8000e3 <receivedChar>
		// Read one 16bit byte from ROM using address (and increment) until anything but 1 is received
		else if (receivedChar == GBA_READ_ROM) {
			gba_mode(); 
			
			receivedChar = '1';
			while (receivedChar == '1') {
 6e4:	80 91 e3 00 	lds	r24, 0x00E3	; 0x8000e3 <receivedChar>
 6e8:	81 33       	cpi	r24, 0x31	; 49
 6ea:	09 f0       	breq	.+2      	; 0x6ee <main+0x132>
 6ec:	75 cf       	rjmp	.-278    	; 0x5d8 <main+0x1c>
				PORTD |= (1<<ACTIVITY_LED);
 6ee:	93 9a       	sbi	0x12, 3	; 18
 6f0:	16 01       	movw	r2, r12
 6f2:	27 01       	movw	r4, r14
 6f4:	c0 e2       	ldi	r28, 0x20	; 32
				for (uint8_t x = 0; x < 32; x++) {
					uint16_t dataRead = gba_read_16bit_data(address);
 6f6:	c2 01       	movw	r24, r4
 6f8:	b1 01       	movw	r22, r2
 6fa:	1c dd       	rcall	.-1480   	; 0x134 <gba_read_16bit_data>
 6fc:	d9 2f       	mov	r29, r25
					
					// Low byte & High byte
					USART_Transmit(dataRead & 0xFF);
 6fe:	a6 dc       	rcall	.-1716   	; 0x4c <USART_Transmit>
					USART_Transmit(dataRead >> 8);
 700:	8d 2f       	mov	r24, r29
 702:	a4 dc       	rcall	.-1720   	; 0x4c <USART_Transmit>
					
					address++;
 704:	2f ef       	ldi	r18, 0xFF	; 255
 706:	22 1a       	sub	r2, r18
 708:	32 0a       	sbc	r3, r18
 70a:	42 0a       	sbc	r4, r18
 70c:	52 0a       	sbc	r5, r18
 70e:	c1 50       	subi	r28, 0x01	; 1
			gba_mode(); 
			
			receivedChar = '1';
			while (receivedChar == '1') {
				PORTD |= (1<<ACTIVITY_LED);
				for (uint8_t x = 0; x < 32; x++) {
 710:	91 f7       	brne	.-28     	; 0x6f6 <main+0x13a>
 712:	80 e2       	ldi	r24, 0x20	; 32
 714:	c8 0e       	add	r12, r24
 716:	d1 1c       	adc	r13, r1
 718:	e1 1c       	adc	r14, r1
 71a:	f1 1c       	adc	r15, r1
					USART_Transmit(dataRead >> 8);
					
					address++;
				}
				
				PORTD &= ~(1<<ACTIVITY_LED);
 71c:	93 98       	cbi	0x12, 3	; 18
				receivedChar = USART_Receive();
 71e:	92 dc       	rcall	.-1756   	; 0x44 <USART_Receive>
 720:	df cf       	rjmp	.-66     	; 0x6e0 <main+0x124>
		}
		
		
		// ---------- SRAM ----------
		// Read RAM from address (and increment) until anything but 1 is received
		else if (receivedChar == GBA_READ_SRAM) {
 722:	9d 36       	cpi	r25, 0x6D	; 109
 724:	e1 f4       	brne	.+56     	; 0x75e <main+0x1a2>
			gb_mode(); // Set GB mode as it uses 16 bit address with 8 bit data
 726:	be dc       	rcall	.-1668   	; 0xa4 <gb_mode>
			
			receivedChar = '1';
 728:	81 e3       	ldi	r24, 0x31	; 49
					USART_Transmit(gba_read_ram_8bit_data(address));
					address++;
				}
				
				PORTD &= ~(1<<ACTIVITY_LED);
				receivedChar = USART_Receive();
 72a:	80 93 e3 00 	sts	0x00E3, r24	; 0x8000e3 <receivedChar>
		// Read RAM from address (and increment) until anything but 1 is received
		else if (receivedChar == GBA_READ_SRAM) {
			gb_mode(); // Set GB mode as it uses 16 bit address with 8 bit data
			
			receivedChar = '1';
			while (receivedChar == '1') {
 72e:	80 91 e3 00 	lds	r24, 0x00E3	; 0x8000e3 <receivedChar>
 732:	81 33       	cpi	r24, 0x31	; 49
 734:	91 f5       	brne	.+100    	; 0x79a <main+0x1de>
				PORTD |= (1<<ACTIVITY_LED);
 736:	93 9a       	sbi	0x12, 3	; 18
 738:	c0 e0       	ldi	r28, 0x00	; 0
 73a:	d0 e0       	ldi	r29, 0x00	; 0
				for (uint8_t x = 0; x < 64; x++) {
					USART_Transmit(gba_read_ram_8bit_data(address));
 73c:	ce 01       	movw	r24, r28
 73e:	8c 0d       	add	r24, r12
 740:	9d 1d       	adc	r25, r13
 742:	07 dd       	rcall	.-1522   	; 0x152 <gba_read_ram_8bit_data>
 744:	83 dc       	rcall	.-1786   	; 0x4c <USART_Transmit>
 746:	21 96       	adiw	r28, 0x01	; 1
			gb_mode(); // Set GB mode as it uses 16 bit address with 8 bit data
			
			receivedChar = '1';
			while (receivedChar == '1') {
				PORTD |= (1<<ACTIVITY_LED);
				for (uint8_t x = 0; x < 64; x++) {
 748:	c0 34       	cpi	r28, 0x40	; 64
 74a:	d1 05       	cpc	r29, r1
 74c:	b9 f7       	brne	.-18     	; 0x73c <main+0x180>
 74e:	90 e4       	ldi	r25, 0x40	; 64
 750:	c9 0e       	add	r12, r25
 752:	d1 1c       	adc	r13, r1
 754:	e1 1c       	adc	r14, r1
 756:	f1 1c       	adc	r15, r1
					USART_Transmit(gba_read_ram_8bit_data(address));
					address++;
				}
				
				PORTD &= ~(1<<ACTIVITY_LED);
 758:	93 98       	cbi	0x12, 3	; 18
				receivedChar = USART_Receive();
 75a:	74 dc       	rcall	.-1816   	; 0x44 <USART_Receive>
 75c:	e6 cf       	rjmp	.-52     	; 0x72a <main+0x16e>
			
			gba_mode(); // Set back
		}
		
		// Write to RAM on address (and increment) with 64 bytes of data
		else if (receivedChar == GBA_WRITE_SRAM) {
 75e:	97 37       	cpi	r25, 0x77	; 119
 760:	f1 f4       	brne	.+60     	; 0x79e <main+0x1e2>
			gb_mode();
 762:	a0 dc       	rcall	.-1728   	; 0xa4 <gb_mode>
			
			usart_read_bytes(64);
 764:	80 e4       	ldi	r24, 0x40	; 64
 766:	76 dc       	rcall	.-1812   	; 0x54 <usart_read_bytes>
			
			PORTD |= (1<<ACTIVITY_LED);
 768:	93 9a       	sbi	0x12, 3	; 18
 76a:	c2 e6       	ldi	r28, 0x62	; 98
 76c:	d0 e0       	ldi	r29, 0x00	; 0
 76e:	a1 2c       	mov	r10, r1
 770:	b1 2c       	mov	r11, r1
			for (uint8_t x = 0; x < 64; x++) {
				gba_write_ram_8bit_data(address, receivedBuffer[x]);
 772:	69 91       	ld	r22, Y+
 774:	c5 01       	movw	r24, r10
 776:	8c 0d       	add	r24, r12
 778:	9d 1d       	adc	r25, r13
 77a:	f4 dc       	rcall	.-1560   	; 0x164 <gba_write_ram_8bit_data>
 77c:	ef ef       	ldi	r30, 0xFF	; 255
 77e:	ae 1a       	sub	r10, r30
 780:	be 0a       	sbc	r11, r30
			gb_mode();
			
			usart_read_bytes(64);
			
			PORTD |= (1<<ACTIVITY_LED);
			for (uint8_t x = 0; x < 64; x++) {
 782:	f0 e4       	ldi	r31, 0x40	; 64
 784:	af 16       	cp	r10, r31
 786:	b1 04       	cpc	r11, r1
 788:	a1 f7       	brne	.-24     	; 0x772 <main+0x1b6>
 78a:	20 e4       	ldi	r18, 0x40	; 64
 78c:	c2 0e       	add	r12, r18
 78e:	d1 1c       	adc	r13, r1
 790:	e1 1c       	adc	r14, r1
 792:	f1 1c       	adc	r15, r1
				gba_write_ram_8bit_data(address, receivedBuffer[x]);
				address++;
			}
			USART_Transmit('1'); // Send back acknowledgement
 794:	81 e3       	ldi	r24, 0x31	; 49
 796:	5a dc       	rcall	.-1868   	; 0x4c <USART_Transmit>
			
			PORTD &= ~(1<<ACTIVITY_LED);
 798:	93 98       	cbi	0x12, 3	; 18
			gba_mode(); // Set back
 79a:	ae dc       	rcall	.-1700   	; 0xf8 <gba_mode>
 79c:	1d cf       	rjmp	.-454    	; 0x5d8 <main+0x1c>
		}
		
		// Write 1 byte to SRAM address
		else if (receivedChar == GBA_WRITE_ONE_BYTE_SRAM) {
 79e:	9f 36       	cpi	r25, 0x6F	; 111
 7a0:	31 f4       	brne	.+12     	; 0x7ae <main+0x1f2>
			gb_mode();
 7a2:	80 dc       	rcall	.-1792   	; 0xa4 <gb_mode>
			
			uint8_t data = USART_Receive();
 7a4:	4f dc       	rcall	.-1890   	; 0x44 <USART_Receive>
			gba_write_ram_8bit_data(address, data);
 7a6:	68 2f       	mov	r22, r24
 7a8:	c6 01       	movw	r24, r12
 7aa:	dc dc       	rcall	.-1608   	; 0x164 <gba_write_ram_8bit_data>
 7ac:	23 c0       	rjmp	.+70     	; 0x7f4 <main+0x238>
		}
		
		
		// ---------- FLASH ----------
		// Read the Flash Manufacturer and Device ID
		else if (receivedChar == GBA_FLASH_READ_ID) {
 7ae:	99 36       	cpi	r25, 0x69	; 105
 7b0:	49 f4       	brne	.+18     	; 0x7c4 <main+0x208>
			gb_mode();
 7b2:	78 dc       	rcall	.-1808   	; 0xa4 <gb_mode>
			
			flash_read_chip_id();
 7b4:	88 dd       	rcall	.-1264   	; 0x2c6 <flash_read_chip_id>
			USART_Transmit(flashChipIdBuffer[0]);
 7b6:	80 91 60 00 	lds	r24, 0x0060	; 0x800060 <_edata>
 7ba:	48 dc       	rcall	.-1904   	; 0x4c <USART_Transmit>
			USART_Transmit(flashChipIdBuffer[1]);
 7bc:	80 91 61 00 	lds	r24, 0x0061	; 0x800061 <_edata+0x1>
 7c0:	45 dc       	rcall	.-1910   	; 0x4c <USART_Transmit>
 7c2:	eb cf       	rjmp	.-42     	; 0x79a <main+0x1de>
			
			gba_mode(); // Set back
		}
		
		// Change bank
		else if (receivedChar == GBA_FLASH_SET_BANK) {
 7c4:	9b 36       	cpi	r25, 0x6B	; 107
 7c6:	49 f4       	brne	.+18     	; 0x7da <main+0x21e>
			usart_read_chars(); // Read data
 7c8:	5a dc       	rcall	.-1868   	; 0x7e <usart_read_chars>
			uint8_t bank = atoi(receivedBuffer); // Convert data string to dec
 7ca:	82 e6       	ldi	r24, 0x62	; 98
 7cc:	90 e0       	ldi	r25, 0x00	; 0
 7ce:	26 d3       	rcall	.+1612   	; 0xe1c <atoi>
 7d0:	c8 2f       	mov	r28, r24
			
			gb_mode();
 7d2:	68 dc       	rcall	.-1840   	; 0xa4 <gb_mode>
			flash_switch_bank(bank);
 7d4:	8c 2f       	mov	r24, r28
 7d6:	ac dd       	rcall	.-1192   	; 0x330 <flash_switch_bank>
 7d8:	e0 cf       	rjmp	.-64     	; 0x79a <main+0x1de>
			
			gba_mode(); // Set back
		}
		
		// Erase 4K sector on Flash (sector 0 to 15 for 512Kbit)
		else if (receivedChar == GBA_FLASH_4K_SECTOR_ERASE) {
 7da:	93 37       	cpi	r25, 0x73	; 115
 7dc:	69 f4       	brne	.+26     	; 0x7f8 <main+0x23c>
			gb_mode();
 7de:	62 dc       	rcall	.-1852   	; 0xa4 <gb_mode>
			
			usart_read_chars(); // Read sector
 7e0:	4e dc       	rcall	.-1892   	; 0x7e <usart_read_chars>
			uint8_t sectorAddress = strtol(receivedBuffer, NULL, 16); // Convert address string in hex to dec
 7e2:	40 e1       	ldi	r20, 0x10	; 16
 7e4:	50 e0       	ldi	r21, 0x00	; 0
 7e6:	60 e0       	ldi	r22, 0x00	; 0
 7e8:	70 e0       	ldi	r23, 0x00	; 0
 7ea:	82 e6       	ldi	r24, 0x62	; 98
 7ec:	90 e0       	ldi	r25, 0x00	; 0
 7ee:	05 d2       	rcall	.+1034   	; 0xbfa <strtol>
 7f0:	86 2f       	mov	r24, r22
			
			flash_erase_4k_sector(sectorAddress);
 7f2:	b1 dd       	rcall	.-1182   	; 0x356 <flash_erase_4k_sector>
			USART_Transmit('1'); // Send back acknowledgement
 7f4:	81 e3       	ldi	r24, 0x31	; 49
 7f6:	e4 cf       	rjmp	.-56     	; 0x7c0 <main+0x204>
			
			gba_mode(); // Set back
		}
		
		// Write 64 bytes to Flash address one byte write at a time (and increment)
		else if (receivedChar == GBA_FLASH_WRITE_BYTE) {
 7f8:	92 36       	cpi	r25, 0x62	; 98
 7fa:	d9 f4       	brne	.+54     	; 0x832 <main+0x276>
			gb_mode();
 7fc:	53 dc       	rcall	.-1882   	; 0xa4 <gb_mode>
			
			usart_read_bytes(64);
 7fe:	80 e4       	ldi	r24, 0x40	; 64
 800:	29 dc       	rcall	.-1966   	; 0x54 <usart_read_bytes>
			
			PORTD |= (1<<ACTIVITY_LED);
 802:	93 9a       	sbi	0x12, 3	; 18
 804:	22 e6       	ldi	r18, 0x62	; 98
 806:	a2 2e       	mov	r10, r18
 808:	20 e0       	ldi	r18, 0x00	; 0
 80a:	b2 2e       	mov	r11, r18
 80c:	c0 e0       	ldi	r28, 0x00	; 0
 80e:	d0 e0       	ldi	r29, 0x00	; 0
			for (uint8_t x = 0; x < 64; x++) {
				flash_write_byte(address, receivedBuffer[x]);
 810:	f5 01       	movw	r30, r10
 812:	61 91       	ld	r22, Z+
 814:	5f 01       	movw	r10, r30
 816:	ce 01       	movw	r24, r28
 818:	8c 0d       	add	r24, r12
 81a:	9d 1d       	adc	r25, r13
 81c:	c0 dd       	rcall	.-1152   	; 0x39e <flash_write_byte>
 81e:	21 96       	adiw	r28, 0x01	; 1
			gb_mode();
			
			usart_read_bytes(64);
			
			PORTD |= (1<<ACTIVITY_LED);
			for (uint8_t x = 0; x < 64; x++) {
 820:	c0 34       	cpi	r28, 0x40	; 64
 822:	d1 05       	cpc	r29, r1
 824:	a9 f7       	brne	.-22     	; 0x810 <main+0x254>
 826:	f0 e4       	ldi	r31, 0x40	; 64
 828:	cf 0e       	add	r12, r31
 82a:	d1 1c       	adc	r13, r1
 82c:	e1 1c       	adc	r14, r1
 82e:	f1 1c       	adc	r15, r1
 830:	b1 cf       	rjmp	.-158    	; 0x794 <main+0x1d8>
			PORTD &= ~(1<<ACTIVITY_LED);
			gba_mode(); // Set back
		}
		
		// Write 128 bytes to flash sector for Atmel flash (and increment)
		else if (receivedChar == GBA_FLASH_WRITE_ATMEL) {
 832:	91 36       	cpi	r25, 0x61	; 97
 834:	61 f4       	brne	.+24     	; 0x84e <main+0x292>
			gb_mode();
 836:	36 dc       	rcall	.-1940   	; 0xa4 <gb_mode>
			
			usart_read_bytes(128);
 838:	80 e8       	ldi	r24, 0x80	; 128
 83a:	0c dc       	rcall	.-2024   	; 0x54 <usart_read_bytes>
			
			PORTD |= (1<<ACTIVITY_LED);
 83c:	93 9a       	sbi	0x12, 3	; 18
			flash_write_sector(address); // Address used as sector number
 83e:	c6 01       	movw	r24, r12
 840:	ca dd       	rcall	.-1132   	; 0x3d6 <flash_write_sector>
			address++;
 842:	2f ef       	ldi	r18, 0xFF	; 255
 844:	c2 1a       	sub	r12, r18
 846:	d2 0a       	sbc	r13, r18
 848:	e2 0a       	sbc	r14, r18
 84a:	f2 0a       	sbc	r15, r18
 84c:	a3 cf       	rjmp	.-186    	; 0x794 <main+0x1d8>
		}
		
		
		// ---------- EEPROM ----------
		// Set EEPROM size
		else if (receivedChar == GBA_SET_EEPROM_SIZE) {
 84e:	93 35       	cpi	r25, 0x53	; 83
 850:	51 f4       	brne	.+20     	; 0x866 <main+0x2aa>
			usart_read_chars(); // Read size
 852:	15 dc       	rcall	.-2006   	; 0x7e <usart_read_chars>
			eepromSize = strtol(receivedBuffer, NULL, 16); // Convert size to dec
 854:	40 e1       	ldi	r20, 0x10	; 16
 856:	50 e0       	ldi	r21, 0x00	; 0
 858:	60 e0       	ldi	r22, 0x00	; 0
 85a:	70 e0       	ldi	r23, 0x00	; 0
 85c:	82 e6       	ldi	r24, 0x62	; 98
 85e:	90 e0       	ldi	r25, 0x00	; 0
 860:	cc d1       	rcall	.+920    	; 0xbfa <strtol>
 862:	96 2e       	mov	r9, r22
 864:	b9 ce       	rjmp	.-654    	; 0x5d8 <main+0x1c>
		}
		
		// Read the EEPROM on address (and increment) until anything but 1 is received
		else if (receivedChar == GBA_READ_EEPROM) {
 866:	95 36       	cpi	r25, 0x65	; 101
 868:	e1 f4       	brne	.+56     	; 0x8a2 <main+0x2e6>
			gba_eeprom_mode();
 86a:	8c dc       	rcall	.-1768   	; 0x184 <gba_eeprom_mode>
			
			receivedChar = '1';
 86c:	81 e3       	ldi	r24, 0x31	; 49
					USART_Transmit(eepromBuffer[c]);
				}
				address++; // Increment to next 8 bytes
				
				PORTD &= ~(1<<ACTIVITY_LED);
				receivedChar = USART_Receive();
 86e:	80 93 e3 00 	sts	0x00E3, r24	; 0x8000e3 <receivedChar>
		// Read the EEPROM on address (and increment) until anything but 1 is received
		else if (receivedChar == GBA_READ_EEPROM) {
			gba_eeprom_mode();
			
			receivedChar = '1';
			while (receivedChar == '1') {
 872:	80 91 e3 00 	lds	r24, 0x00E3	; 0x8000e3 <receivedChar>
 876:	81 33       	cpi	r24, 0x31	; 49
 878:	09 f0       	breq	.+2      	; 0x87c <main+0x2c0>
 87a:	8f cf       	rjmp	.-226    	; 0x79a <main+0x1de>
				PORTD |= (1<<ACTIVITY_LED);
 87c:	93 9a       	sbi	0x12, 3	; 18
				gba_eeprom_read(address, eepromSize);
 87e:	69 2d       	mov	r22, r9
 880:	c6 01       	movw	r24, r12
 882:	bd dc       	rcall	.-1670   	; 0x1fe <gba_eeprom_read>
 884:	c4 ee       	ldi	r28, 0xE4	; 228
 886:	d0 e0       	ldi	r29, 0x00	; 0
				
				// Send back the 8 bytes of data
				for (uint8_t c = 0; c < 8; c++) {
					USART_Transmit(eepromBuffer[c]);
 888:	89 91       	ld	r24, Y+
 88a:	e0 db       	rcall	.-2112   	; 0x4c <USART_Transmit>
			while (receivedChar == '1') {
				PORTD |= (1<<ACTIVITY_LED);
				gba_eeprom_read(address, eepromSize);
				
				// Send back the 8 bytes of data
				for (uint8_t c = 0; c < 8; c++) {
 88c:	0c 17       	cp	r16, r28
 88e:	1d 07       	cpc	r17, r29
 890:	d9 f7       	brne	.-10     	; 0x888 <main+0x2cc>
					USART_Transmit(eepromBuffer[c]);
				}
				address++; // Increment to next 8 bytes
 892:	8f ef       	ldi	r24, 0xFF	; 255
 894:	c8 1a       	sub	r12, r24
 896:	d8 0a       	sbc	r13, r24
 898:	e8 0a       	sbc	r14, r24
 89a:	f8 0a       	sbc	r15, r24
				
				PORTD &= ~(1<<ACTIVITY_LED);
 89c:	93 98       	cbi	0x12, 3	; 18
				receivedChar = USART_Receive();
 89e:	d2 db       	rcall	.-2140   	; 0x44 <USART_Receive>
 8a0:	e6 cf       	rjmp	.-52     	; 0x86e <main+0x2b2>
			
			gba_mode(); // Set back
		}
		
		// Write 8 bytes to the EEPROM address (and increment)
		else if (receivedChar == GBA_WRITE_EEPROM) {
 8a2:	90 37       	cpi	r25, 0x70	; 112
 8a4:	c1 f4       	brne	.+48     	; 0x8d6 <main+0x31a>
			gba_eeprom_mode();
 8a6:	6e dc       	rcall	.-1828   	; 0x184 <gba_eeprom_mode>
 8a8:	c4 ee       	ldi	r28, 0xE4	; 228
 8aa:	d0 e0       	ldi	r29, 0x00	; 0
			
			// Read 8 bytes from USART and place in buffer
			for (uint8_t x = 0; x < 8; x++) {
				eepromBuffer[x] = USART_Receive();
 8ac:	cb db       	rcall	.-2154   	; 0x44 <USART_Receive>
 8ae:	89 93       	st	Y+, r24
		// Write 8 bytes to the EEPROM address (and increment)
		else if (receivedChar == GBA_WRITE_EEPROM) {
			gba_eeprom_mode();
			
			// Read 8 bytes from USART and place in buffer
			for (uint8_t x = 0; x < 8; x++) {
 8b0:	0c 17       	cp	r16, r28
 8b2:	1d 07       	cpc	r17, r29
 8b4:	d9 f7       	brne	.-10     	; 0x8ac <main+0x2f0>
				eepromBuffer[x] = USART_Receive();
			}
			PORTD |= (1<<ACTIVITY_LED);
 8b6:	93 9a       	sbi	0x12, 3	; 18
			
			gba_eeprom_write(address, eepromSize);
 8b8:	69 2d       	mov	r22, r9
 8ba:	c6 01       	movw	r24, r12
 8bc:	cd dc       	rcall	.-1638   	; 0x258 <gba_eeprom_write>
			address++;
 8be:	9f ef       	ldi	r25, 0xFF	; 255
 8c0:	c9 1a       	sub	r12, r25
 8c2:	d9 0a       	sbc	r13, r25
 8c4:	e9 0a       	sbc	r14, r25
 8c6:	f9 0a       	sbc	r15, r25
 8c8:	ef e7       	ldi	r30, 0x7F	; 127
 8ca:	fe e3       	ldi	r31, 0x3E	; 62
 8cc:	31 97       	sbiw	r30, 0x01	; 1
 8ce:	f1 f7       	brne	.-4      	; 0x8cc <main+0x310>
 8d0:	00 c0       	rjmp	.+0      	; 0x8d2 <main+0x316>
 8d2:	00 00       	nop
 8d4:	5f cf       	rjmp	.-322    	; 0x794 <main+0x1d8>
		}
		
		
		// ---------- GB FLASH CARTS ----------
		// Write address, one byte and pulse a pin
		else if (receivedChar == GB_FLASH_WRITE_BYTE) {
 8d6:	96 34       	cpi	r25, 0x46	; 70
 8d8:	41 f5       	brne	.+80     	; 0x92a <main+0x36e>
			usart_read_chars(); // Read address
 8da:	d1 db       	rcall	.-2142   	; 0x7e <usart_read_chars>
			uint16_t flashAddress = strtol(receivedBuffer, NULL, 16); // Convert address string in hex to dec
 8dc:	40 e1       	ldi	r20, 0x10	; 16
 8de:	50 e0       	ldi	r21, 0x00	; 0
 8e0:	60 e0       	ldi	r22, 0x00	; 0
 8e2:	70 e0       	ldi	r23, 0x00	; 0
 8e4:	82 e6       	ldi	r24, 0x62	; 98
 8e6:	90 e0       	ldi	r25, 0x00	; 0
 8e8:	88 d1       	rcall	.+784    	; 0xbfa <strtol>
 8ea:	1b 01       	movw	r2, r22
 8ec:	2c 01       	movw	r4, r24
			
			receivedChar = USART_Receive(); // Wait for byte
 8ee:	aa db       	rcall	.-2220   	; 0x44 <USART_Receive>
 8f0:	80 93 e3 00 	sts	0x00E3, r24	; 0x8000e3 <receivedChar>
			if (receivedChar == GB_AUDIO_FLASH_WRITE || receivedChar == GB_BV5_FLASH_WRITE) {
 8f4:	85 35       	cpi	r24, 0x55	; 85
 8f6:	19 f0       	breq	.+6      	; 0x8fe <main+0x342>
 8f8:	85 33       	cpi	r24, 0x35	; 53
 8fa:	09 f0       	breq	.+2      	; 0x8fe <main+0x342>
 8fc:	6d ce       	rjmp	.-806    	; 0x5d8 <main+0x1c>
				usart_read_chars(); // Read data
 8fe:	bf db       	rcall	.-2178   	; 0x7e <usart_read_chars>
				uint8_t flashByte = strtol(receivedBuffer, NULL, 16); // Convert data byte in hex to dec
 900:	40 e1       	ldi	r20, 0x10	; 16
 902:	50 e0       	ldi	r21, 0x00	; 0
 904:	60 e0       	ldi	r22, 0x00	; 0
 906:	70 e0       	ldi	r23, 0x00	; 0
 908:	82 e6       	ldi	r24, 0x62	; 98
 90a:	90 e0       	ldi	r25, 0x00	; 0
 90c:	76 d1       	rcall	.+748    	; 0xbfa <strtol>
				
				PORTD |= (1<<ACTIVITY_LED);
 90e:	93 9a       	sbi	0x12, 3	; 18
				if (receivedChar == GB_AUDIO_FLASH_WRITE) { // Pulse audio pin
 910:	80 91 e3 00 	lds	r24, 0x00E3	; 0x8000e3 <receivedChar>
 914:	85 35       	cpi	r24, 0x55	; 85
 916:	19 f4       	brne	.+6      	; 0x91e <main+0x362>
					audio_flash_write_bus_cycle(flashAddress, flashByte);
 918:	c1 01       	movw	r24, r2
 91a:	93 dd       	rcall	.-1242   	; 0x442 <audio_flash_write_bus_cycle>
 91c:	50 c0       	rjmp	.+160    	; 0x9be <main+0x402>
				}
				else if (receivedChar == GB_BV5_FLASH_WRITE) { // Pulse WR pin
 91e:	85 33       	cpi	r24, 0x35	; 53
 920:	09 f0       	breq	.+2      	; 0x924 <main+0x368>
 922:	4d c0       	rjmp	.+154    	; 0x9be <main+0x402>
					bv5_flash_write_bus_cycle(flashAddress, flashByte);
 924:	c1 01       	movw	r24, r2
 926:	b6 dd       	rcall	.-1172   	; 0x494 <bv5_flash_write_bus_cycle>
 928:	4a c0       	rjmp	.+148    	; 0x9be <main+0x402>
				USART_Transmit('1'); // Send back acknowledgement
			}
		}
		
		// Write 64 bytes to Flash address one byte write at a time (and increment), pulse a pin
		else if (receivedChar == GB_FLASH_WRITE_64BYTE) {
 92a:	94 35       	cpi	r25, 0x54	; 84
 92c:	49 f5       	brne	.+82     	; 0x980 <main+0x3c4>
			receivedChar = USART_Receive(); // Wait for byte
 92e:	8a db       	rcall	.-2284   	; 0x44 <USART_Receive>
 930:	80 93 e3 00 	sts	0x00E3, r24	; 0x8000e3 <receivedChar>
			usart_read_bytes(64);
 934:	80 e4       	ldi	r24, 0x40	; 64
 936:	8e db       	rcall	.-2276   	; 0x54 <usart_read_bytes>
			
			PORTD |= (1<<ACTIVITY_LED);
 938:	93 9a       	sbi	0x12, 3	; 18
 93a:	c2 e6       	ldi	r28, 0x62	; 98
 93c:	d0 e0       	ldi	r29, 0x00	; 0
 93e:	90 e4       	ldi	r25, 0x40	; 64
 940:	59 2e       	mov	r5, r25
			for (uint8_t x = 0; x < 64; x++) {
				if (receivedChar == GB_AUDIO_FLASH_WRITE) { // Pulse audio pin
					audio_flash_write_byte(address, receivedBuffer[x]);
				}
				else if (receivedChar == GB_BV5_FLASH_WRITE) { // Pulse WR pin
					bv5_flash_write_byte(address, receivedBuffer[x]);
 942:	c6 01       	movw	r24, r12
 944:	82 56       	subi	r24, 0x62	; 98
 946:	90 40       	sbci	r25, 0x00	; 0
 948:	5c 01       	movw	r10, r24
			receivedChar = USART_Receive(); // Wait for byte
			usart_read_bytes(64);
			
			PORTD |= (1<<ACTIVITY_LED);
			for (uint8_t x = 0; x < 64; x++) {
				if (receivedChar == GB_AUDIO_FLASH_WRITE) { // Pulse audio pin
 94a:	80 91 e3 00 	lds	r24, 0x00E3	; 0x8000e3 <receivedChar>
 94e:	85 35       	cpi	r24, 0x55	; 85
 950:	31 f4       	brne	.+12     	; 0x95e <main+0x3a2>
					audio_flash_write_byte(address, receivedBuffer[x]);
 952:	68 81       	ld	r22, Y
 954:	c5 01       	movw	r24, r10
 956:	8c 0f       	add	r24, r28
 958:	9d 1f       	adc	r25, r29
 95a:	80 dd       	rcall	.-1280   	; 0x45c <audio_flash_write_byte>
 95c:	07 c0       	rjmp	.+14     	; 0x96c <main+0x3b0>
				}
				else if (receivedChar == GB_BV5_FLASH_WRITE) { // Pulse WR pin
 95e:	85 33       	cpi	r24, 0x35	; 53
 960:	29 f4       	brne	.+10     	; 0x96c <main+0x3b0>
					bv5_flash_write_byte(address, receivedBuffer[x]);
 962:	68 81       	ld	r22, Y
 964:	c5 01       	movw	r24, r10
 966:	8c 0f       	add	r24, r28
 968:	9d 1f       	adc	r25, r29
 96a:	a1 dd       	rcall	.-1214   	; 0x4ae <bv5_flash_write_byte>
 96c:	5a 94       	dec	r5
 96e:	21 96       	adiw	r28, 0x01	; 1
		else if (receivedChar == GB_FLASH_WRITE_64BYTE) {
			receivedChar = USART_Receive(); // Wait for byte
			usart_read_bytes(64);
			
			PORTD |= (1<<ACTIVITY_LED);
			for (uint8_t x = 0; x < 64; x++) {
 970:	51 10       	cpse	r5, r1
 972:	eb cf       	rjmp	.-42     	; 0x94a <main+0x38e>
 974:	90 e4       	ldi	r25, 0x40	; 64
 976:	c9 0e       	add	r12, r25
 978:	d1 1c       	adc	r13, r1
 97a:	e1 1c       	adc	r14, r1
 97c:	f1 1c       	adc	r15, r1
 97e:	42 c0       	rjmp	.+132    	; 0xa04 <main+0x448>
		}
		
		
		// ---------- GBA FLASH CARTS ----------
		// Write 24 bit address, 16 bit data and pulse a pin
		else if (receivedChar == GBA_FLASH_CART_WRITE_BYTE) {
 980:	9e 36       	cpi	r25, 0x6E	; 110
 982:	01 f5       	brne	.+64     	; 0x9c4 <main+0x408>
			usart_read_chars(); // Read address
 984:	7c db       	rcall	.-2312   	; 0x7e <usart_read_chars>
			uint32_t flashAddress = strtol(receivedBuffer, NULL, 16); // Convert address string in hex to dec
 986:	40 e1       	ldi	r20, 0x10	; 16
 988:	50 e0       	ldi	r21, 0x00	; 0
 98a:	60 e0       	ldi	r22, 0x00	; 0
 98c:	70 e0       	ldi	r23, 0x00	; 0
 98e:	82 e6       	ldi	r24, 0x62	; 98
 990:	90 e0       	ldi	r25, 0x00	; 0
 992:	33 d1       	rcall	.+614    	; 0xbfa <strtol>
 994:	1b 01       	movw	r2, r22
 996:	2c 01       	movw	r4, r24
			
			receivedChar = USART_Receive(); // Wait for byte
 998:	55 db       	rcall	.-2390   	; 0x44 <USART_Receive>
 99a:	80 93 e3 00 	sts	0x00E3, r24	; 0x8000e3 <receivedChar>
			if (receivedChar == GBA_FLASH_CART_WRITE_BYTE) {
 99e:	8e 36       	cpi	r24, 0x6E	; 110
 9a0:	09 f0       	breq	.+2      	; 0x9a4 <main+0x3e8>
 9a2:	1a ce       	rjmp	.-972    	; 0x5d8 <main+0x1c>
				usart_read_chars(); // Read data
 9a4:	6c db       	rcall	.-2344   	; 0x7e <usart_read_chars>
				uint16_t flashByte = strtol(receivedBuffer, NULL, 16); // Convert data byte in hex to dec
 9a6:	40 e1       	ldi	r20, 0x10	; 16
 9a8:	50 e0       	ldi	r21, 0x00	; 0
 9aa:	60 e0       	ldi	r22, 0x00	; 0
 9ac:	70 e0       	ldi	r23, 0x00	; 0
 9ae:	82 e6       	ldi	r24, 0x62	; 98
 9b0:	90 e0       	ldi	r25, 0x00	; 0
 9b2:	23 d1       	rcall	.+582    	; 0xbfa <strtol>
				
				PORTD |= (1<<ACTIVITY_LED);
 9b4:	93 9a       	sbi	0x12, 3	; 18
				gba_flash_write_bus_cycle(flashAddress, flashByte);
 9b6:	ab 01       	movw	r20, r22
 9b8:	c2 01       	movw	r24, r4
 9ba:	b1 01       	movw	r22, r2
 9bc:	94 dd       	rcall	.-1240   	; 0x4e6 <gba_flash_write_bus_cycle>
				PORTD &= ~(1<<ACTIVITY_LED);
 9be:	93 98       	cbi	0x12, 3	; 18
				
				USART_Transmit('1'); // Send back acknowledgement
 9c0:	81 e3       	ldi	r24, 0x31	; 49
 9c2:	fc c0       	rjmp	.+504    	; 0xbbc <main+0x600>
			}
		}
		
		// Write 64 bytes to Flash address, combine 2 bytes and write at a time (and increment address by 2), pulse a pin
		else if (receivedChar == GBA_FLASH_WRITE_64BYTE) {
 9c4:	91 37       	cpi	r25, 0x71	; 113
 9c6:	01 f5       	brne	.+64     	; 0xa08 <main+0x44c>
			usart_read_bytes(64);
 9c8:	80 e4       	ldi	r24, 0x40	; 64
 9ca:	44 db       	rcall	.-2424   	; 0x54 <usart_read_bytes>
			
			PORTD |= (1<<ACTIVITY_LED);
 9cc:	93 9a       	sbi	0x12, 3	; 18
 9ce:	c2 e6       	ldi	r28, 0x62	; 98
 9d0:	d0 e0       	ldi	r29, 0x00	; 0
 9d2:	16 01       	movw	r2, r12
 9d4:	27 01       	movw	r4, r14
			for (uint8_t x = 0; x < 64; x += 2) {
				uint16_t combinedBytes = (uint16_t) receivedBuffer[x+1] << 8 | (uint16_t) receivedBuffer[x];
				gba_flash_write_byte_swapped(address, combinedBytes);
 9d6:	49 81       	ldd	r20, Y+1	; 0x01
 9d8:	50 e0       	ldi	r21, 0x00	; 0
 9da:	54 2f       	mov	r21, r20
 9dc:	44 27       	eor	r20, r20
 9de:	88 81       	ld	r24, Y
 9e0:	48 2b       	or	r20, r24
 9e2:	c2 01       	movw	r24, r4
 9e4:	b1 01       	movw	r22, r2
 9e6:	92 dd       	rcall	.-1244   	; 0x50c <gba_flash_write_byte_swapped>
				address++;
 9e8:	ef ef       	ldi	r30, 0xFF	; 255
 9ea:	2e 1a       	sub	r2, r30
 9ec:	3e 0a       	sbc	r3, r30
 9ee:	4e 0a       	sbc	r4, r30
 9f0:	5e 0a       	sbc	r5, r30
 9f2:	22 96       	adiw	r28, 0x02	; 2
		// Write 64 bytes to Flash address, combine 2 bytes and write at a time (and increment address by 2), pulse a pin
		else if (receivedChar == GBA_FLASH_WRITE_64BYTE) {
			usart_read_bytes(64);
			
			PORTD |= (1<<ACTIVITY_LED);
			for (uint8_t x = 0; x < 64; x += 2) {
 9f4:	6c 16       	cp	r6, r28
 9f6:	7d 06       	cpc	r7, r29
 9f8:	71 f7       	brne	.-36     	; 0x9d6 <main+0x41a>
 9fa:	f0 e2       	ldi	r31, 0x20	; 32
 9fc:	cf 0e       	add	r12, r31
 9fe:	d1 1c       	adc	r13, r1
 a00:	e1 1c       	adc	r14, r1
 a02:	f1 1c       	adc	r15, r1
				uint16_t combinedBytes = (uint16_t) receivedBuffer[x+1] << 8 | (uint16_t) receivedBuffer[x];
				gba_flash_write_byte_swapped(address, combinedBytes);
				address++;
			}
			USART_Transmit('1'); // Send back acknowledgement
 a04:	81 e3       	ldi	r24, 0x31	; 49
 a06:	c3 c0       	rjmp	.+390    	; 0xb8e <main+0x5d2>
		
		
		// ---------- General commands ----------
		// Set any pin as input/output
		// Reads the DDR/PORT (e.g. DDRB/PORTB is 'B') and the hex value that represents pins to set to an input (e.g. PB7 is 0x80)
		else if (receivedChar == SET_INPUT || receivedChar == SET_OUTPUT) {
 a08:	99 34       	cpi	r25, 0x49	; 73
 a0a:	19 f0       	breq	.+6      	; 0xa12 <main+0x456>
 a0c:	9f 34       	cpi	r25, 0x4F	; 79
 a0e:	09 f0       	breq	.+2      	; 0xa12 <main+0x456>
 a10:	50 c0       	rjmp	.+160    	; 0xab2 <main+0x4f6>
			char portChar = USART_Receive();
 a12:	18 db       	rcall	.-2512   	; 0x44 <USART_Receive>
 a14:	c8 2f       	mov	r28, r24
			usart_read_chars();
 a16:	33 db       	rcall	.-2458   	; 0x7e <usart_read_chars>
			uint8_t setValue = strtol(receivedBuffer, NULL, 16);
 a18:	40 e1       	ldi	r20, 0x10	; 16
 a1a:	50 e0       	ldi	r21, 0x00	; 0
 a1c:	60 e0       	ldi	r22, 0x00	; 0
 a1e:	70 e0       	ldi	r23, 0x00	; 0
 a20:	82 e6       	ldi	r24, 0x62	; 98
 a22:	90 e0       	ldi	r25, 0x00	; 0
 a24:	ea d0       	rcall	.+468    	; 0xbfa <strtol>
			
			PORTD |= (1<<ACTIVITY_LED);
 a26:	93 9a       	sbi	0x12, 3	; 18
			if (receivedChar == SET_INPUT) {
 a28:	80 91 e3 00 	lds	r24, 0x00E3	; 0x8000e3 <receivedChar>
 a2c:	89 34       	cpi	r24, 0x49	; 73
 a2e:	f9 f4       	brne	.+62     	; 0xa6e <main+0x4b2>
				if (portChar == 'A') {
 a30:	c1 34       	cpi	r28, 0x41	; 65
 a32:	21 f4       	brne	.+8      	; 0xa3c <main+0x480>
					DDRA &= ~(setValue);
 a34:	8a b3       	in	r24, 0x1a	; 26
 a36:	60 95       	com	r22
 a38:	68 23       	and	r22, r24
 a3a:	20 c0       	rjmp	.+64     	; 0xa7c <main+0x4c0>
				}
				else if (portChar == 'B') {
 a3c:	c2 34       	cpi	r28, 0x42	; 66
 a3e:	21 f4       	brne	.+8      	; 0xa48 <main+0x48c>
					DDRB &= ~(setValue);
 a40:	87 b3       	in	r24, 0x17	; 23
 a42:	60 95       	com	r22
 a44:	68 23       	and	r22, r24
 a46:	20 c0       	rjmp	.+64     	; 0xa88 <main+0x4cc>
				}
				else if (portChar == 'C') {
 a48:	c3 34       	cpi	r28, 0x43	; 67
 a4a:	21 f4       	brne	.+8      	; 0xa54 <main+0x498>
					DDRC &= ~(setValue);
 a4c:	84 b3       	in	r24, 0x14	; 20
 a4e:	60 95       	com	r22
 a50:	68 23       	and	r22, r24
 a52:	20 c0       	rjmp	.+64     	; 0xa94 <main+0x4d8>
				}
				else if (portChar == 'D') {
 a54:	c4 34       	cpi	r28, 0x44	; 68
 a56:	21 f4       	brne	.+8      	; 0xa60 <main+0x4a4>
					DDRD &= ~(setValue);
 a58:	81 b3       	in	r24, 0x11	; 17
 a5a:	60 95       	com	r22
 a5c:	68 23       	and	r22, r24
 a5e:	20 c0       	rjmp	.+64     	; 0xaa0 <main+0x4e4>
				}
				else if (portChar == 'E') {
 a60:	c5 34       	cpi	r28, 0x45	; 69
 a62:	09 f0       	breq	.+2      	; 0xa66 <main+0x4aa>
 a64:	95 c0       	rjmp	.+298    	; 0xb90 <main+0x5d4>
					DDRE &= ~(setValue);
 a66:	86 b1       	in	r24, 0x06	; 6
 a68:	60 95       	com	r22
 a6a:	68 23       	and	r22, r24
 a6c:	20 c0       	rjmp	.+64     	; 0xaae <main+0x4f2>
				}
			}
			else if (receivedChar == SET_OUTPUT) {
 a6e:	8f 34       	cpi	r24, 0x4F	; 79
 a70:	09 f0       	breq	.+2      	; 0xa74 <main+0x4b8>
 a72:	8e c0       	rjmp	.+284    	; 0xb90 <main+0x5d4>
				if (portChar == 'A') {
 a74:	c1 34       	cpi	r28, 0x41	; 65
 a76:	21 f4       	brne	.+8      	; 0xa80 <main+0x4c4>
					DDRA |= (setValue);
 a78:	8a b3       	in	r24, 0x1a	; 26
 a7a:	68 2b       	or	r22, r24
 a7c:	6a bb       	out	0x1a, r22	; 26
 a7e:	88 c0       	rjmp	.+272    	; 0xb90 <main+0x5d4>
				}
				else if (portChar == 'B') {
 a80:	c2 34       	cpi	r28, 0x42	; 66
 a82:	21 f4       	brne	.+8      	; 0xa8c <main+0x4d0>
					DDRB |= (setValue);
 a84:	87 b3       	in	r24, 0x17	; 23
 a86:	68 2b       	or	r22, r24
 a88:	67 bb       	out	0x17, r22	; 23
 a8a:	82 c0       	rjmp	.+260    	; 0xb90 <main+0x5d4>
				}
				else if (portChar == 'C') {
 a8c:	c3 34       	cpi	r28, 0x43	; 67
 a8e:	21 f4       	brne	.+8      	; 0xa98 <main+0x4dc>
					DDRC |= (setValue);
 a90:	84 b3       	in	r24, 0x14	; 20
 a92:	68 2b       	or	r22, r24
 a94:	64 bb       	out	0x14, r22	; 20
 a96:	7c c0       	rjmp	.+248    	; 0xb90 <main+0x5d4>
				}
				else if (portChar == 'D') {
 a98:	c4 34       	cpi	r28, 0x44	; 68
 a9a:	21 f4       	brne	.+8      	; 0xaa4 <main+0x4e8>
					DDRD |= (setValue);
 a9c:	81 b3       	in	r24, 0x11	; 17
 a9e:	68 2b       	or	r22, r24
 aa0:	61 bb       	out	0x11, r22	; 17
 aa2:	76 c0       	rjmp	.+236    	; 0xb90 <main+0x5d4>
				}
				else if (portChar == 'E') {
 aa4:	c5 34       	cpi	r28, 0x45	; 69
 aa6:	09 f0       	breq	.+2      	; 0xaaa <main+0x4ee>
 aa8:	73 c0       	rjmp	.+230    	; 0xb90 <main+0x5d4>
					DDRE |= (setValue);
 aaa:	86 b1       	in	r24, 0x06	; 6
 aac:	68 2b       	or	r22, r24
 aae:	66 b9       	out	0x06, r22	; 6
 ab0:	6f c0       	rjmp	.+222    	; 0xb90 <main+0x5d4>
			}
			PORTD &= ~(1<<ACTIVITY_LED);
		}
		
		// Set pin output as low
		else if (receivedChar == SET_OUTPUT_LOW) {
 ab2:	9c 34       	cpi	r25, 0x4C	; 76
 ab4:	51 f5       	brne	.+84     	; 0xb0a <main+0x54e>
			char portChar = USART_Receive();			
 ab6:	c6 da       	rcall	.-2676   	; 0x44 <USART_Receive>
 ab8:	c8 2f       	mov	r28, r24
			usart_read_chars();
 aba:	e1 da       	rcall	.-2622   	; 0x7e <usart_read_chars>
			uint8_t setValue = strtol(receivedBuffer, NULL, 16);
 abc:	40 e1       	ldi	r20, 0x10	; 16
 abe:	50 e0       	ldi	r21, 0x00	; 0
 ac0:	60 e0       	ldi	r22, 0x00	; 0
 ac2:	70 e0       	ldi	r23, 0x00	; 0
 ac4:	82 e6       	ldi	r24, 0x62	; 98
 ac6:	90 e0       	ldi	r25, 0x00	; 0
 ac8:	98 d0       	rcall	.+304    	; 0xbfa <strtol>
			
			PORTD |= (1<<ACTIVITY_LED);
 aca:	93 9a       	sbi	0x12, 3	; 18
			if (portChar == 'A') {
 acc:	c1 34       	cpi	r28, 0x41	; 65
 ace:	21 f4       	brne	.+8      	; 0xad8 <main+0x51c>
				PORTA &= ~(setValue);
 ad0:	8b b3       	in	r24, 0x1b	; 27
 ad2:	60 95       	com	r22
 ad4:	68 23       	and	r22, r24
 ad6:	2a c0       	rjmp	.+84     	; 0xb2c <main+0x570>
			}
			else if (portChar == 'B') {
 ad8:	c2 34       	cpi	r28, 0x42	; 66
 ada:	21 f4       	brne	.+8      	; 0xae4 <main+0x528>
				PORTB &= ~(setValue);
 adc:	88 b3       	in	r24, 0x18	; 24
 ade:	60 95       	com	r22
 ae0:	68 23       	and	r22, r24
 ae2:	2a c0       	rjmp	.+84     	; 0xb38 <main+0x57c>
			}
			else if (portChar == 'C') {
 ae4:	c3 34       	cpi	r28, 0x43	; 67
 ae6:	21 f4       	brne	.+8      	; 0xaf0 <main+0x534>
				PORTC &= ~(setValue);
 ae8:	85 b3       	in	r24, 0x15	; 21
 aea:	60 95       	com	r22
 aec:	68 23       	and	r22, r24
 aee:	2a c0       	rjmp	.+84     	; 0xb44 <main+0x588>
			}
			else if (portChar == 'D') {
 af0:	c4 34       	cpi	r28, 0x44	; 68
 af2:	21 f4       	brne	.+8      	; 0xafc <main+0x540>
				PORTD &= ~(setValue);
 af4:	82 b3       	in	r24, 0x12	; 18
 af6:	60 95       	com	r22
 af8:	68 23       	and	r22, r24
 afa:	2a c0       	rjmp	.+84     	; 0xb50 <main+0x594>
			}
			else if (portChar == 'E') {
 afc:	c5 34       	cpi	r28, 0x45	; 69
 afe:	09 f0       	breq	.+2      	; 0xb02 <main+0x546>
 b00:	47 c0       	rjmp	.+142    	; 0xb90 <main+0x5d4>
				PORTE &= ~(setValue);
 b02:	87 b1       	in	r24, 0x07	; 7
 b04:	60 95       	com	r22
 b06:	68 23       	and	r22, r24
 b08:	29 c0       	rjmp	.+82     	; 0xb5c <main+0x5a0>
			}
			PORTD &= ~(1<<ACTIVITY_LED);
		}
		
		// Set pin output as high
		else if (receivedChar == SET_OUTPUT_HIGH) {
 b0a:	98 34       	cpi	r25, 0x48	; 72
 b0c:	49 f5       	brne	.+82     	; 0xb60 <main+0x5a4>
			char portChar = USART_Receive();			
 b0e:	9a da       	rcall	.-2764   	; 0x44 <USART_Receive>
 b10:	c8 2f       	mov	r28, r24
			usart_read_chars();
 b12:	b5 da       	rcall	.-2710   	; 0x7e <usart_read_chars>
			uint8_t setValue = strtol(receivedBuffer, NULL, 16);
 b14:	40 e1       	ldi	r20, 0x10	; 16
 b16:	50 e0       	ldi	r21, 0x00	; 0
 b18:	60 e0       	ldi	r22, 0x00	; 0
 b1a:	70 e0       	ldi	r23, 0x00	; 0
 b1c:	82 e6       	ldi	r24, 0x62	; 98
 b1e:	90 e0       	ldi	r25, 0x00	; 0
 b20:	6c d0       	rcall	.+216    	; 0xbfa <strtol>
			
			PORTD |= (1<<ACTIVITY_LED);
 b22:	93 9a       	sbi	0x12, 3	; 18
			if (portChar == 'A') {
 b24:	c1 34       	cpi	r28, 0x41	; 65
 b26:	21 f4       	brne	.+8      	; 0xb30 <main+0x574>
				PORTA |= (setValue);
 b28:	8b b3       	in	r24, 0x1b	; 27
 b2a:	68 2b       	or	r22, r24
 b2c:	6b bb       	out	0x1b, r22	; 27
 b2e:	30 c0       	rjmp	.+96     	; 0xb90 <main+0x5d4>
			}
			else if (portChar == 'B') {
 b30:	c2 34       	cpi	r28, 0x42	; 66
 b32:	21 f4       	brne	.+8      	; 0xb3c <main+0x580>
				PORTB |= (setValue);
 b34:	88 b3       	in	r24, 0x18	; 24
 b36:	68 2b       	or	r22, r24
 b38:	68 bb       	out	0x18, r22	; 24
 b3a:	2a c0       	rjmp	.+84     	; 0xb90 <main+0x5d4>
			}
			else if (portChar == 'C') {
 b3c:	c3 34       	cpi	r28, 0x43	; 67
 b3e:	21 f4       	brne	.+8      	; 0xb48 <main+0x58c>
				PORTC |= (setValue);
 b40:	85 b3       	in	r24, 0x15	; 21
 b42:	68 2b       	or	r22, r24
 b44:	65 bb       	out	0x15, r22	; 21
 b46:	24 c0       	rjmp	.+72     	; 0xb90 <main+0x5d4>
			}
			else if (portChar == 'D') {
 b48:	c4 34       	cpi	r28, 0x44	; 68
 b4a:	21 f4       	brne	.+8      	; 0xb54 <main+0x598>
				PORTD |= (setValue);
 b4c:	82 b3       	in	r24, 0x12	; 18
 b4e:	68 2b       	or	r22, r24
 b50:	62 bb       	out	0x12, r22	; 18
 b52:	1e c0       	rjmp	.+60     	; 0xb90 <main+0x5d4>
			}
			else if (portChar == 'E') {
 b54:	c5 34       	cpi	r28, 0x45	; 69
 b56:	e1 f4       	brne	.+56     	; 0xb90 <main+0x5d4>
				PORTE |= (setValue);
 b58:	87 b1       	in	r24, 0x07	; 7
 b5a:	68 2b       	or	r22, r24
 b5c:	67 b9       	out	0x07, r22	; 7
 b5e:	18 c0       	rjmp	.+48     	; 0xb90 <main+0x5d4>
			}
			PORTD &= ~(1<<ACTIVITY_LED);
		}
		
		// Read all pins of a PORT and return the value
		else if (receivedChar == READ_INPUT) {
 b60:	94 34       	cpi	r25, 0x44	; 68
 b62:	c1 f4       	brne	.+48     	; 0xb94 <main+0x5d8>
			char portChar = USART_Receive();			
 b64:	6f da       	rcall	.-2850   	; 0x44 <USART_Receive>
			
			PORTD |= (1<<ACTIVITY_LED);
 b66:	93 9a       	sbi	0x12, 3	; 18
			if (portChar == 'A') {
 b68:	81 34       	cpi	r24, 0x41	; 65
 b6a:	11 f4       	brne	.+4      	; 0xb70 <main+0x5b4>
				USART_Transmit(PINA);
 b6c:	89 b3       	in	r24, 0x19	; 25
 b6e:	0f c0       	rjmp	.+30     	; 0xb8e <main+0x5d2>
			}
			else if (portChar == 'B') {
 b70:	82 34       	cpi	r24, 0x42	; 66
 b72:	11 f4       	brne	.+4      	; 0xb78 <main+0x5bc>
				USART_Transmit(PINB);
 b74:	86 b3       	in	r24, 0x16	; 22
 b76:	0b c0       	rjmp	.+22     	; 0xb8e <main+0x5d2>
			}
			else if (portChar == 'C') {
 b78:	83 34       	cpi	r24, 0x43	; 67
 b7a:	11 f4       	brne	.+4      	; 0xb80 <main+0x5c4>
				USART_Transmit(PINC);
 b7c:	83 b3       	in	r24, 0x13	; 19
 b7e:	07 c0       	rjmp	.+14     	; 0xb8e <main+0x5d2>
			}
			else if (portChar == 'D') {
 b80:	84 34       	cpi	r24, 0x44	; 68
 b82:	11 f4       	brne	.+4      	; 0xb88 <main+0x5cc>
				USART_Transmit(PIND);
 b84:	80 b3       	in	r24, 0x10	; 16
 b86:	03 c0       	rjmp	.+6      	; 0xb8e <main+0x5d2>
			}
			else if (portChar == 'E') {
 b88:	85 34       	cpi	r24, 0x45	; 69
 b8a:	11 f4       	brne	.+4      	; 0xb90 <main+0x5d4>
				USART_Transmit(PINE);
 b8c:	85 b1       	in	r24, 0x05	; 5
 b8e:	5e da       	rcall	.-2884   	; 0x4c <USART_Transmit>
			}
			PORTD &= ~(1<<ACTIVITY_LED);
 b90:	93 98       	cbi	0x12, 3	; 18
 b92:	22 cd       	rjmp	.-1468   	; 0x5d8 <main+0x1c>
		}
		
		// Set the reset common lines variable on or off, useful if you are controlling all the pins directly
		else if (receivedChar == RESET_COMMON_LINES) {
 b94:	9d 34       	cpi	r25, 0x4D	; 77
 b96:	59 f4       	brne	.+22     	; 0xbae <main+0x5f2>
			char commonChar = USART_Receive();
 b98:	55 da       	rcall	.-2902   	; 0x44 <USART_Receive>
			if (commonChar == '1') {
 b9a:	81 33       	cpi	r24, 0x31	; 49
 b9c:	19 f4       	brne	.+6      	; 0xba4 <main+0x5e8>
				resetCommonLines = 1;
 b9e:	88 24       	eor	r8, r8
 ba0:	83 94       	inc	r8
 ba2:	1d cd       	rjmp	.-1478   	; 0x5de <main+0x22>
			}
			else if (commonChar == '0') {
 ba4:	80 33       	cpi	r24, 0x30	; 48
 ba6:	09 f0       	breq	.+2      	; 0xbaa <main+0x5ee>
 ba8:	17 cd       	rjmp	.-1490   	; 0x5d8 <main+0x1c>
				resetCommonLines = 0;
 baa:	81 2c       	mov	r8, r1
 bac:	19 cd       	rjmp	.-1486   	; 0x5e0 <main+0x24>
			}
		}
		
		// Send back the PCB version number
		else if (receivedChar == READ_PCB_VERSION) {
 bae:	98 36       	cpi	r25, 0x68	; 104
 bb0:	11 f4       	brne	.+4      	; 0xbb6 <main+0x5fa>
			USART_Transmit(PCB_VERSION);
 bb2:	82 e0       	ldi	r24, 0x02	; 2
 bb4:	03 c0       	rjmp	.+6      	; 0xbbc <main+0x600>
		}
		
		// Send back the firmware version number
		else if (receivedChar == READ_FIRMWARE_VERSION) {
 bb6:	96 35       	cpi	r25, 0x56	; 86
 bb8:	19 f4       	brne	.+6      	; 0xbc0 <main+0x604>
			USART_Transmit(FIRMWARE_VERSION);
 bba:	85 e0       	ldi	r24, 0x05	; 5
 bbc:	47 da       	rcall	.-2930   	; 0x4c <USART_Transmit>
 bbe:	0c cd       	rjmp	.-1512   	; 0x5d8 <main+0x1c>
		}
		
		// Reset the AVR if it matches the number
		else if (receivedChar == RESET_AVR) {
 bc0:	9a 32       	cpi	r25, 0x2A	; 42
 bc2:	09 f0       	breq	.+2      	; 0xbc6 <main+0x60a>
 bc4:	09 cd       	rjmp	.-1518   	; 0x5d8 <main+0x1c>
			usart_read_chars();
 bc6:	5b da       	rcall	.-2890   	; 0x7e <usart_read_chars>
			uint32_t resetValue = strtol(receivedBuffer, NULL, 16);
 bc8:	40 e1       	ldi	r20, 0x10	; 16
 bca:	50 e0       	ldi	r21, 0x00	; 0
 bcc:	60 e0       	ldi	r22, 0x00	; 0
 bce:	70 e0       	ldi	r23, 0x00	; 0
 bd0:	82 e6       	ldi	r24, 0x62	; 98
 bd2:	90 e0       	ldi	r25, 0x00	; 0
 bd4:	12 d0       	rcall	.+36     	; 0xbfa <strtol>
			if (resetValue == RESET_VALUE) {
 bd6:	61 3e       	cpi	r22, 0xE1	; 225
 bd8:	75 4e       	sbci	r23, 0xE5	; 229
 bda:	87 40       	sbci	r24, 0x07	; 7
 bdc:	91 05       	cpc	r25, r1
 bde:	09 f0       	breq	.+2      	; 0xbe2 <main+0x626>
 be0:	fb cc       	rjmp	.-1546   	; 0x5d8 <main+0x1c>
				// Clear watchdog flag
				MCUCSR &= ~(1<<WDRF);
 be2:	84 b7       	in	r24, 0x34	; 52
 be4:	87 7f       	andi	r24, 0xF7	; 247
 be6:	84 bf       	out	0x34, r24	; 52
				
				// Start timed sequence
				WDTCR = (1<<WDCE) | (1<<WDE);
 be8:	88 e1       	ldi	r24, 0x18	; 24
 bea:	81 bd       	out	0x21, r24	; 33
				
				// Reset in 250 ms
				WDTCR = (1<<WDP2) | (1<<WDE);
 bec:	9c e0       	ldi	r25, 0x0C	; 12
 bee:	91 bd       	out	0x21, r25	; 33
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
 bf0:	8f ef       	ldi	r24, 0xFF	; 255
 bf2:	9f ef       	ldi	r25, 0xFF	; 255
 bf4:	01 97       	sbiw	r24, 0x01	; 1
 bf6:	f1 f7       	brne	.-4      	; 0xbf4 <main+0x638>
 bf8:	ef cc       	rjmp	.-1570   	; 0x5d8 <main+0x1c>

00000bfa <strtol>:
 bfa:	a0 e0       	ldi	r26, 0x00	; 0
 bfc:	b0 e0       	ldi	r27, 0x00	; 0
 bfe:	e2 e0       	ldi	r30, 0x02	; 2
 c00:	f6 e0       	ldi	r31, 0x06	; 6
 c02:	78 c1       	rjmp	.+752    	; 0xef4 <__prologue_saves__+0x2>
 c04:	5c 01       	movw	r10, r24
 c06:	6b 01       	movw	r12, r22
 c08:	7a 01       	movw	r14, r20
 c0a:	61 15       	cp	r22, r1
 c0c:	71 05       	cpc	r23, r1
 c0e:	19 f0       	breq	.+6      	; 0xc16 <strtol+0x1c>
 c10:	fb 01       	movw	r30, r22
 c12:	91 83       	std	Z+1, r25	; 0x01
 c14:	80 83       	st	Z, r24
 c16:	e1 14       	cp	r14, r1
 c18:	f1 04       	cpc	r15, r1
 c1a:	29 f0       	breq	.+10     	; 0xc26 <strtol+0x2c>
 c1c:	c7 01       	movw	r24, r14
 c1e:	02 97       	sbiw	r24, 0x02	; 2
 c20:	83 97       	sbiw	r24, 0x23	; 35
 c22:	08 f0       	brcs	.+2      	; 0xc26 <strtol+0x2c>
 c24:	e2 c0       	rjmp	.+452    	; 0xdea <strtol+0x1f0>
 c26:	e5 01       	movw	r28, r10
 c28:	21 96       	adiw	r28, 0x01	; 1
 c2a:	f5 01       	movw	r30, r10
 c2c:	10 81       	ld	r17, Z
 c2e:	81 2f       	mov	r24, r17
 c30:	90 e0       	ldi	r25, 0x00	; 0
 c32:	11 d1       	rcall	.+546    	; 0xe56 <isspace>
 c34:	89 2b       	or	r24, r25
 c36:	11 f0       	breq	.+4      	; 0xc3c <strtol+0x42>
 c38:	5e 01       	movw	r10, r28
 c3a:	f5 cf       	rjmp	.-22     	; 0xc26 <strtol+0x2c>
 c3c:	1d 32       	cpi	r17, 0x2D	; 45
 c3e:	29 f4       	brne	.+10     	; 0xc4a <strtol+0x50>
 c40:	21 96       	adiw	r28, 0x01	; 1
 c42:	f5 01       	movw	r30, r10
 c44:	11 81       	ldd	r17, Z+1	; 0x01
 c46:	01 e0       	ldi	r16, 0x01	; 1
 c48:	07 c0       	rjmp	.+14     	; 0xc58 <strtol+0x5e>
 c4a:	1b 32       	cpi	r17, 0x2B	; 43
 c4c:	21 f4       	brne	.+8      	; 0xc56 <strtol+0x5c>
 c4e:	e5 01       	movw	r28, r10
 c50:	22 96       	adiw	r28, 0x02	; 2
 c52:	f5 01       	movw	r30, r10
 c54:	11 81       	ldd	r17, Z+1	; 0x01
 c56:	00 e0       	ldi	r16, 0x00	; 0
 c58:	e1 14       	cp	r14, r1
 c5a:	f1 04       	cpc	r15, r1
 c5c:	09 f1       	breq	.+66     	; 0xca0 <strtol+0xa6>
 c5e:	f0 e1       	ldi	r31, 0x10	; 16
 c60:	ef 16       	cp	r14, r31
 c62:	f1 04       	cpc	r15, r1
 c64:	29 f4       	brne	.+10     	; 0xc70 <strtol+0x76>
 c66:	3e c0       	rjmp	.+124    	; 0xce4 <strtol+0xea>
 c68:	10 e3       	ldi	r17, 0x30	; 48
 c6a:	e1 14       	cp	r14, r1
 c6c:	f1 04       	cpc	r15, r1
 c6e:	21 f1       	breq	.+72     	; 0xcb8 <strtol+0xbe>
 c70:	28 e0       	ldi	r18, 0x08	; 8
 c72:	e2 16       	cp	r14, r18
 c74:	f1 04       	cpc	r15, r1
 c76:	01 f1       	breq	.+64     	; 0xcb8 <strtol+0xbe>
 c78:	54 f4       	brge	.+20     	; 0xc8e <strtol+0x94>
 c7a:	e2 e0       	ldi	r30, 0x02	; 2
 c7c:	ee 16       	cp	r14, r30
 c7e:	f1 04       	cpc	r15, r1
 c80:	21 f5       	brne	.+72     	; 0xcca <strtol+0xd0>
 c82:	81 2c       	mov	r8, r1
 c84:	91 2c       	mov	r9, r1
 c86:	a1 2c       	mov	r10, r1
 c88:	b0 e4       	ldi	r27, 0x40	; 64
 c8a:	bb 2e       	mov	r11, r27
 c8c:	3d c0       	rjmp	.+122    	; 0xd08 <strtol+0x10e>
 c8e:	fa e0       	ldi	r31, 0x0A	; 10
 c90:	ef 16       	cp	r14, r31
 c92:	f1 04       	cpc	r15, r1
 c94:	39 f0       	breq	.+14     	; 0xca4 <strtol+0xaa>
 c96:	20 e1       	ldi	r18, 0x10	; 16
 c98:	e2 16       	cp	r14, r18
 c9a:	f1 04       	cpc	r15, r1
 c9c:	b1 f4       	brne	.+44     	; 0xcca <strtol+0xd0>
 c9e:	2f c0       	rjmp	.+94     	; 0xcfe <strtol+0x104>
 ca0:	10 33       	cpi	r17, 0x30	; 48
 ca2:	11 f1       	breq	.+68     	; 0xce8 <strtol+0xee>
 ca4:	fa e0       	ldi	r31, 0x0A	; 10
 ca6:	ef 2e       	mov	r14, r31
 ca8:	f1 2c       	mov	r15, r1
 caa:	ac ec       	ldi	r26, 0xCC	; 204
 cac:	8a 2e       	mov	r8, r26
 cae:	98 2c       	mov	r9, r8
 cb0:	a8 2c       	mov	r10, r8
 cb2:	ac e0       	ldi	r26, 0x0C	; 12
 cb4:	ba 2e       	mov	r11, r26
 cb6:	28 c0       	rjmp	.+80     	; 0xd08 <strtol+0x10e>
 cb8:	78 e0       	ldi	r23, 0x08	; 8
 cba:	e7 2e       	mov	r14, r23
 cbc:	f1 2c       	mov	r15, r1
 cbe:	81 2c       	mov	r8, r1
 cc0:	91 2c       	mov	r9, r1
 cc2:	a1 2c       	mov	r10, r1
 cc4:	e0 e1       	ldi	r30, 0x10	; 16
 cc6:	be 2e       	mov	r11, r30
 cc8:	1f c0       	rjmp	.+62     	; 0xd08 <strtol+0x10e>
 cca:	60 e0       	ldi	r22, 0x00	; 0
 ccc:	70 e0       	ldi	r23, 0x00	; 0
 cce:	80 e0       	ldi	r24, 0x00	; 0
 cd0:	90 e8       	ldi	r25, 0x80	; 128
 cd2:	97 01       	movw	r18, r14
 cd4:	0f 2c       	mov	r0, r15
 cd6:	00 0c       	add	r0, r0
 cd8:	44 0b       	sbc	r20, r20
 cda:	55 0b       	sbc	r21, r21
 cdc:	de d0       	rcall	.+444    	; 0xe9a <__udivmodsi4>
 cde:	49 01       	movw	r8, r18
 ce0:	5a 01       	movw	r10, r20
 ce2:	12 c0       	rjmp	.+36     	; 0xd08 <strtol+0x10e>
 ce4:	10 33       	cpi	r17, 0x30	; 48
 ce6:	59 f4       	brne	.+22     	; 0xcfe <strtol+0x104>
 ce8:	88 81       	ld	r24, Y
 cea:	8f 7d       	andi	r24, 0xDF	; 223
 cec:	88 35       	cpi	r24, 0x58	; 88
 cee:	09 f0       	breq	.+2      	; 0xcf2 <strtol+0xf8>
 cf0:	bb cf       	rjmp	.-138    	; 0xc68 <strtol+0x6e>
 cf2:	19 81       	ldd	r17, Y+1	; 0x01
 cf4:	22 96       	adiw	r28, 0x02	; 2
 cf6:	02 60       	ori	r16, 0x02	; 2
 cf8:	80 e1       	ldi	r24, 0x10	; 16
 cfa:	e8 2e       	mov	r14, r24
 cfc:	f1 2c       	mov	r15, r1
 cfe:	81 2c       	mov	r8, r1
 d00:	91 2c       	mov	r9, r1
 d02:	a1 2c       	mov	r10, r1
 d04:	68 e0       	ldi	r22, 0x08	; 8
 d06:	b6 2e       	mov	r11, r22
 d08:	40 e0       	ldi	r20, 0x00	; 0
 d0a:	60 e0       	ldi	r22, 0x00	; 0
 d0c:	70 e0       	ldi	r23, 0x00	; 0
 d0e:	cb 01       	movw	r24, r22
 d10:	27 01       	movw	r4, r14
 d12:	0f 2c       	mov	r0, r15
 d14:	00 0c       	add	r0, r0
 d16:	66 08       	sbc	r6, r6
 d18:	77 08       	sbc	r7, r7
 d1a:	fe 01       	movw	r30, r28
 d1c:	50 ed       	ldi	r21, 0xD0	; 208
 d1e:	35 2e       	mov	r3, r21
 d20:	31 0e       	add	r3, r17
 d22:	29 e0       	ldi	r18, 0x09	; 9
 d24:	23 15       	cp	r18, r3
 d26:	70 f4       	brcc	.+28     	; 0xd44 <strtol+0x14a>
 d28:	2f eb       	ldi	r18, 0xBF	; 191
 d2a:	21 0f       	add	r18, r17
 d2c:	2a 31       	cpi	r18, 0x1A	; 26
 d2e:	18 f4       	brcc	.+6      	; 0xd36 <strtol+0x13c>
 d30:	39 ec       	ldi	r19, 0xC9	; 201
 d32:	33 2e       	mov	r3, r19
 d34:	06 c0       	rjmp	.+12     	; 0xd42 <strtol+0x148>
 d36:	2f e9       	ldi	r18, 0x9F	; 159
 d38:	21 0f       	add	r18, r17
 d3a:	2a 31       	cpi	r18, 0x1A	; 26
 d3c:	10 f5       	brcc	.+68     	; 0xd82 <strtol+0x188>
 d3e:	29 ea       	ldi	r18, 0xA9	; 169
 d40:	32 2e       	mov	r3, r18
 d42:	31 0e       	add	r3, r17
 d44:	23 2d       	mov	r18, r3
 d46:	30 e0       	ldi	r19, 0x00	; 0
 d48:	2e 15       	cp	r18, r14
 d4a:	3f 05       	cpc	r19, r15
 d4c:	d4 f4       	brge	.+52     	; 0xd82 <strtol+0x188>
 d4e:	47 fd       	sbrc	r20, 7
 d50:	15 c0       	rjmp	.+42     	; 0xd7c <strtol+0x182>
 d52:	86 16       	cp	r8, r22
 d54:	97 06       	cpc	r9, r23
 d56:	a8 06       	cpc	r10, r24
 d58:	b9 06       	cpc	r11, r25
 d5a:	68 f0       	brcs	.+26     	; 0xd76 <strtol+0x17c>
 d5c:	a3 01       	movw	r20, r6
 d5e:	92 01       	movw	r18, r4
 d60:	8d d0       	rcall	.+282    	; 0xe7c <__mulsi3>
 d62:	63 0d       	add	r22, r3
 d64:	71 1d       	adc	r23, r1
 d66:	81 1d       	adc	r24, r1
 d68:	91 1d       	adc	r25, r1
 d6a:	61 30       	cpi	r22, 0x01	; 1
 d6c:	71 05       	cpc	r23, r1
 d6e:	81 05       	cpc	r24, r1
 d70:	20 e8       	ldi	r18, 0x80	; 128
 d72:	92 07       	cpc	r25, r18
 d74:	10 f0       	brcs	.+4      	; 0xd7a <strtol+0x180>
 d76:	4f ef       	ldi	r20, 0xFF	; 255
 d78:	01 c0       	rjmp	.+2      	; 0xd7c <strtol+0x182>
 d7a:	41 e0       	ldi	r20, 0x01	; 1
 d7c:	21 96       	adiw	r28, 0x01	; 1
 d7e:	10 81       	ld	r17, Z
 d80:	cc cf       	rjmp	.-104    	; 0xd1a <strtol+0x120>
 d82:	20 2f       	mov	r18, r16
 d84:	21 70       	andi	r18, 0x01	; 1
 d86:	c1 14       	cp	r12, r1
 d88:	d1 04       	cpc	r13, r1
 d8a:	71 f0       	breq	.+28     	; 0xda8 <strtol+0x1ae>
 d8c:	44 23       	and	r20, r20
 d8e:	29 f0       	breq	.+10     	; 0xd9a <strtol+0x1a0>
 d90:	21 97       	sbiw	r28, 0x01	; 1
 d92:	f6 01       	movw	r30, r12
 d94:	d1 83       	std	Z+1, r29	; 0x01
 d96:	c0 83       	st	Z, r28
 d98:	07 c0       	rjmp	.+14     	; 0xda8 <strtol+0x1ae>
 d9a:	01 ff       	sbrs	r16, 1
 d9c:	19 c0       	rjmp	.+50     	; 0xdd0 <strtol+0x1d6>
 d9e:	22 97       	sbiw	r28, 0x02	; 2
 da0:	f6 01       	movw	r30, r12
 da2:	d1 83       	std	Z+1, r29	; 0x01
 da4:	c0 83       	st	Z, r28
 da6:	14 c0       	rjmp	.+40     	; 0xdd0 <strtol+0x1d6>
 da8:	47 ff       	sbrs	r20, 7
 daa:	12 c0       	rjmp	.+36     	; 0xdd0 <strtol+0x1d6>
 dac:	22 23       	and	r18, r18
 dae:	29 f0       	breq	.+10     	; 0xdba <strtol+0x1c0>
 db0:	60 e0       	ldi	r22, 0x00	; 0
 db2:	70 e0       	ldi	r23, 0x00	; 0
 db4:	80 e0       	ldi	r24, 0x00	; 0
 db6:	90 e8       	ldi	r25, 0x80	; 128
 db8:	04 c0       	rjmp	.+8      	; 0xdc2 <strtol+0x1c8>
 dba:	6f ef       	ldi	r22, 0xFF	; 255
 dbc:	7f ef       	ldi	r23, 0xFF	; 255
 dbe:	8f ef       	ldi	r24, 0xFF	; 255
 dc0:	9f e7       	ldi	r25, 0x7F	; 127
 dc2:	22 e2       	ldi	r18, 0x22	; 34
 dc4:	30 e0       	ldi	r19, 0x00	; 0
 dc6:	30 93 ed 00 	sts	0x00ED, r19	; 0x8000ed <errno+0x1>
 dca:	20 93 ec 00 	sts	0x00EC, r18	; 0x8000ec <errno>
 dce:	09 c0       	rjmp	.+18     	; 0xde2 <strtol+0x1e8>
 dd0:	22 23       	and	r18, r18
 dd2:	81 f0       	breq	.+32     	; 0xdf4 <strtol+0x1fa>
 dd4:	90 95       	com	r25
 dd6:	80 95       	com	r24
 dd8:	70 95       	com	r23
 dda:	61 95       	neg	r22
 ddc:	7f 4f       	sbci	r23, 0xFF	; 255
 dde:	8f 4f       	sbci	r24, 0xFF	; 255
 de0:	9f 4f       	sbci	r25, 0xFF	; 255
 de2:	46 2f       	mov	r20, r22
 de4:	37 2f       	mov	r19, r23
 de6:	28 2f       	mov	r18, r24
 de8:	12 c0       	rjmp	.+36     	; 0xe0e <strtol+0x214>
 dea:	40 e0       	ldi	r20, 0x00	; 0
 dec:	30 e0       	ldi	r19, 0x00	; 0
 dee:	20 e0       	ldi	r18, 0x00	; 0
 df0:	90 e0       	ldi	r25, 0x00	; 0
 df2:	0d c0       	rjmp	.+26     	; 0xe0e <strtol+0x214>
 df4:	97 ff       	sbrs	r25, 7
 df6:	f5 cf       	rjmp	.-22     	; 0xde2 <strtol+0x1e8>
 df8:	82 e2       	ldi	r24, 0x22	; 34
 dfa:	90 e0       	ldi	r25, 0x00	; 0
 dfc:	90 93 ed 00 	sts	0x00ED, r25	; 0x8000ed <errno+0x1>
 e00:	80 93 ec 00 	sts	0x00EC, r24	; 0x8000ec <errno>
 e04:	6f ef       	ldi	r22, 0xFF	; 255
 e06:	7f ef       	ldi	r23, 0xFF	; 255
 e08:	8f ef       	ldi	r24, 0xFF	; 255
 e0a:	9f e7       	ldi	r25, 0x7F	; 127
 e0c:	ea cf       	rjmp	.-44     	; 0xde2 <strtol+0x1e8>
 e0e:	64 2f       	mov	r22, r20
 e10:	73 2f       	mov	r23, r19
 e12:	82 2f       	mov	r24, r18
 e14:	cd b7       	in	r28, 0x3d	; 61
 e16:	de b7       	in	r29, 0x3e	; 62
 e18:	e1 e1       	ldi	r30, 0x11	; 17
 e1a:	88 c0       	rjmp	.+272    	; 0xf2c <__epilogue_restores__+0x2>

00000e1c <atoi>:
 e1c:	fc 01       	movw	r30, r24
 e1e:	88 27       	eor	r24, r24
 e20:	99 27       	eor	r25, r25
 e22:	e8 94       	clt
 e24:	21 91       	ld	r18, Z+
 e26:	20 32       	cpi	r18, 0x20	; 32
 e28:	e9 f3       	breq	.-6      	; 0xe24 <atoi+0x8>
 e2a:	29 30       	cpi	r18, 0x09	; 9
 e2c:	10 f0       	brcs	.+4      	; 0xe32 <atoi+0x16>
 e2e:	2e 30       	cpi	r18, 0x0E	; 14
 e30:	c8 f3       	brcs	.-14     	; 0xe24 <atoi+0x8>
 e32:	2b 32       	cpi	r18, 0x2B	; 43
 e34:	39 f0       	breq	.+14     	; 0xe44 <atoi+0x28>
 e36:	2d 32       	cpi	r18, 0x2D	; 45
 e38:	31 f4       	brne	.+12     	; 0xe46 <atoi+0x2a>
 e3a:	68 94       	set
 e3c:	03 c0       	rjmp	.+6      	; 0xe44 <atoi+0x28>
 e3e:	13 d0       	rcall	.+38     	; 0xe66 <__mulhi_const_10>
 e40:	82 0f       	add	r24, r18
 e42:	91 1d       	adc	r25, r1
 e44:	21 91       	ld	r18, Z+
 e46:	20 53       	subi	r18, 0x30	; 48
 e48:	2a 30       	cpi	r18, 0x0A	; 10
 e4a:	c8 f3       	brcs	.-14     	; 0xe3e <atoi+0x22>
 e4c:	1e f4       	brtc	.+6      	; 0xe54 <atoi+0x38>
 e4e:	90 95       	com	r25
 e50:	81 95       	neg	r24
 e52:	9f 4f       	sbci	r25, 0xFF	; 255
 e54:	08 95       	ret

00000e56 <isspace>:
 e56:	91 11       	cpse	r25, r1
 e58:	0e c0       	rjmp	.+28     	; 0xe76 <__ctype_isfalse>
 e5a:	80 32       	cpi	r24, 0x20	; 32
 e5c:	19 f0       	breq	.+6      	; 0xe64 <isspace+0xe>
 e5e:	89 50       	subi	r24, 0x09	; 9
 e60:	85 50       	subi	r24, 0x05	; 5
 e62:	d0 f7       	brcc	.-12     	; 0xe58 <isspace+0x2>
 e64:	08 95       	ret

00000e66 <__mulhi_const_10>:
 e66:	7a e0       	ldi	r23, 0x0A	; 10
 e68:	97 9f       	mul	r25, r23
 e6a:	90 2d       	mov	r25, r0
 e6c:	87 9f       	mul	r24, r23
 e6e:	80 2d       	mov	r24, r0
 e70:	91 0d       	add	r25, r1
 e72:	11 24       	eor	r1, r1
 e74:	08 95       	ret

00000e76 <__ctype_isfalse>:
 e76:	99 27       	eor	r25, r25
 e78:	88 27       	eor	r24, r24

00000e7a <__ctype_istrue>:
 e7a:	08 95       	ret

00000e7c <__mulsi3>:
 e7c:	db 01       	movw	r26, r22
 e7e:	8f 93       	push	r24
 e80:	9f 93       	push	r25
 e82:	2d d0       	rcall	.+90     	; 0xede <__muluhisi3>
 e84:	bf 91       	pop	r27
 e86:	af 91       	pop	r26
 e88:	a2 9f       	mul	r26, r18
 e8a:	80 0d       	add	r24, r0
 e8c:	91 1d       	adc	r25, r1
 e8e:	a3 9f       	mul	r26, r19
 e90:	90 0d       	add	r25, r0
 e92:	b2 9f       	mul	r27, r18
 e94:	90 0d       	add	r25, r0
 e96:	11 24       	eor	r1, r1
 e98:	08 95       	ret

00000e9a <__udivmodsi4>:
 e9a:	a1 e2       	ldi	r26, 0x21	; 33
 e9c:	1a 2e       	mov	r1, r26
 e9e:	aa 1b       	sub	r26, r26
 ea0:	bb 1b       	sub	r27, r27
 ea2:	fd 01       	movw	r30, r26
 ea4:	0d c0       	rjmp	.+26     	; 0xec0 <__udivmodsi4_ep>

00000ea6 <__udivmodsi4_loop>:
 ea6:	aa 1f       	adc	r26, r26
 ea8:	bb 1f       	adc	r27, r27
 eaa:	ee 1f       	adc	r30, r30
 eac:	ff 1f       	adc	r31, r31
 eae:	a2 17       	cp	r26, r18
 eb0:	b3 07       	cpc	r27, r19
 eb2:	e4 07       	cpc	r30, r20
 eb4:	f5 07       	cpc	r31, r21
 eb6:	20 f0       	brcs	.+8      	; 0xec0 <__udivmodsi4_ep>
 eb8:	a2 1b       	sub	r26, r18
 eba:	b3 0b       	sbc	r27, r19
 ebc:	e4 0b       	sbc	r30, r20
 ebe:	f5 0b       	sbc	r31, r21

00000ec0 <__udivmodsi4_ep>:
 ec0:	66 1f       	adc	r22, r22
 ec2:	77 1f       	adc	r23, r23
 ec4:	88 1f       	adc	r24, r24
 ec6:	99 1f       	adc	r25, r25
 ec8:	1a 94       	dec	r1
 eca:	69 f7       	brne	.-38     	; 0xea6 <__udivmodsi4_loop>
 ecc:	60 95       	com	r22
 ece:	70 95       	com	r23
 ed0:	80 95       	com	r24
 ed2:	90 95       	com	r25
 ed4:	9b 01       	movw	r18, r22
 ed6:	ac 01       	movw	r20, r24
 ed8:	bd 01       	movw	r22, r26
 eda:	cf 01       	movw	r24, r30
 edc:	08 95       	ret

00000ede <__muluhisi3>:
 ede:	40 d0       	rcall	.+128    	; 0xf60 <__umulhisi3>
 ee0:	a5 9f       	mul	r26, r21
 ee2:	90 0d       	add	r25, r0
 ee4:	b4 9f       	mul	r27, r20
 ee6:	90 0d       	add	r25, r0
 ee8:	a4 9f       	mul	r26, r20
 eea:	80 0d       	add	r24, r0
 eec:	91 1d       	adc	r25, r1
 eee:	11 24       	eor	r1, r1
 ef0:	08 95       	ret

00000ef2 <__prologue_saves__>:
 ef2:	2f 92       	push	r2
 ef4:	3f 92       	push	r3
 ef6:	4f 92       	push	r4
 ef8:	5f 92       	push	r5
 efa:	6f 92       	push	r6
 efc:	7f 92       	push	r7
 efe:	8f 92       	push	r8
 f00:	9f 92       	push	r9
 f02:	af 92       	push	r10
 f04:	bf 92       	push	r11
 f06:	cf 92       	push	r12
 f08:	df 92       	push	r13
 f0a:	ef 92       	push	r14
 f0c:	ff 92       	push	r15
 f0e:	0f 93       	push	r16
 f10:	1f 93       	push	r17
 f12:	cf 93       	push	r28
 f14:	df 93       	push	r29
 f16:	cd b7       	in	r28, 0x3d	; 61
 f18:	de b7       	in	r29, 0x3e	; 62
 f1a:	ca 1b       	sub	r28, r26
 f1c:	db 0b       	sbc	r29, r27
 f1e:	0f b6       	in	r0, 0x3f	; 63
 f20:	f8 94       	cli
 f22:	de bf       	out	0x3e, r29	; 62
 f24:	0f be       	out	0x3f, r0	; 63
 f26:	cd bf       	out	0x3d, r28	; 61
 f28:	09 94       	ijmp

00000f2a <__epilogue_restores__>:
 f2a:	2a 88       	ldd	r2, Y+18	; 0x12
 f2c:	39 88       	ldd	r3, Y+17	; 0x11
 f2e:	48 88       	ldd	r4, Y+16	; 0x10
 f30:	5f 84       	ldd	r5, Y+15	; 0x0f
 f32:	6e 84       	ldd	r6, Y+14	; 0x0e
 f34:	7d 84       	ldd	r7, Y+13	; 0x0d
 f36:	8c 84       	ldd	r8, Y+12	; 0x0c
 f38:	9b 84       	ldd	r9, Y+11	; 0x0b
 f3a:	aa 84       	ldd	r10, Y+10	; 0x0a
 f3c:	b9 84       	ldd	r11, Y+9	; 0x09
 f3e:	c8 84       	ldd	r12, Y+8	; 0x08
 f40:	df 80       	ldd	r13, Y+7	; 0x07
 f42:	ee 80       	ldd	r14, Y+6	; 0x06
 f44:	fd 80       	ldd	r15, Y+5	; 0x05
 f46:	0c 81       	ldd	r16, Y+4	; 0x04
 f48:	1b 81       	ldd	r17, Y+3	; 0x03
 f4a:	aa 81       	ldd	r26, Y+2	; 0x02
 f4c:	b9 81       	ldd	r27, Y+1	; 0x01
 f4e:	ce 0f       	add	r28, r30
 f50:	d1 1d       	adc	r29, r1
 f52:	0f b6       	in	r0, 0x3f	; 63
 f54:	f8 94       	cli
 f56:	de bf       	out	0x3e, r29	; 62
 f58:	0f be       	out	0x3f, r0	; 63
 f5a:	cd bf       	out	0x3d, r28	; 61
 f5c:	ed 01       	movw	r28, r26
 f5e:	08 95       	ret

00000f60 <__umulhisi3>:
 f60:	a2 9f       	mul	r26, r18
 f62:	b0 01       	movw	r22, r0
 f64:	b3 9f       	mul	r27, r19
 f66:	c0 01       	movw	r24, r0
 f68:	a3 9f       	mul	r26, r19
 f6a:	01 d0       	rcall	.+2      	; 0xf6e <__umulhisi3+0xe>
 f6c:	b2 9f       	mul	r27, r18
 f6e:	70 0d       	add	r23, r0
 f70:	81 1d       	adc	r24, r1
 f72:	11 24       	eor	r1, r1
 f74:	91 1d       	adc	r25, r1
 f76:	08 95       	ret

00000f78 <_exit>:
 f78:	f8 94       	cli

00000f7a <__stop_program>:
 f7a:	ff cf       	rjmp	.-2      	; 0xf7a <__stop_program>
