
main.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000f06  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000000  00800060  00000f06  00000f9a  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          0000008e  00800060  00800060  00000f9a  2**0
                  ALLOC
  3 .comment      0000005c  00000000  00000000  00000f9a  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000ff8  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000028  00000000  00000000  00001038  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00001ca8  00000000  00000000  00001060  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 0000070e  00000000  00000000  00002d08  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000ef9  00000000  00000000  00003416  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  0000031c  00000000  00000000  00004310  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000578  00000000  00000000  0000462c  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000012a8  00000000  00000000  00004ba4  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000090  00000000  00000000  00005e4c  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	10 c0       	rjmp	.+32     	; 0x22 <__ctors_end>
   2:	1f c0       	rjmp	.+62     	; 0x42 <__bad_interrupt>
   4:	1e c0       	rjmp	.+60     	; 0x42 <__bad_interrupt>
   6:	1d c0       	rjmp	.+58     	; 0x42 <__bad_interrupt>
   8:	1c c0       	rjmp	.+56     	; 0x42 <__bad_interrupt>
   a:	1b c0       	rjmp	.+54     	; 0x42 <__bad_interrupt>
   c:	1a c0       	rjmp	.+52     	; 0x42 <__bad_interrupt>
   e:	19 c0       	rjmp	.+50     	; 0x42 <__bad_interrupt>
  10:	18 c0       	rjmp	.+48     	; 0x42 <__bad_interrupt>
  12:	17 c0       	rjmp	.+46     	; 0x42 <__bad_interrupt>
  14:	16 c0       	rjmp	.+44     	; 0x42 <__bad_interrupt>
  16:	15 c0       	rjmp	.+42     	; 0x42 <__bad_interrupt>
  18:	14 c0       	rjmp	.+40     	; 0x42 <__bad_interrupt>
  1a:	13 c0       	rjmp	.+38     	; 0x42 <__bad_interrupt>
  1c:	12 c0       	rjmp	.+36     	; 0x42 <__bad_interrupt>
  1e:	11 c0       	rjmp	.+34     	; 0x42 <__bad_interrupt>
  20:	10 c0       	rjmp	.+32     	; 0x42 <__bad_interrupt>

00000022 <__ctors_end>:
  22:	11 24       	eor	r1, r1
  24:	1f be       	out	0x3f, r1	; 63
  26:	cf e5       	ldi	r28, 0x5F	; 95
  28:	d2 e0       	ldi	r29, 0x02	; 2
  2a:	de bf       	out	0x3e, r29	; 62
  2c:	cd bf       	out	0x3d, r28	; 61

0000002e <__do_clear_bss>:
  2e:	20 e0       	ldi	r18, 0x00	; 0
  30:	a0 e6       	ldi	r26, 0x60	; 96
  32:	b0 e0       	ldi	r27, 0x00	; 0
  34:	01 c0       	rjmp	.+2      	; 0x38 <.do_clear_bss_start>

00000036 <.do_clear_bss_loop>:
  36:	1d 92       	st	X+, r1

00000038 <.do_clear_bss_start>:
  38:	ae 3e       	cpi	r26, 0xEE	; 238
  3a:	b2 07       	cpc	r27, r18
  3c:	e1 f7       	brne	.-8      	; 0x36 <.do_clear_bss_loop>
  3e:	a4 d2       	rcall	.+1352   	; 0x588 <main>
  40:	60 c7       	rjmp	.+3776   	; 0xf02 <_exit>

00000042 <__bad_interrupt>:
  42:	de cf       	rjmp	.-68     	; 0x0 <__vectors>

00000044 <USART_Receive>:
uint8_t eepromBuffer[8];
uint8_t flashChipIdBuffer[2];

// Receive USART data
uint8_t USART_Receive(void) {
	while ( !(UCSRA & (1<<RXC)) ); // Wait for data to be received
  44:	5f 9b       	sbis	0x0b, 7	; 11
  46:	fe cf       	rjmp	.-4      	; 0x44 <USART_Receive>
	return UDR; // Get and return received data from buffer
  48:	8c b1       	in	r24, 0x0c	; 12
}
  4a:	08 95       	ret

0000004c <USART_Transmit>:

// Transmit USART data
void USART_Transmit(unsigned char data) {
	while ( !( UCSRA & (1<<UDRE)) ); // Wait for empty transmit buffer
  4c:	5d 9b       	sbis	0x0b, 5	; 11
  4e:	fe cf       	rjmp	.-4      	; 0x4c <USART_Transmit>
	UDR = data;
  50:	8c b9       	out	0x0c, r24	; 12
  52:	08 95       	ret

00000054 <usart_read_bytes>:
}

// Read 1-128 bytes from the USART 
void usart_read_bytes(uint8_t count) {
  54:	ef 92       	push	r14
  56:	ff 92       	push	r15
  58:	1f 93       	push	r17
  5a:	cf 93       	push	r28
  5c:	df 93       	push	r29
  5e:	18 2f       	mov	r17, r24
  60:	82 e6       	ldi	r24, 0x62	; 98
  62:	e8 2e       	mov	r14, r24
  64:	80 e0       	ldi	r24, 0x00	; 0
  66:	f8 2e       	mov	r15, r24
	for (uint8_t x = 0; x < count; x++) {
  68:	e7 01       	movw	r28, r14
  6a:	8c 2f       	mov	r24, r28
  6c:	8e 19       	sub	r24, r14
  6e:	81 17       	cp	r24, r17
  70:	18 f4       	brcc	.+6      	; 0x78 <usart_read_bytes+0x24>
		receivedBuffer[x] = USART_Receive();
  72:	e8 df       	rcall	.-48     	; 0x44 <USART_Receive>
  74:	89 93       	st	Y+, r24
  76:	f9 cf       	rjmp	.-14     	; 0x6a <usart_read_bytes+0x16>
	}
}
  78:	df 91       	pop	r29
  7a:	cf 91       	pop	r28
  7c:	1f 91       	pop	r17
  7e:	ff 90       	pop	r15
  80:	ef 90       	pop	r14
  82:	08 95       	ret

00000084 <usart_read_chars>:

// Read the USART until a 0 (string terminator byte) is received
void usart_read_chars(void) {
  84:	cf 93       	push	r28
	uint8_t x = 0;
  86:	c0 e0       	ldi	r28, 0x00	; 0
	while (1) {
		receivedBuffer[x] = USART_Receive();
  88:	dd df       	rcall	.-70     	; 0x44 <USART_Receive>
  8a:	ec 2f       	mov	r30, r28
  8c:	f0 e0       	ldi	r31, 0x00	; 0
  8e:	ee 59       	subi	r30, 0x9E	; 158
  90:	ff 4f       	sbci	r31, 0xFF	; 255
  92:	80 83       	st	Z, r24
		if (receivedBuffer[x] == 0) {
  94:	88 23       	and	r24, r24
  96:	11 f0       	breq	.+4      	; 0x9c <usart_read_chars+0x18>
			break;
		}
		x++;
  98:	cf 5f       	subi	r28, 0xFF	; 255
	}
  9a:	f6 cf       	rjmp	.-20     	; 0x88 <usart_read_chars+0x4>
}
  9c:	cf 91       	pop	r28
  9e:	08 95       	ret

000000a0 <rd_wr_csmreq_cs2_reset>:

// Turn RD, WR, CS/MREQ and CS2 to high so they are deselected (reset state)
void rd_wr_csmreq_cs2_reset(void) {
	cs2Pin_high; // CS2 off
  a0:	3a 9a       	sbi	0x07, 2	; 7
	cs_mreqPin_high; // CS/MREQ off
  a2:	94 9a       	sbi	0x12, 4	; 18
	rdPin_high; // RD off
  a4:	95 9a       	sbi	0x12, 5	; 18
	wrPin_high; // WR off
  a6:	96 9a       	sbi	0x12, 6	; 18
  a8:	08 95       	ret

000000aa <gb_mode>:
// ****** Gameboy / Gameboy Colour functions ******

// Set Gameboy mode
void gb_mode(void) {
	// Set inputs
	PORT_DATA7_0 = 0;
  aa:	15 ba       	out	0x15, r1	; 21
	DDR_DATA7_0 = 0;
  ac:	14 ba       	out	0x14, r1	; 20
	
	// Set outputs
	PORT_ADDR7_0 = 0;
  ae:	18 ba       	out	0x18, r1	; 24
	PORT_ADDR15_8 = 0;
  b0:	1b ba       	out	0x1b, r1	; 27
	DDR_ADDR7_0 = 0xFF;
  b2:	8f ef       	ldi	r24, 0xFF	; 255
  b4:	87 bb       	out	0x17, r24	; 23
	DDR_ADDR15_8 = 0xFF;
  b6:	8a bb       	out	0x1a, r24	; 26
  b8:	08 95       	ret

000000ba <set_16bit_address>:
}

// Set the 16 bit address on A15-0
void set_16bit_address(uint16_t address) {
	PORT_ADDR15_8 = (address >> 8);
  ba:	9b bb       	out	0x1b, r25	; 27
	PORT_ADDR7_0 = (address & 0xFF);
  bc:	88 bb       	out	0x18, r24	; 24
  be:	08 95       	ret

000000c0 <read_8bit_data>:
}

// Set the address and read a byte from the 8 bit data line
uint8_t read_8bit_data(uint16_t address) {
	set_16bit_address(address);
  c0:	fc df       	rcall	.-8      	; 0xba <set_16bit_address>
	
	cs_mreqPin_low;
  c2:	94 98       	cbi	0x12, 4	; 18
	rdPin_low;
  c4:	95 98       	cbi	0x12, 5	; 18
	
	asm volatile("nop"); // Delay a little (minimum needed is 1 nops, 2 nops for GB camera)
  c6:	00 00       	nop
	asm volatile("nop");
  c8:	00 00       	nop
	uint8_t data = PIN_DATA7_0; // Read data
  ca:	83 b3       	in	r24, 0x13	; 19
	
	rdPin_high;
  cc:	95 9a       	sbi	0x12, 5	; 18
	cs_mreqPin_high;
  ce:	94 9a       	sbi	0x12, 4	; 18
	
	return data;
}
  d0:	08 95       	ret

000000d2 <write_8bit_data>:

// Set the address and write a byte to the 8 bit data line and pulse cs/mREQ if writing to RAM
void write_8bit_data(uint16_t address, uint8_t data, uint8_t type) {
  d2:	cf 93       	push	r28
  d4:	df 93       	push	r29
  d6:	00 d0       	rcall	.+0      	; 0xd8 <write_8bit_data+0x6>
  d8:	cd b7       	in	r28, 0x3d	; 61
  da:	de b7       	in	r29, 0x3e	; 62
	set_16bit_address(address);
  dc:	4a 83       	std	Y+2, r20	; 0x02
  de:	69 83       	std	Y+1, r22	; 0x01
  e0:	ec df       	rcall	.-40     	; 0xba <set_16bit_address>
	
	DDR_DATA7_0 = 0xFF; // Set data pins as outputs
  e2:	8f ef       	ldi	r24, 0xFF	; 255
  e4:	84 bb       	out	0x14, r24	; 20
	PORT_DATA7_0 = data; // Set data
  e6:	69 81       	ldd	r22, Y+1	; 0x01
  e8:	65 bb       	out	0x15, r22	; 21
	
	// Pulse WR and mREQ if the type matches
	wrPin_low;
  ea:	96 98       	cbi	0x12, 6	; 18
	if (type == MEMORY_WRITE) {
  ec:	4a 81       	ldd	r20, Y+2	; 0x02
  ee:	41 30       	cpi	r20, 0x01	; 1
  f0:	09 f4       	brne	.+2      	; 0xf4 <write_8bit_data+0x22>
		cs_mreqPin_low;
  f2:	94 98       	cbi	0x12, 4	; 18
	}
	
	asm volatile("nop");
  f4:	00 00       	nop
	
	if (type == MEMORY_WRITE) {
  f6:	41 30       	cpi	r20, 0x01	; 1
  f8:	09 f4       	brne	.+2      	; 0xfc <write_8bit_data+0x2a>
		cs_mreqPin_high;
  fa:	94 9a       	sbi	0x12, 4	; 18
	}
	wrPin_high;
  fc:	96 9a       	sbi	0x12, 6	; 18
	
	// Clear data outputs and set data pins as inputs
	PORT_DATA7_0 = 0;
  fe:	15 ba       	out	0x15, r1	; 21
	DDR_DATA7_0 = 0;
 100:	14 ba       	out	0x14, r1	; 20
}
 102:	0f 90       	pop	r0
 104:	0f 90       	pop	r0
 106:	df 91       	pop	r29
 108:	cf 91       	pop	r28
 10a:	08 95       	ret

0000010c <gba_mode>:
// ****** Gameboy Advance functions ****** 

// Set GBA mode
void gba_mode(void) {
	// Set outputs for reading ROM addresses as default
	GBA_PORT_ROM_ADDR7_0 = 0;
 10c:	18 ba       	out	0x18, r1	; 24
	GBA_PORT_ROM_ADDR15_8 = 0;
 10e:	1b ba       	out	0x1b, r1	; 27
	GBA_PORT_ROM_ADDR23_16 = 0;
 110:	15 ba       	out	0x15, r1	; 21
	GBA_DDR_ROM_ADDR7_0 = 0xFF;
 112:	8f ef       	ldi	r24, 0xFF	; 255
 114:	87 bb       	out	0x17, r24	; 23
	GBA_DDR_ROM_ADDR15_8 = 0xFF;
 116:	8a bb       	out	0x1a, r24	; 26
	GBA_DDR_ROM_ADDR23_16 = 0xFF;
 118:	84 bb       	out	0x14, r24	; 20
 11a:	08 95       	ret

0000011c <gba_set_24bit_address>:
}

// Set the 24 bit address on A23-0
void gba_set_24bit_address(uint32_t address) {	
 11c:	0f 93       	push	r16
 11e:	1f 93       	push	r17
	GBA_PORT_ROM_ADDR23_16 = 0; // Set 0-23 address lines low and set as outputs
 120:	15 ba       	out	0x15, r1	; 21
	GBA_PORT_ROM_ADDR15_8 = 0;
 122:	1b ba       	out	0x1b, r1	; 27
	GBA_PORT_ROM_ADDR7_0 = 0;
 124:	18 ba       	out	0x18, r1	; 24
	GBA_DDR_ROM_ADDR23_16 = 0xFF;
 126:	2f ef       	ldi	r18, 0xFF	; 255
 128:	24 bb       	out	0x14, r18	; 20
	GBA_DDR_ROM_ADDR15_8 = 0xFF;
 12a:	2a bb       	out	0x1a, r18	; 26
	GBA_DDR_ROM_ADDR7_0 = 0xFF;
 12c:	27 bb       	out	0x17, r18	; 23
	
	GBA_PORT_ROM_ADDR23_16 = (address >> 16);
 12e:	8c 01       	movw	r16, r24
 130:	22 27       	eor	r18, r18
 132:	33 27       	eor	r19, r19
 134:	05 bb       	out	0x15, r16	; 21
	GBA_PORT_ROM_ADDR15_8 = (address >> 8);
 136:	07 2f       	mov	r16, r23
 138:	18 2f       	mov	r17, r24
 13a:	29 2f       	mov	r18, r25
 13c:	33 27       	eor	r19, r19
 13e:	0b bb       	out	0x1b, r16	; 27
	GBA_PORT_ROM_ADDR7_0 = (address & 0xFF);
 140:	68 bb       	out	0x18, r22	; 24
}
 142:	1f 91       	pop	r17
 144:	0f 91       	pop	r16
 146:	08 95       	ret

00000148 <gba_read_16bit_data>:

// ---------- ROM/SRAM ----------

// Read a byte from the 16 bit data line non-sequentially
uint16_t gba_read_16bit_data(uint32_t address) {
	gba_set_24bit_address(address);
 148:	e9 df       	rcall	.-46     	; 0x11c <gba_set_24bit_address>
	
	cs_mreqPin_low;
 14a:	94 98       	cbi	0x12, 4	; 18
	
	GBA_PORT_ROM_ADDR15_8 = 0; // Set address lines low and set as inputs
 14c:	1b ba       	out	0x1b, r1	; 27
	GBA_PORT_ROM_ADDR7_0 = 0;
 14e:	18 ba       	out	0x18, r1	; 24
	GBA_DDR_ROM_ADDR15_8 = 0;
 150:	1a ba       	out	0x1a, r1	; 26
	GBA_DDR_ROM_ADDR7_0 = 0;
 152:	17 ba       	out	0x17, r1	; 23
	
	rdPin_low;
 154:	95 98       	cbi	0x12, 5	; 18
	asm volatile("nop");
 156:	00 00       	nop
	
	uint16_t data = (GBA_PIN_ROM_DATA15_8 << 8) | GBA_PIN_ROM_DATA7_0; // Read data
 158:	29 b3       	in	r18, 0x19	; 25
 15a:	86 b3       	in	r24, 0x16	; 22
	
	rdPin_high;
 15c:	95 9a       	sbi	0x12, 5	; 18
	cs_mreqPin_high;
 15e:	94 9a       	sbi	0x12, 4	; 18
	GBA_DDR_ROM_ADDR7_0 = 0;
	
	rdPin_low;
	asm volatile("nop");
	
	uint16_t data = (GBA_PIN_ROM_DATA15_8 << 8) | GBA_PIN_ROM_DATA7_0; // Read data
 160:	90 e0       	ldi	r25, 0x00	; 0
	
	rdPin_high;
	cs_mreqPin_high;
	
	return data;
}
 162:	92 2b       	or	r25, r18
 164:	08 95       	ret

00000166 <gba_read_ram_8bit_data>:

// Set the address and read a byte from the 8 bit data line
uint8_t gba_read_ram_8bit_data(uint16_t address) {
	set_16bit_address(address);
 166:	a9 df       	rcall	.-174    	; 0xba <set_16bit_address>
	
	rdPin_low;
 168:	95 98       	cbi	0x12, 5	; 18
	cs2Pin_low; // CS2 pin low for SRAM/Flash select
 16a:	3a 98       	cbi	0x07, 2	; 7
	
	asm volatile("nop"); // Delay a little (minimum needed is 2)
 16c:	00 00       	nop
	asm volatile("nop");
 16e:	00 00       	nop
	
	uint8_t data = GBA_PIN_RAM_DATA7_0; // Read data
 170:	83 b3       	in	r24, 0x13	; 19
	
	cs2Pin_high;
 172:	3a 9a       	sbi	0x07, 2	; 7
	rdPin_high;
 174:	95 9a       	sbi	0x12, 5	; 18
	
	return data;
}
 176:	08 95       	ret

00000178 <gba_write_ram_8bit_data>:

// Set the address and write a byte to the 8 bit data line 
void gba_write_ram_8bit_data(uint16_t address, uint8_t data) {
 178:	cf 93       	push	r28
 17a:	df 93       	push	r29
 17c:	1f 92       	push	r1
 17e:	cd b7       	in	r28, 0x3d	; 61
 180:	de b7       	in	r29, 0x3e	; 62
	set_16bit_address(address);
 182:	69 83       	std	Y+1, r22	; 0x01
 184:	9a df       	rcall	.-204    	; 0xba <set_16bit_address>
	
	GBA_DDR_RAM_DATA7_0 = 0xFF; // Set data pins as outputs
 186:	8f ef       	ldi	r24, 0xFF	; 255
 188:	84 bb       	out	0x14, r24	; 20
	GBA_PORT_RAM_DATA7_0 = data; // Set data
 18a:	69 81       	ldd	r22, Y+1	; 0x01
 18c:	65 bb       	out	0x15, r22	; 21
	
	// Pulse WR
	wrPin_low;
 18e:	96 98       	cbi	0x12, 6	; 18
	cs2Pin_low; // CS2 pin low for SRAM/Flash select
 190:	3a 98       	cbi	0x07, 2	; 7
	
	asm volatile("nop");
 192:	00 00       	nop
	asm volatile("nop");
 194:	00 00       	nop
	
	cs2Pin_high;
 196:	3a 9a       	sbi	0x07, 2	; 7
	wrPin_high;
 198:	96 9a       	sbi	0x12, 6	; 18
	
	// Clear data outputs and set data pins as inputs
	GBA_PORT_RAM_DATA7_0 = 0;
 19a:	15 ba       	out	0x15, r1	; 21
	GBA_DDR_RAM_DATA7_0 = 0;
 19c:	14 ba       	out	0x14, r1	; 20
}
 19e:	0f 90       	pop	r0
 1a0:	df 91       	pop	r29
 1a2:	cf 91       	pop	r28
 1a4:	08 95       	ret

000001a6 <gba_eeprom_mode>:

// ---------- EEPROM ----------

// Set address/data all high (includes AD0/A23)
void gba_eeprom_mode (void) {
	GBA_DDR_ROM_ADDR7_0 = 0xFF;
 1a6:	8f ef       	ldi	r24, 0xFF	; 255
 1a8:	87 bb       	out	0x17, r24	; 23
	GBA_DDR_ROM_ADDR15_8 = 0xFF;
 1aa:	8a bb       	out	0x1a, r24	; 26
	GBA_DDR_ROM_ADDR23_16 = 0xFF;
 1ac:	84 bb       	out	0x14, r24	; 20
	GBA_PORT_ROM_ADDR7_0 = 0x80;
 1ae:	90 e8       	ldi	r25, 0x80	; 128
 1b0:	98 bb       	out	0x18, r25	; 24
	GBA_PORT_ROM_ADDR15_8 = 0xFF;
 1b2:	8b bb       	out	0x1b, r24	; 27
	GBA_PORT_ROM_ADDR23_16 = 0xFF;
 1b4:	85 bb       	out	0x15, r24	; 21
 1b6:	08 95       	ret

000001b8 <gba_eeprom_set_address>:
}

// Send out EEPROM address serially (WR clock, AD0 data out)
void gba_eeprom_set_address(uint16_t address, uint8_t eepromSize, uint8_t command) {
	cs_mreqPin_low;
 1b8:	94 98       	cbi	0x12, 4	; 18
	
	int8_t x = 0;
	if (eepromSize == EEPROM_64KBIT) {
 1ba:	62 30       	cpi	r22, 0x02	; 2
 1bc:	49 f4       	brne	.+18     	; 0x1d0 <gba_eeprom_set_address+0x18>
		if (command == EEPROM_READ) {
 1be:	41 11       	cpse	r20, r1
 1c0:	05 c0       	rjmp	.+10     	; 0x1cc <gba_eeprom_set_address+0x14>
			address |= (1<<15) | (1<<14); // Set upper 2 bits high for read request
 1c2:	90 6c       	ori	r25, 0xC0	; 192
		}
		else {
			address |= (1<<15); // Set upper 1 bit high for write request
		}
		x = 15;
 1c4:	2f e0       	ldi	r18, 0x0F	; 15
		x = 7;
	}
	
	// Loop through address, 8 or 16 bits depending on EEPROM (includes the 2 bits for request type)
	while (x >= 0) {
		if (address & (1<<x)) {
 1c6:	e1 e0       	ldi	r30, 0x01	; 1
 1c8:	f0 e0       	ldi	r31, 0x00	; 0
 1ca:	13 c0       	rjmp	.+38     	; 0x1f2 <gba_eeprom_set_address+0x3a>
	if (eepromSize == EEPROM_64KBIT) {
		if (command == EEPROM_READ) {
			address |= (1<<15) | (1<<14); // Set upper 2 bits high for read request
		}
		else {
			address |= (1<<15); // Set upper 1 bit high for write request
 1cc:	90 68       	ori	r25, 0x80	; 128
 1ce:	fa cf       	rjmp	.-12     	; 0x1c4 <gba_eeprom_set_address+0xc>
		}
		x = 15;
	}
	else {
		if (command == EEPROM_READ) {
 1d0:	41 11       	cpse	r20, r1
 1d2:	02 c0       	rjmp	.+4      	; 0x1d8 <gba_eeprom_set_address+0x20>
			address |= (1<<7) | (1<<6);
 1d4:	80 6c       	ori	r24, 0xC0	; 192
 1d6:	01 c0       	rjmp	.+2      	; 0x1da <gba_eeprom_set_address+0x22>
		}
		else {
			address |= (1<<7);
 1d8:	80 68       	ori	r24, 0x80	; 128
		}
		x = 7;
 1da:	27 e0       	ldi	r18, 0x07	; 7
 1dc:	f4 cf       	rjmp	.-24     	; 0x1c6 <gba_eeprom_set_address+0xe>
	while (x >= 0) {
		if (address & (1<<x)) {
			ad0Pin_high;
		}
		else {
			ad0Pin_low;
 1de:	c0 98       	cbi	0x18, 0	; 24
		}
		
		wrPin_low; // CLK
 1e0:	96 98       	cbi	0x12, 6	; 18
		asm ("nop");
 1e2:	00 00       	nop
		asm ("nop");
 1e4:	00 00       	nop
		wrPin_high; 
 1e6:	96 9a       	sbi	0x12, 6	; 18
		asm ("nop");
 1e8:	00 00       	nop
		asm ("nop");
 1ea:	00 00       	nop
 1ec:	21 50       	subi	r18, 0x01	; 1
		}
		x = 7;
	}
	
	// Loop through address, 8 or 16 bits depending on EEPROM (includes the 2 bits for request type)
	while (x >= 0) {
 1ee:	27 fd       	sbrc	r18, 7
 1f0:	0d c0       	rjmp	.+26     	; 0x20c <gba_eeprom_set_address+0x54>
		if (address & (1<<x)) {
 1f2:	bf 01       	movw	r22, r30
 1f4:	02 2e       	mov	r0, r18
 1f6:	02 c0       	rjmp	.+4      	; 0x1fc <gba_eeprom_set_address+0x44>
 1f8:	66 0f       	add	r22, r22
 1fa:	77 1f       	adc	r23, r23
 1fc:	0a 94       	dec	r0
 1fe:	e2 f7       	brpl	.-8      	; 0x1f8 <gba_eeprom_set_address+0x40>
 200:	68 23       	and	r22, r24
 202:	79 23       	and	r23, r25
 204:	67 2b       	or	r22, r23
 206:	59 f3       	breq	.-42     	; 0x1de <gba_eeprom_set_address+0x26>
			ad0Pin_high;
 208:	c0 9a       	sbi	0x18, 0	; 24
 20a:	ea cf       	rjmp	.-44     	; 0x1e0 <gba_eeprom_set_address+0x28>
		
		x--;
	}
	
	// Only send stop bit (0) and WR/CS high if reading, as writing is done in 1 continuous chunk
	if (command == EEPROM_READ) {  
 20c:	41 11       	cpse	r20, r1
 20e:	07 c0       	rjmp	.+14     	; 0x21e <gba_eeprom_set_address+0x66>
		ad0Pin_low;
 210:	c0 98       	cbi	0x18, 0	; 24
		asm ("nop");
 212:	00 00       	nop
		wrPin_low;
 214:	96 98       	cbi	0x12, 6	; 18
		asm ("nop");
 216:	00 00       	nop
		asm ("nop");
 218:	00 00       	nop
		
		wrPin_high;
 21a:	96 9a       	sbi	0x12, 6	; 18
		cs_mreqPin_high;
 21c:	94 9a       	sbi	0x12, 4	; 18
 21e:	08 95       	ret

00000220 <gba_eeprom_read>:
	}
}

// Read 8 bytes from the EEPROM address, data is valid on rising edge
void gba_eeprom_read(uint16_t address, uint8_t eepromSize) {
	gba_eeprom_set_address(address, eepromSize, EEPROM_READ);
 220:	40 e0       	ldi	r20, 0x00	; 0
 222:	ca df       	rcall	.-108    	; 0x1b8 <gba_eeprom_set_address>
	
	// Set AD0 pin as input
	GBA_PORT_EEPROM_DATA7_0 &= ~(1<<AD0);
 224:	c0 98       	cbi	0x18, 0	; 24
	GBA_DDR_EEPROM_DATA7_0 &= ~(1<<AD0);
 226:	b8 98       	cbi	0x17, 0	; 23
	
	cs_mreqPin_low;
 228:	94 98       	cbi	0x12, 4	; 18
 22a:	84 e0       	ldi	r24, 0x04	; 4
	
	// Ignore first 4 bits
	for (int8_t x = 0; x < 4; x++) {
		rdPin_low; // CLK
 22c:	95 98       	cbi	0x12, 5	; 18
		asm ("nop");
 22e:	00 00       	nop
		asm ("nop");
 230:	00 00       	nop
		rdPin_high; 
 232:	95 9a       	sbi	0x12, 5	; 18
		asm ("nop");
 234:	00 00       	nop
		asm ("nop");
 236:	00 00       	nop
 238:	81 50       	subi	r24, 0x01	; 1
	GBA_DDR_EEPROM_DATA7_0 &= ~(1<<AD0);
	
	cs_mreqPin_low;
	
	// Ignore first 4 bits
	for (int8_t x = 0; x < 4; x++) {
 23a:	c1 f7       	brne	.-16     	; 0x22c <gba_eeprom_read+0xc>
 23c:	e4 ee       	ldi	r30, 0xE4	; 228
 23e:	f0 e0       	ldi	r31, 0x00	; 0
			asm ("nop");
			asm ("nop");
			rdPin_high;
			
			if (GBA_PIN_EEPROM_DATA7_0 & (1<<AD0)) {
				data |= (1<<x);
 240:	41 e0       	ldi	r20, 0x01	; 1
 242:	50 e0       	ldi	r21, 0x00	; 0
 244:	38 e0       	ldi	r19, 0x08	; 8
 246:	3e 0f       	add	r19, r30
	
	// Set AD0 pin as input
	GBA_PORT_EEPROM_DATA7_0 &= ~(1<<AD0);
	GBA_DDR_EEPROM_DATA7_0 &= ~(1<<AD0);
	
	cs_mreqPin_low;
 248:	87 e0       	ldi	r24, 0x07	; 7
 24a:	90 e0       	ldi	r25, 0x00	; 0
 24c:	20 e0       	ldi	r18, 0x00	; 0
	
	// Read out 64 bits
	for (uint8_t c = 0; c < 8; c++) {
		uint8_t data = 0;
		for (int8_t x = 7; x >= 0; x--) {
			rdPin_low; // CLK
 24e:	95 98       	cbi	0x12, 5	; 18
			asm ("nop");
 250:	00 00       	nop
			asm ("nop");
 252:	00 00       	nop
			rdPin_high;
 254:	95 9a       	sbi	0x12, 5	; 18
			
			if (GBA_PIN_EEPROM_DATA7_0 & (1<<AD0)) {
 256:	b0 9b       	sbis	0x16, 0	; 22
 258:	07 c0       	rjmp	.+14     	; 0x268 <__stack+0x9>
				data |= (1<<x);
 25a:	ba 01       	movw	r22, r20
 25c:	08 2e       	mov	r0, r24
 25e:	01 c0       	rjmp	.+2      	; 0x262 <__stack+0x3>
 260:	66 0f       	add	r22, r22
 262:	0a 94       	dec	r0
 264:	ea f7       	brpl	.-6      	; 0x260 <__stack+0x1>
 266:	26 2b       	or	r18, r22
 268:	01 97       	sbiw	r24, 0x01	; 1
 26a:	88 f7       	brcc	.-30     	; 0x24e <gba_eeprom_read+0x2e>
			}
		}
		eepromBuffer[c] = data;
 26c:	21 93       	st	Z+, r18
		asm ("nop");
		asm ("nop");
	}
	
	// Read out 64 bits
	for (uint8_t c = 0; c < 8; c++) {
 26e:	3e 13       	cpse	r19, r30
 270:	eb cf       	rjmp	.-42     	; 0x248 <gba_eeprom_read+0x28>
			}
		}
		eepromBuffer[c] = data;
	}
	
	cs_mreqPin_high;
 272:	94 9a       	sbi	0x12, 4	; 18
	
	// Set AD0 pin as output
	GBA_PORT_EEPROM_DATA7_0 |= (1<<AD0);
 274:	c0 9a       	sbi	0x18, 0	; 24
	GBA_DDR_EEPROM_DATA7_0 |= (1<<AD0);
 276:	b8 9a       	sbi	0x17, 0	; 23
 278:	08 95       	ret

0000027a <gba_eeprom_write>:
}

// Write 8 bytes to the EEPROM address
void gba_eeprom_write(uint16_t address, uint8_t eepromSize) {
	gba_eeprom_set_address(address, eepromSize, EEPROM_WRITE);
 27a:	41 e0       	ldi	r20, 0x01	; 1
 27c:	9d df       	rcall	.-198    	; 0x1b8 <gba_eeprom_set_address>
 27e:	e4 ee       	ldi	r30, 0xE4	; 228
 280:	f0 e0       	ldi	r31, 0x00	; 0
 282:	48 e0       	ldi	r20, 0x08	; 8
 284:	4e 0f       	add	r20, r30
	GBA_PORT_EEPROM_DATA7_0 |= (1<<AD0);
	GBA_DDR_EEPROM_DATA7_0 |= (1<<AD0);
}

// Write 8 bytes to the EEPROM address
void gba_eeprom_write(uint16_t address, uint8_t eepromSize) {
 286:	27 e0       	ldi	r18, 0x07	; 7
 288:	30 e0       	ldi	r19, 0x00	; 0
	gba_eeprom_set_address(address, eepromSize, EEPROM_WRITE);
	
	// Write 64 bits
	for (uint8_t c = 0; c < 8; c++) {
		for (int8_t x = 7; x >= 0; x--) {
			if (eepromBuffer[c] & (1<<x)) {
 28a:	80 81       	ld	r24, Z
 28c:	90 e0       	ldi	r25, 0x00	; 0
 28e:	02 2e       	mov	r0, r18
 290:	02 c0       	rjmp	.+4      	; 0x296 <gba_eeprom_write+0x1c>
 292:	95 95       	asr	r25
 294:	87 95       	ror	r24
 296:	0a 94       	dec	r0
 298:	e2 f7       	brpl	.-8      	; 0x292 <gba_eeprom_write+0x18>
 29a:	80 ff       	sbrs	r24, 0
 29c:	02 c0       	rjmp	.+4      	; 0x2a2 <gba_eeprom_write+0x28>
				ad0Pin_high;
 29e:	c0 9a       	sbi	0x18, 0	; 24
 2a0:	01 c0       	rjmp	.+2      	; 0x2a4 <gba_eeprom_write+0x2a>
			}
			else {
				ad0Pin_low;
 2a2:	c0 98       	cbi	0x18, 0	; 24
			}
			
			wrPin_low; // CLK
 2a4:	96 98       	cbi	0x12, 6	; 18
			asm ("nop");
 2a6:	00 00       	nop
			asm ("nop");
 2a8:	00 00       	nop
			wrPin_high; 
 2aa:	96 9a       	sbi	0x12, 6	; 18
			asm ("nop");
 2ac:	00 00       	nop
			asm ("nop");
 2ae:	00 00       	nop
 2b0:	21 50       	subi	r18, 0x01	; 1
 2b2:	31 09       	sbc	r19, r1
 2b4:	50 f7       	brcc	.-44     	; 0x28a <gba_eeprom_write+0x10>
 2b6:	31 96       	adiw	r30, 0x01	; 1
// Write 8 bytes to the EEPROM address
void gba_eeprom_write(uint16_t address, uint8_t eepromSize) {
	gba_eeprom_set_address(address, eepromSize, EEPROM_WRITE);
	
	// Write 64 bits
	for (uint8_t c = 0; c < 8; c++) {
 2b8:	4e 13       	cpse	r20, r30
 2ba:	e5 cf       	rjmp	.-54     	; 0x286 <gba_eeprom_write+0xc>
			asm ("nop");
		}
	}
	
	// Last bit low
	ad0Pin_low;
 2bc:	c0 98       	cbi	0x18, 0	; 24
	wrPin_low; // CLK
 2be:	96 98       	cbi	0x12, 6	; 18
	asm ("nop");
 2c0:	00 00       	nop
	asm ("nop");
 2c2:	00 00       	nop
	wrPin_high; 
 2c4:	96 9a       	sbi	0x12, 6	; 18
	asm ("nop");
 2c6:	00 00       	nop
	asm ("nop");
 2c8:	00 00       	nop
	
	cs_mreqPin_high;
 2ca:	94 9a       	sbi	0x12, 4	; 18
 2cc:	08 95       	ret

000002ce <flash_write_bus_cycle>:


// ---------- FLASH ----------

// Set the address and data for the write byte cycle to the flash
void flash_write_bus_cycle(uint16_t address, uint8_t data) {
 2ce:	cf 93       	push	r28
 2d0:	df 93       	push	r29
 2d2:	1f 92       	push	r1
 2d4:	cd b7       	in	r28, 0x3d	; 61
 2d6:	de b7       	in	r29, 0x3e	; 62
	GBA_DDR_RAM_DATA7_0 = 0xFF; // Set data pins as outputs
 2d8:	2f ef       	ldi	r18, 0xFF	; 255
 2da:	24 bb       	out	0x14, r18	; 20
	set_16bit_address(address);
 2dc:	69 83       	std	Y+1, r22	; 0x01
 2de:	ed de       	rcall	.-550    	; 0xba <set_16bit_address>
	GBA_PORT_RAM_DATA7_0 = data;
 2e0:	69 81       	ldd	r22, Y+1	; 0x01
 2e2:	65 bb       	out	0x15, r22	; 21
	
	wrPin_low;
 2e4:	96 98       	cbi	0x12, 6	; 18
	cs2Pin_low;
 2e6:	3a 98       	cbi	0x07, 2	; 7
	asm volatile("nop");
 2e8:	00 00       	nop
	wrPin_high;
 2ea:	96 9a       	sbi	0x12, 6	; 18
	cs2Pin_high;
 2ec:	3a 9a       	sbi	0x07, 2	; 7
}
 2ee:	0f 90       	pop	r0
 2f0:	df 91       	pop	r29
 2f2:	cf 91       	pop	r28
 2f4:	08 95       	ret

000002f6 <flash_read_chip_id>:

// Read the flash manufacturer and device ID (Software ID)
void flash_read_chip_id(void) {
 2f6:	cf 93       	push	r28
 2f8:	df 93       	push	r29
	flash_write_bus_cycle(0x5555, 0xAA);
 2fa:	6a ea       	ldi	r22, 0xAA	; 170
 2fc:	85 e5       	ldi	r24, 0x55	; 85
 2fe:	95 e5       	ldi	r25, 0x55	; 85
 300:	e6 df       	rcall	.-52     	; 0x2ce <flash_write_bus_cycle>
	flash_write_bus_cycle(0x2AAA, 0x55);
 302:	65 e5       	ldi	r22, 0x55	; 85
 304:	8a ea       	ldi	r24, 0xAA	; 170
 306:	9a e2       	ldi	r25, 0x2A	; 42
 308:	e2 df       	rcall	.-60     	; 0x2ce <flash_write_bus_cycle>
	flash_write_bus_cycle(0x5555, 0x90); // Software ID entry
 30a:	60 e9       	ldi	r22, 0x90	; 144
 30c:	85 e5       	ldi	r24, 0x55	; 85
 30e:	95 e5       	ldi	r25, 0x55	; 85
 310:	de df       	rcall	.-68     	; 0x2ce <flash_write_bus_cycle>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 312:	8f e3       	ldi	r24, 0x3F	; 63
 314:	9c e9       	ldi	r25, 0x9C	; 156
 316:	01 97       	sbiw	r24, 0x01	; 1
 318:	f1 f7       	brne	.-4      	; 0x316 <flash_read_chip_id+0x20>
 31a:	00 c0       	rjmp	.+0      	; 0x31c <flash_read_chip_id+0x26>
 31c:	00 00       	nop
	_delay_ms(20); // Wait a little (for Atmel chip)
	
	// Set data as inputs
	GBA_PORT_RAM_DATA7_0 = 0;
 31e:	15 ba       	out	0x15, r1	; 21
	GBA_DDR_RAM_DATA7_0 = 0;
 320:	14 ba       	out	0x14, r1	; 20
	
	// Read and transmit the 2 bytes
	flashChipIdBuffer[0] = gba_read_ram_8bit_data(0x0000);
 322:	80 e0       	ldi	r24, 0x00	; 0
 324:	90 e0       	ldi	r25, 0x00	; 0
 326:	1f df       	rcall	.-450    	; 0x166 <gba_read_ram_8bit_data>
 328:	c0 e6       	ldi	r28, 0x60	; 96
 32a:	d0 e0       	ldi	r29, 0x00	; 0
 32c:	88 83       	st	Y, r24
	flashChipIdBuffer[1] = gba_read_ram_8bit_data(0x0001);
 32e:	81 e0       	ldi	r24, 0x01	; 1
 330:	90 e0       	ldi	r25, 0x00	; 0
 332:	19 df       	rcall	.-462    	; 0x166 <gba_read_ram_8bit_data>
 334:	89 83       	std	Y+1, r24	; 0x01
	
	flash_write_bus_cycle(0x5555, 0xAA);
 336:	6a ea       	ldi	r22, 0xAA	; 170
 338:	85 e5       	ldi	r24, 0x55	; 85
 33a:	95 e5       	ldi	r25, 0x55	; 85
 33c:	c8 df       	rcall	.-112    	; 0x2ce <flash_write_bus_cycle>
	flash_write_bus_cycle(0x2AAA, 0x55);
 33e:	65 e5       	ldi	r22, 0x55	; 85
 340:	8a ea       	ldi	r24, 0xAA	; 170
 342:	9a e2       	ldi	r25, 0x2A	; 42
 344:	c4 df       	rcall	.-120    	; 0x2ce <flash_write_bus_cycle>
	flash_write_bus_cycle(0x5555, 0xF0); // Software ID exit
 346:	60 ef       	ldi	r22, 0xF0	; 240
 348:	85 e5       	ldi	r24, 0x55	; 85
 34a:	95 e5       	ldi	r25, 0x55	; 85
 34c:	c0 df       	rcall	.-128    	; 0x2ce <flash_write_bus_cycle>
 34e:	8f e3       	ldi	r24, 0x3F	; 63
 350:	9c e9       	ldi	r25, 0x9C	; 156
 352:	01 97       	sbiw	r24, 0x01	; 1
 354:	f1 f7       	brne	.-4      	; 0x352 <flash_read_chip_id+0x5c>
 356:	00 c0       	rjmp	.+0      	; 0x358 <flash_read_chip_id+0x62>
 358:	00 00       	nop
	_delay_ms(20); // Wait a little (for Atmel chip)
}
 35a:	df 91       	pop	r29
 35c:	cf 91       	pop	r28
 35e:	08 95       	ret

00000360 <flash_switch_bank>:

// Switch banks on the Flash
void flash_switch_bank(uint8_t bank) {
 360:	cf 93       	push	r28
 362:	c8 2f       	mov	r28, r24
	flash_write_bus_cycle(0x5555, 0xAA);
 364:	6a ea       	ldi	r22, 0xAA	; 170
 366:	85 e5       	ldi	r24, 0x55	; 85
 368:	95 e5       	ldi	r25, 0x55	; 85
 36a:	b1 df       	rcall	.-158    	; 0x2ce <flash_write_bus_cycle>
	flash_write_bus_cycle(0x2AAA, 0x55);
 36c:	65 e5       	ldi	r22, 0x55	; 85
 36e:	8a ea       	ldi	r24, 0xAA	; 170
 370:	9a e2       	ldi	r25, 0x2A	; 42
 372:	ad df       	rcall	.-166    	; 0x2ce <flash_write_bus_cycle>
	
	flash_write_bus_cycle(0x5555, 0xB0);
 374:	60 eb       	ldi	r22, 0xB0	; 176
 376:	85 e5       	ldi	r24, 0x55	; 85
 378:	95 e5       	ldi	r25, 0x55	; 85
 37a:	a9 df       	rcall	.-174    	; 0x2ce <flash_write_bus_cycle>
	flash_write_bus_cycle(0x0000, bank);
 37c:	6c 2f       	mov	r22, r28
 37e:	80 e0       	ldi	r24, 0x00	; 0
 380:	90 e0       	ldi	r25, 0x00	; 0
}
 382:	cf 91       	pop	r28
void flash_switch_bank(uint8_t bank) {
	flash_write_bus_cycle(0x5555, 0xAA);
	flash_write_bus_cycle(0x2AAA, 0x55);
	
	flash_write_bus_cycle(0x5555, 0xB0);
	flash_write_bus_cycle(0x0000, bank);
 384:	a4 cf       	rjmp	.-184    	; 0x2ce <flash_write_bus_cycle>

00000386 <flash_erase_4k_sector>:
}

// Erase 4K sector on Flash, expects first sector to start at 0, left shifts by 12 (A15-A12 to select sector for 512Kbit)
// Takes 25ms after last command to erase sector
void flash_erase_4k_sector(uint8_t sector) {
 386:	cf 93       	push	r28
 388:	c8 2f       	mov	r28, r24
	flash_write_bus_cycle(0x5555, 0xAA);
 38a:	6a ea       	ldi	r22, 0xAA	; 170
 38c:	85 e5       	ldi	r24, 0x55	; 85
 38e:	95 e5       	ldi	r25, 0x55	; 85
 390:	9e df       	rcall	.-196    	; 0x2ce <flash_write_bus_cycle>
	flash_write_bus_cycle(0x2AAA, 0x55);
 392:	65 e5       	ldi	r22, 0x55	; 85
 394:	8a ea       	ldi	r24, 0xAA	; 170
 396:	9a e2       	ldi	r25, 0x2A	; 42
 398:	9a df       	rcall	.-204    	; 0x2ce <flash_write_bus_cycle>
	flash_write_bus_cycle(0x5555, 0x80);
 39a:	60 e8       	ldi	r22, 0x80	; 128
 39c:	85 e5       	ldi	r24, 0x55	; 85
 39e:	95 e5       	ldi	r25, 0x55	; 85
 3a0:	96 df       	rcall	.-212    	; 0x2ce <flash_write_bus_cycle>
	flash_write_bus_cycle(0x5555, 0xAA);
 3a2:	6a ea       	ldi	r22, 0xAA	; 170
 3a4:	85 e5       	ldi	r24, 0x55	; 85
 3a6:	95 e5       	ldi	r25, 0x55	; 85
 3a8:	92 df       	rcall	.-220    	; 0x2ce <flash_write_bus_cycle>
	flash_write_bus_cycle(0x2AAA, 0x55);
 3aa:	65 e5       	ldi	r22, 0x55	; 85
 3ac:	8a ea       	ldi	r24, 0xAA	; 170
 3ae:	9a e2       	ldi	r25, 0x2A	; 42
 3b0:	8e df       	rcall	.-228    	; 0x2ce <flash_write_bus_cycle>
	
	flash_write_bus_cycle((uint16_t) sector << 12, 0x30);
 3b2:	60 e3       	ldi	r22, 0x30	; 48
 3b4:	80 e0       	ldi	r24, 0x00	; 0
 3b6:	9c 2f       	mov	r25, r28
 3b8:	92 95       	swap	r25
 3ba:	90 7f       	andi	r25, 0xF0	; 240
 3bc:	88 df       	rcall	.-240    	; 0x2ce <flash_write_bus_cycle>
 3be:	8f e4       	ldi	r24, 0x4F	; 79
 3c0:	93 ec       	ldi	r25, 0xC3	; 195
 3c2:	01 97       	sbiw	r24, 0x01	; 1
 3c4:	f1 f7       	brne	.-4      	; 0x3c2 <flash_erase_4k_sector+0x3c>
 3c6:	00 c0       	rjmp	.+0      	; 0x3c8 <flash_erase_4k_sector+0x42>
 3c8:	00 00       	nop
	_delay_ms(25); // Wait 25ms for sector erase
}
 3ca:	cf 91       	pop	r28
 3cc:	08 95       	ret

000003ce <flash_write_byte>:

// Write a single byte to the Flash address
// Takes 20us to program Flash
void flash_write_byte(uint16_t address, uint8_t data) {
 3ce:	1f 93       	push	r17
 3d0:	cf 93       	push	r28
 3d2:	df 93       	push	r29
 3d4:	ec 01       	movw	r28, r24
 3d6:	16 2f       	mov	r17, r22
	flash_write_bus_cycle(0x5555, 0xAA);
 3d8:	6a ea       	ldi	r22, 0xAA	; 170
 3da:	85 e5       	ldi	r24, 0x55	; 85
 3dc:	95 e5       	ldi	r25, 0x55	; 85
 3de:	77 df       	rcall	.-274    	; 0x2ce <flash_write_bus_cycle>
	flash_write_bus_cycle(0x2AAA, 0x55);
 3e0:	65 e5       	ldi	r22, 0x55	; 85
 3e2:	8a ea       	ldi	r24, 0xAA	; 170
 3e4:	9a e2       	ldi	r25, 0x2A	; 42
 3e6:	73 df       	rcall	.-282    	; 0x2ce <flash_write_bus_cycle>
	flash_write_bus_cycle(0x5555, 0xA0);
 3e8:	60 ea       	ldi	r22, 0xA0	; 160
 3ea:	85 e5       	ldi	r24, 0x55	; 85
 3ec:	95 e5       	ldi	r25, 0x55	; 85
 3ee:	6f df       	rcall	.-290    	; 0x2ce <flash_write_bus_cycle>
	
	flash_write_bus_cycle(address, data);
 3f0:	61 2f       	mov	r22, r17
 3f2:	ce 01       	movw	r24, r28
 3f4:	6c df       	rcall	.-296    	; 0x2ce <flash_write_bus_cycle>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 3f6:	85 e3       	ldi	r24, 0x35	; 53
 3f8:	8a 95       	dec	r24
 3fa:	f1 f7       	brne	.-4      	; 0x3f8 <flash_write_byte+0x2a>
 3fc:	00 00       	nop
	_delay_us(20); // Wait byte program time
}
 3fe:	df 91       	pop	r29
 400:	cf 91       	pop	r28
 402:	1f 91       	pop	r17
 404:	08 95       	ret

00000406 <flash_write_sector>:

// Write a sector (128 bytes) to the Atmel flash
// Takes 20ms for write cycle
void flash_write_sector(uint16_t sector) {
 406:	ef 92       	push	r14
 408:	ff 92       	push	r15
 40a:	0f 93       	push	r16
 40c:	1f 93       	push	r17
 40e:	cf 93       	push	r28
 410:	df 93       	push	r29
 412:	8c 01       	movw	r16, r24
	flash_write_bus_cycle(0x5555, 0xAA);
 414:	6a ea       	ldi	r22, 0xAA	; 170
 416:	85 e5       	ldi	r24, 0x55	; 85
 418:	95 e5       	ldi	r25, 0x55	; 85
 41a:	59 df       	rcall	.-334    	; 0x2ce <flash_write_bus_cycle>
	flash_write_bus_cycle(0x2AAA, 0x55);
 41c:	65 e5       	ldi	r22, 0x55	; 85
 41e:	8a ea       	ldi	r24, 0xAA	; 170
 420:	9a e2       	ldi	r25, 0x2A	; 42
 422:	55 df       	rcall	.-342    	; 0x2ce <flash_write_bus_cycle>
	flash_write_bus_cycle(0x5555, 0xA0);
 424:	60 ea       	ldi	r22, 0xA0	; 160
 426:	85 e5       	ldi	r24, 0x55	; 85
 428:	95 e5       	ldi	r25, 0x55	; 85
 42a:	51 df       	rcall	.-350    	; 0x2ce <flash_write_bus_cycle>
	
	// Write the bytes (A0-A6 byte address, A7-A15 sector address)
	for (uint8_t x = 0; x < 128; x++) {
		flash_write_bus_cycle((uint16_t) (sector << 7) | (uint16_t) x, receivedBuffer[x]);
 42c:	16 95       	lsr	r17
 42e:	10 2f       	mov	r17, r16
 430:	00 27       	eor	r16, r16
 432:	17 95       	ror	r17
 434:	07 95       	ror	r16
 436:	92 e6       	ldi	r25, 0x62	; 98
 438:	e9 2e       	mov	r14, r25
 43a:	90 e0       	ldi	r25, 0x00	; 0
 43c:	f9 2e       	mov	r15, r25
 43e:	c0 e0       	ldi	r28, 0x00	; 0
 440:	d0 e0       	ldi	r29, 0x00	; 0
 442:	f7 01       	movw	r30, r14
 444:	61 91       	ld	r22, Z+
 446:	7f 01       	movw	r14, r30
 448:	ce 01       	movw	r24, r28
 44a:	80 2b       	or	r24, r16
 44c:	91 2b       	or	r25, r17
 44e:	3f df       	rcall	.-386    	; 0x2ce <flash_write_bus_cycle>
 450:	21 96       	adiw	r28, 0x01	; 1
	flash_write_bus_cycle(0x5555, 0xAA);
	flash_write_bus_cycle(0x2AAA, 0x55);
	flash_write_bus_cycle(0x5555, 0xA0);
	
	// Write the bytes (A0-A6 byte address, A7-A15 sector address)
	for (uint8_t x = 0; x < 128; x++) {
 452:	c0 38       	cpi	r28, 0x80	; 128
 454:	d1 05       	cpc	r29, r1
 456:	a9 f7       	brne	.-22     	; 0x442 <flash_write_sector+0x3c>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 458:	8f e3       	ldi	r24, 0x3F	; 63
 45a:	9c e9       	ldi	r25, 0x9C	; 156
 45c:	01 97       	sbiw	r24, 0x01	; 1
 45e:	f1 f7       	brne	.-4      	; 0x45c <flash_write_sector+0x56>
 460:	00 c0       	rjmp	.+0      	; 0x462 <flash_write_sector+0x5c>
 462:	00 00       	nop
		flash_write_bus_cycle((uint16_t) (sector << 7) | (uint16_t) x, receivedBuffer[x]);
	}
	_delay_ms(20); // Wait sector program time
}
 464:	df 91       	pop	r29
 466:	cf 91       	pop	r28
 468:	1f 91       	pop	r17
 46a:	0f 91       	pop	r16
 46c:	ff 90       	pop	r15
 46e:	ef 90       	pop	r14
 470:	08 95       	ret

00000472 <audio_flash_write_bus_cycle>:


// ---------- FLASH CARTS ----------

// 32K Audio WE - Set the address and data for the write byte cycle to the flash (pulsing audio pin)
void audio_flash_write_bus_cycle(uint16_t address, uint8_t data) {
 472:	cf 93       	push	r28
 474:	df 93       	push	r29
 476:	1f 92       	push	r1
 478:	cd b7       	in	r28, 0x3d	; 61
 47a:	de b7       	in	r29, 0x3e	; 62
	GBA_DDR_RAM_DATA7_0 = 0xFF; // Set data pins as outputs
 47c:	2f ef       	ldi	r18, 0xFF	; 255
 47e:	24 bb       	out	0x14, r18	; 20
	set_16bit_address(address);
 480:	69 83       	std	Y+1, r22	; 0x01
 482:	1b de       	rcall	.-970    	; 0xba <set_16bit_address>
	GBA_PORT_RAM_DATA7_0 = data;
 484:	69 81       	ldd	r22, Y+1	; 0x01
 486:	65 bb       	out	0x15, r22	; 21
	
	audioPin_low; // WE low
 488:	39 98       	cbi	0x07, 1	; 7
	asm volatile("nop");
 48a:	00 00       	nop
	asm volatile("nop");
 48c:	00 00       	nop
	asm volatile("nop");
 48e:	00 00       	nop
	audioPin_high; // WE high
 490:	39 9a       	sbi	0x07, 1	; 7
}
 492:	0f 90       	pop	r0
 494:	df 91       	pop	r29
 496:	cf 91       	pop	r28
 498:	08 95       	ret

0000049a <audio_flash_write_byte>:

// 32K Audio WE - Write a single byte to the Flash address. Takes 20us to program Flash.
void audio_flash_write_byte(uint16_t address, uint8_t data) {
 49a:	1f 93       	push	r17
 49c:	cf 93       	push	r28
 49e:	df 93       	push	r29
 4a0:	ec 01       	movw	r28, r24
 4a2:	16 2f       	mov	r17, r22
	audio_flash_write_bus_cycle(0x555, 0xAA);
 4a4:	6a ea       	ldi	r22, 0xAA	; 170
 4a6:	85 e5       	ldi	r24, 0x55	; 85
 4a8:	95 e0       	ldi	r25, 0x05	; 5
 4aa:	e3 df       	rcall	.-58     	; 0x472 <audio_flash_write_bus_cycle>
	audio_flash_write_bus_cycle(0x2AA, 0x55);
 4ac:	65 e5       	ldi	r22, 0x55	; 85
 4ae:	8a ea       	ldi	r24, 0xAA	; 170
 4b0:	92 e0       	ldi	r25, 0x02	; 2
 4b2:	df df       	rcall	.-66     	; 0x472 <audio_flash_write_bus_cycle>
	audio_flash_write_bus_cycle(0x555, 0xA0);
 4b4:	60 ea       	ldi	r22, 0xA0	; 160
 4b6:	85 e5       	ldi	r24, 0x55	; 85
 4b8:	95 e0       	ldi	r25, 0x05	; 5
 4ba:	db df       	rcall	.-74     	; 0x472 <audio_flash_write_bus_cycle>
	audio_flash_write_bus_cycle(address, data);
 4bc:	61 2f       	mov	r22, r17
 4be:	ce 01       	movw	r24, r28
 4c0:	d8 df       	rcall	.-80     	; 0x472 <audio_flash_write_bus_cycle>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 4c2:	85 e3       	ldi	r24, 0x35	; 53
 4c4:	8a 95       	dec	r24
 4c6:	f1 f7       	brne	.-4      	; 0x4c4 <audio_flash_write_byte+0x2a>
 4c8:	00 00       	nop
	_delay_us(20); // Wait byte program time
}
 4ca:	df 91       	pop	r29
 4cc:	cf 91       	pop	r28
 4ce:	1f 91       	pop	r17
 4d0:	08 95       	ret

000004d2 <bv5_flash_write_bus_cycle>:

// BV5 - Set the address and data for the write byte cycle to the flash (pulsing WR pin)
void bv5_flash_write_bus_cycle(uint16_t address, uint8_t data) {
 4d2:	cf 93       	push	r28
 4d4:	df 93       	push	r29
 4d6:	1f 92       	push	r1
 4d8:	cd b7       	in	r28, 0x3d	; 61
 4da:	de b7       	in	r29, 0x3e	; 62
	GBA_DDR_RAM_DATA7_0 = 0xFF; // Set data pins as outputs
 4dc:	2f ef       	ldi	r18, 0xFF	; 255
 4de:	24 bb       	out	0x14, r18	; 20
	set_16bit_address(address);
 4e0:	69 83       	std	Y+1, r22	; 0x01
 4e2:	eb dd       	rcall	.-1066   	; 0xba <set_16bit_address>
	GBA_PORT_RAM_DATA7_0 = data;
 4e4:	69 81       	ldd	r22, Y+1	; 0x01
 4e6:	65 bb       	out	0x15, r22	; 21
	
	wrPin_low;
 4e8:	96 98       	cbi	0x12, 6	; 18
	asm volatile("nop");
 4ea:	00 00       	nop
	asm volatile("nop");
 4ec:	00 00       	nop
	asm volatile("nop");
 4ee:	00 00       	nop
	wrPin_high;
 4f0:	96 9a       	sbi	0x12, 6	; 18
}
 4f2:	0f 90       	pop	r0
 4f4:	df 91       	pop	r29
 4f6:	cf 91       	pop	r28
 4f8:	08 95       	ret

000004fa <bv5_flash_write_byte>:

// BV5 - Write a single byte to the Flash address. Time to wait depends on Flash.
// (data byte's bit 0 & 1 are swapped for chip commands as D0 & D1 lines are swapped)
void bv5_flash_write_byte(uint16_t address, uint8_t data) {
 4fa:	1f 93       	push	r17
 4fc:	cf 93       	push	r28
 4fe:	df 93       	push	r29
 500:	ec 01       	movw	r28, r24
 502:	16 2f       	mov	r17, r22
	bv5_flash_write_bus_cycle(0xAAA, 0xA9);
 504:	69 ea       	ldi	r22, 0xA9	; 169
 506:	8a ea       	ldi	r24, 0xAA	; 170
 508:	9a e0       	ldi	r25, 0x0A	; 10
 50a:	e3 df       	rcall	.-58     	; 0x4d2 <bv5_flash_write_bus_cycle>
	bv5_flash_write_bus_cycle(0x555, 0x56);
 50c:	66 e5       	ldi	r22, 0x56	; 86
 50e:	85 e5       	ldi	r24, 0x55	; 85
 510:	95 e0       	ldi	r25, 0x05	; 5
 512:	df df       	rcall	.-66     	; 0x4d2 <bv5_flash_write_bus_cycle>
	bv5_flash_write_bus_cycle(0xAAA, 0xA0);
 514:	60 ea       	ldi	r22, 0xA0	; 160
 516:	8a ea       	ldi	r24, 0xAA	; 170
 518:	9a e0       	ldi	r25, 0x0A	; 10
 51a:	db df       	rcall	.-74     	; 0x4d2 <bv5_flash_write_bus_cycle>
	bv5_flash_write_bus_cycle(address, data);
 51c:	61 2f       	mov	r22, r17
 51e:	ce 01       	movw	r24, r28
 520:	d8 df       	rcall	.-80     	; 0x4d2 <bv5_flash_write_bus_cycle>
 522:	85 e3       	ldi	r24, 0x35	; 53
 524:	8a 95       	dec	r24
 526:	f1 f7       	brne	.-4      	; 0x524 <bv5_flash_write_byte+0x2a>
 528:	00 00       	nop
	_delay_us(20); // Wait byte program time
}
 52a:	df 91       	pop	r29
 52c:	cf 91       	pop	r28
 52e:	1f 91       	pop	r17
 530:	08 95       	ret

00000532 <setup>:


// Setup
void setup(void) {
	// Turn off watchdog
	MCUCSR &= ~(1<<WDRF);
 532:	84 b7       	in	r24, 0x34	; 52
 534:	87 7f       	andi	r24, 0xF7	; 247
 536:	84 bf       	out	0x34, r24	; 52
	WDTCR = (1<<WDCE) | (1<<WDE);
 538:	88 e1       	ldi	r24, 0x18	; 24
 53a:	81 bd       	out	0x21, r24	; 33
	WDTCR = 0;
 53c:	11 bc       	out	0x21, r1	; 33
	
	// Reset common lines
	rd_wr_csmreq_cs2_reset();
 53e:	b0 dd       	rcall	.-1184   	; 0xa0 <rd_wr_csmreq_cs2_reset>
	
	// Set outputs
	DDRD |= (1<<ACTIVITY_LED) | (1<<WR_PIN) | (1<<RD_PIN) | (1<<CS_MREQ_PIN) | (1<<LED_5V);
 540:	81 b3       	in	r24, 0x11	; 17
 542:	88 6f       	ori	r24, 0xF8	; 248
 544:	81 bb       	out	0x11, r24	; 17
	DDRE |= (1<<CS2_PIN) | (1<<LED_3V);
 546:	86 b1       	in	r24, 0x06	; 6
 548:	85 60       	ori	r24, 0x05	; 5
 54a:	86 b9       	out	0x06, r24	; 6
	
	// Set all pins as inputs
	PORT_DATA7_0 = 0;
 54c:	15 ba       	out	0x15, r1	; 21
	DDR_DATA7_0 = 0;
 54e:	14 ba       	out	0x14, r1	; 20
	PORT_ADDR7_0 = 0;
 550:	18 ba       	out	0x18, r1	; 24
	DDR_ADDR7_0 = 0;
 552:	17 ba       	out	0x17, r1	; 23
	PORT_ADDR15_8 = 0;
 554:	1b ba       	out	0x1b, r1	; 27
	DDR_ADDR15_8 = 0;
 556:	1a ba       	out	0x1a, r1	; 26
	
	// Light up 3.3V or 5V
	if (PIND & (1<<SWITCH_DETECT)) {
 558:	82 9b       	sbis	0x10, 2	; 16
 55a:	03 c0       	rjmp	.+6      	; 0x562 <setup+0x30>
		PORTD |= (1<<LED_5V);
 55c:	97 9a       	sbi	0x12, 7	; 18
		PORTE &= ~(1<<LED_3V);
 55e:	38 98       	cbi	0x07, 0	; 7
 560:	02 c0       	rjmp	.+4      	; 0x566 <setup+0x34>
	}
	else {
		PORTE |= (1<<LED_3V);
 562:	38 9a       	sbi	0x07, 0	; 7
		PORTD &= ~(1<<LED_5V);
 564:	97 98       	cbi	0x12, 7	; 18
	}
	
	// Light LED
	PORTD |= (1<<ACTIVITY_LED);
 566:	93 9a       	sbi	0x12, 3	; 18
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 568:	2f ef       	ldi	r18, 0xFF	; 255
 56a:	84 e3       	ldi	r24, 0x34	; 52
 56c:	9c e0       	ldi	r25, 0x0C	; 12
 56e:	21 50       	subi	r18, 0x01	; 1
 570:	80 40       	sbci	r24, 0x00	; 0
 572:	90 40       	sbci	r25, 0x00	; 0
 574:	e1 f7       	brne	.-8      	; 0x56e <setup+0x3c>
 576:	00 c0       	rjmp	.+0      	; 0x578 <setup+0x46>
 578:	00 00       	nop
	_delay_ms(500);
	PORTD &= ~(1<<ACTIVITY_LED);
 57a:	93 98       	cbi	0x12, 3	; 18
	
	// Setup USART
	UBRRL = 0; // 1Mbps Baud rate
 57c:	19 b8       	out	0x09, r1	; 9
	sbi(UCSRA, U2X); // Double rate
 57e:	59 9a       	sbi	0x0b, 1	; 11
	sbi(UCSRB, TXEN); // Transmitter enable
 580:	53 9a       	sbi	0x0a, 3	; 10
	sbi(UCSRB, RXEN); // Receiver enable
 582:	54 9a       	sbi	0x0a, 4	; 10
	
	// Turn on interrupts
	sei();
 584:	78 94       	sei
 586:	08 95       	ret

00000588 <main>:
#include <stdlib.h>
#include <string.h>
#include "setup.c" // See defines, variables, constants, functions here


int main(void) {
 588:	cf 93       	push	r28
 58a:	df 93       	push	r29
 58c:	00 d0       	rcall	.+0      	; 0x58e <main+0x6>
 58e:	1f 92       	push	r1
 590:	cd b7       	in	r28, 0x3d	; 61
 592:	de b7       	in	r29, 0x3e	; 62
	setup();
 594:	ce df       	rcall	.-100    	; 0x532 <setup>
	
	uint32_t address = 0;
	uint8_t eepromSize = EEPROM_4KBIT;
	uint8_t cartMode = GB_MODE;
	uint8_t resetCommonLines = 1;
 596:	21 e0       	ldi	r18, 0x01	; 1
 598:	29 83       	std	Y+1, r18	; 0x01

int main(void) {
	setup();
	
	uint32_t address = 0;
	uint8_t eepromSize = EEPROM_4KBIT;
 59a:	01 e0       	ldi	r16, 0x01	; 1


int main(void) {
	setup();
	
	uint32_t address = 0;
 59c:	c1 2c       	mov	r12, r1
 59e:	d1 2c       	mov	r13, r1
 5a0:	76 01       	movw	r14, r12
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
 5a2:	aa 24       	eor	r10, r10
 5a4:	aa 94       	dec	r10
 5a6:	ba 2c       	mov	r11, r10
 5a8:	82 e6       	ldi	r24, 0x62	; 98
 5aa:	90 e0       	ldi	r25, 0x00	; 0
 5ac:	20 e4       	ldi	r18, 0x40	; 64
 5ae:	28 0f       	add	r18, r24
 5b0:	2a 83       	std	Y+2, r18	; 0x02
 5b2:	84 ee       	ldi	r24, 0xE4	; 228
 5b4:	90 e0       	ldi	r25, 0x00	; 0
 5b6:	18 e0       	ldi	r17, 0x08	; 8
 5b8:	18 0f       	add	r17, r24
	uint8_t eepromSize = EEPROM_4KBIT;
	uint8_t cartMode = GB_MODE;
	uint8_t resetCommonLines = 1;
	
	while(1) {
		if (resetCommonLines == 1) {
 5ba:	29 81       	ldd	r18, Y+1	; 0x01
 5bc:	21 30       	cpi	r18, 0x01	; 1
 5be:	09 f4       	brne	.+2      	; 0x5c2 <main+0x3a>
			rd_wr_csmreq_cs2_reset();
 5c0:	6f dd       	rcall	.-1314   	; 0xa0 <rd_wr_csmreq_cs2_reset>
		}
		receivedChar = USART_Receive(); // Wait for 1 byte of data
 5c2:	40 dd       	rcall	.-1408   	; 0x44 <USART_Receive>
 5c4:	80 93 e3 00 	sts	0x00E3, r24	; 0x8000e3 <receivedChar>
		
		// Read the pin to find out which mode we are in, if it reads high, we are powered by 5V
		if (PIND & (1<<SWITCH_DETECT)) {
 5c8:	82 9b       	sbis	0x10, 2	; 16
 5ca:	04 c0       	rjmp	.+8      	; 0x5d4 <main+0x4c>
			cartMode = GB_MODE;
			PORTD |= (1<<LED_5V);
 5cc:	97 9a       	sbi	0x12, 7	; 18
			PORTE &= ~(1<<LED_3V);
 5ce:	38 98       	cbi	0x07, 0	; 7
		}
		receivedChar = USART_Receive(); // Wait for 1 byte of data
		
		// Read the pin to find out which mode we are in, if it reads high, we are powered by 5V
		if (PIND & (1<<SWITCH_DETECT)) {
			cartMode = GB_MODE;
 5d0:	81 e0       	ldi	r24, 0x01	; 1
 5d2:	03 c0       	rjmp	.+6      	; 0x5da <main+0x52>
			PORTD |= (1<<LED_5V);
			PORTE &= ~(1<<LED_3V);
		}
		else {
			cartMode = GBA_MODE;
			PORTE |= (1<<LED_3V);
 5d4:	38 9a       	sbi	0x07, 0	; 7
			PORTD &= ~(1<<LED_5V);
 5d6:	97 98       	cbi	0x12, 7	; 18
			cartMode = GB_MODE;
			PORTD |= (1<<LED_5V);
			PORTE &= ~(1<<LED_3V);
		}
		else {
			cartMode = GBA_MODE;
 5d8:	82 e0       	ldi	r24, 0x02	; 2
			PORTE |= (1<<LED_3V);
			PORTD &= ~(1<<LED_5V);
		}
		
		// Return the cart mode in use
		if (receivedChar == CART_MODE) {
 5da:	90 91 e3 00 	lds	r25, 0x00E3	; 0x8000e3 <receivedChar>
 5de:	93 34       	cpi	r25, 0x43	; 67
 5e0:	09 f4       	brne	.+2      	; 0x5e4 <main+0x5c>
 5e2:	b7 c2       	rjmp	.+1390   	; 0xb52 <main+0x5ca>
			USART_Transmit(cartMode);
		}
		
		// Change to GB mode or GBA mode if requested
		else if (receivedChar == GB_CART_MODE) {
 5e4:	97 34       	cpi	r25, 0x47	; 71
 5e6:	11 f4       	brne	.+4      	; 0x5ec <main+0x64>
			gb_mode();
 5e8:	60 dd       	rcall	.-1344   	; 0xaa <gb_mode>
 5ea:	e7 cf       	rjmp	.-50     	; 0x5ba <main+0x32>
		}
		else if (receivedChar == GBA_CART_MODE) {
 5ec:	97 36       	cpi	r25, 0x67	; 103
 5ee:	09 f4       	brne	.+2      	; 0x5f2 <main+0x6a>
 5f0:	d6 c0       	rjmp	.+428    	; 0x79e <main+0x216>
			gba_mode();
		}
		
		// Set address
		else if (receivedChar == SET_START_ADDRESS) {
 5f2:	91 34       	cpi	r25, 0x41	; 65
 5f4:	59 f4       	brne	.+22     	; 0x60c <main+0x84>
			usart_read_chars(); // Read start address
 5f6:	46 dd       	rcall	.-1396   	; 0x84 <usart_read_chars>
			address = strtol(receivedBuffer, NULL, 16); // Convert address string in hex to dec
 5f8:	40 e1       	ldi	r20, 0x10	; 16
 5fa:	50 e0       	ldi	r21, 0x00	; 0
 5fc:	60 e0       	ldi	r22, 0x00	; 0
 5fe:	70 e0       	ldi	r23, 0x00	; 0
 600:	82 e6       	ldi	r24, 0x62	; 98
 602:	90 e0       	ldi	r25, 0x00	; 0
 604:	c4 d2       	rcall	.+1416   	; 0xb8e <strtol>
 606:	6b 01       	movw	r12, r22
 608:	7c 01       	movw	r14, r24
 60a:	d7 cf       	rjmp	.-82     	; 0x5ba <main+0x32>
		
		
		// ****** Gameboy / Gameboy Colour ******
		
		// Read 64 bytes of ROM/RAM from address (and increment) until anything but 1 is received
		else if (receivedChar == READ_ROM_RAM) {
 60c:	92 35       	cpi	r25, 0x52	; 82
 60e:	f9 f4       	brne	.+62     	; 0x64e <main+0xc6>
			gb_mode();
 610:	4c dd       	rcall	.-1384   	; 0xaa <gb_mode>
			receivedChar = '1';
 612:	81 e3       	ldi	r24, 0x31	; 49
					USART_Transmit(read_8bit_data(address));
					address++;
				}
				
				PORTD &= ~(1<<ACTIVITY_LED);
				receivedChar = USART_Receive();
 614:	80 93 e3 00 	sts	0x00E3, r24	; 0x8000e3 <receivedChar>
		
		// Read 64 bytes of ROM/RAM from address (and increment) until anything but 1 is received
		else if (receivedChar == READ_ROM_RAM) {
			gb_mode();
			receivedChar = '1';
			while (receivedChar == '1') {
 618:	80 91 e3 00 	lds	r24, 0x00E3	; 0x8000e3 <receivedChar>
 61c:	81 33       	cpi	r24, 0x31	; 49
 61e:	69 f6       	brne	.-102    	; 0x5ba <main+0x32>
				PORTD |= (1<<ACTIVITY_LED);
 620:	93 9a       	sbi	0x12, 3	; 18
 622:	81 2c       	mov	r8, r1
 624:	91 2c       	mov	r9, r1
 626:	c4 01       	movw	r24, r8
 628:	8c 0d       	add	r24, r12
 62a:	9d 1d       	adc	r25, r13
				for (uint8_t x = 0; x < 64; x++) {
					USART_Transmit(read_8bit_data(address));
 62c:	49 dd       	rcall	.-1390   	; 0xc0 <read_8bit_data>
 62e:	0e dd       	rcall	.-1508   	; 0x4c <USART_Transmit>
 630:	8f ef       	ldi	r24, 0xFF	; 255
 632:	88 1a       	sub	r8, r24
 634:	98 0a       	sbc	r9, r24
		else if (receivedChar == READ_ROM_RAM) {
			gb_mode();
			receivedChar = '1';
			while (receivedChar == '1') {
				PORTD |= (1<<ACTIVITY_LED);
				for (uint8_t x = 0; x < 64; x++) {
 636:	90 e4       	ldi	r25, 0x40	; 64
 638:	89 16       	cp	r8, r25
 63a:	91 04       	cpc	r9, r1
 63c:	a1 f7       	brne	.-24     	; 0x626 <main+0x9e>
 63e:	e0 e4       	ldi	r30, 0x40	; 64
 640:	ce 0e       	add	r12, r30
 642:	d1 1c       	adc	r13, r1
 644:	e1 1c       	adc	r14, r1
 646:	f1 1c       	adc	r15, r1
					USART_Transmit(read_8bit_data(address));
					address++;
				}
				
				PORTD &= ~(1<<ACTIVITY_LED);
 648:	93 98       	cbi	0x12, 3	; 18
				receivedChar = USART_Receive();
 64a:	fc dc       	rcall	.-1544   	; 0x44 <USART_Receive>
 64c:	e3 cf       	rjmp	.-58     	; 0x614 <main+0x8c>
			}
		}
		
		// Write 64 bytes to RAM on address (and increment)
		else if (receivedChar == WRITE_RAM) {
 64e:	97 35       	cpi	r25, 0x57	; 87
 650:	f9 f4       	brne	.+62     	; 0x690 <main+0x108>
			gb_mode();
 652:	2b dd       	rcall	.-1450   	; 0xaa <gb_mode>
			
			// Read 64 bytes first as CH340G sends them all at once
			usart_read_bytes(64);
 654:	80 e4       	ldi	r24, 0x40	; 64
 656:	fe dc       	rcall	.-1540   	; 0x54 <usart_read_bytes>
			
			PORTD |= (1<<ACTIVITY_LED);
 658:	93 9a       	sbi	0x12, 3	; 18
 65a:	62 e6       	ldi	r22, 0x62	; 98
 65c:	66 2e       	mov	r6, r22
 65e:	60 e0       	ldi	r22, 0x00	; 0
 660:	76 2e       	mov	r7, r22
 662:	81 2c       	mov	r8, r1
 664:	91 2c       	mov	r9, r1
			for (uint8_t x = 0; x < 64; x++) {
				write_8bit_data(address, receivedBuffer[x], MEMORY_WRITE);
 666:	f3 01       	movw	r30, r6
 668:	61 91       	ld	r22, Z+
 66a:	3f 01       	movw	r6, r30
 66c:	c4 01       	movw	r24, r8
 66e:	8c 0d       	add	r24, r12
 670:	9d 1d       	adc	r25, r13
 672:	41 e0       	ldi	r20, 0x01	; 1
 674:	2e dd       	rcall	.-1444   	; 0xd2 <write_8bit_data>
 676:	ff ef       	ldi	r31, 0xFF	; 255
 678:	8f 1a       	sub	r8, r31
 67a:	9f 0a       	sbc	r9, r31
			
			// Read 64 bytes first as CH340G sends them all at once
			usart_read_bytes(64);
			
			PORTD |= (1<<ACTIVITY_LED);
			for (uint8_t x = 0; x < 64; x++) {
 67c:	20 e4       	ldi	r18, 0x40	; 64
 67e:	82 16       	cp	r8, r18
 680:	91 04       	cpc	r9, r1
 682:	89 f7       	brne	.-30     	; 0x666 <main+0xde>
 684:	80 e4       	ldi	r24, 0x40	; 64
 686:	c8 0e       	add	r12, r24
 688:	d1 1c       	adc	r13, r1
 68a:	e1 1c       	adc	r14, r1
 68c:	f1 1c       	adc	r15, r1
 68e:	51 c1       	rjmp	.+674    	; 0x932 <main+0x3aa>
			PORTD &= ~(1<<ACTIVITY_LED);
			USART_Transmit('1'); // Send back acknowledgement
		}
		
		// Set bank address and write a byte
		else if (receivedChar == SET_BANK) {
 690:	92 34       	cpi	r25, 0x42	; 66
 692:	d1 f4       	brne	.+52     	; 0x6c8 <main+0x140>
			gb_mode();
 694:	0a dd       	rcall	.-1516   	; 0xaa <gb_mode>
			
			usart_read_chars(); // Read start address
 696:	f6 dc       	rcall	.-1556   	; 0x84 <usart_read_chars>
			uint16_t bankaddress = strtol(receivedBuffer, NULL, 16); // Convert address string in hex to dec
 698:	40 e1       	ldi	r20, 0x10	; 16
 69a:	50 e0       	ldi	r21, 0x00	; 0
 69c:	60 e0       	ldi	r22, 0x00	; 0
 69e:	70 e0       	ldi	r23, 0x00	; 0
 6a0:	82 e6       	ldi	r24, 0x62	; 98
 6a2:	90 e0       	ldi	r25, 0x00	; 0
 6a4:	74 d2       	rcall	.+1256   	; 0xb8e <strtol>
 6a6:	2b 01       	movw	r4, r22
 6a8:	3c 01       	movw	r6, r24
			
			receivedChar = USART_Receive(); // Wait for bank number
 6aa:	cc dc       	rcall	.-1640   	; 0x44 <USART_Receive>
 6ac:	80 93 e3 00 	sts	0x00E3, r24	; 0x8000e3 <receivedChar>
			if (receivedChar == 'B') {
 6b0:	82 34       	cpi	r24, 0x42	; 66
 6b2:	09 f0       	breq	.+2      	; 0x6b6 <main+0x12e>
 6b4:	82 cf       	rjmp	.-252    	; 0x5ba <main+0x32>
				usart_read_chars(); // Read data
 6b6:	e6 dc       	rcall	.-1588   	; 0x84 <usart_read_chars>
				uint8_t data = atoi(receivedBuffer); // Convert data string to dec
 6b8:	82 e6       	ldi	r24, 0x62	; 98
 6ba:	90 e0       	ldi	r25, 0x00	; 0
 6bc:	74 d3       	rcall	.+1768   	; 0xda6 <atoi>
				
				write_8bit_data(bankaddress, data, BANK_WRITE);
 6be:	40 e0       	ldi	r20, 0x00	; 0
 6c0:	68 2f       	mov	r22, r24
 6c2:	c2 01       	movw	r24, r4
 6c4:	06 dd       	rcall	.-1524   	; 0xd2 <write_8bit_data>
 6c6:	79 cf       	rjmp	.-270    	; 0x5ba <main+0x32>
		
		// ****** Gameboy Advance ******
		
		// ---------- ROM ----------
		// Read one 16bit byte from ROM using address (and increment) until anything but 1 is received
		else if (receivedChar == GBA_READ_ROM) {
 6c8:	92 37       	cpi	r25, 0x72	; 114
 6ca:	31 f5       	brne	.+76     	; 0x718 <main+0x190>
			gba_mode(); 
 6cc:	1f dd       	rcall	.-1474   	; 0x10c <gba_mode>
			
			receivedChar = '1';
 6ce:	81 e3       	ldi	r24, 0x31	; 49
					
					address++;
				}
				
				PORTD &= ~(1<<ACTIVITY_LED);
				receivedChar = USART_Receive();
 6d0:	80 93 e3 00 	sts	0x00E3, r24	; 0x8000e3 <receivedChar>
		// Read one 16bit byte from ROM using address (and increment) until anything but 1 is received
		else if (receivedChar == GBA_READ_ROM) {
			gba_mode(); 
			
			receivedChar = '1';
			while (receivedChar == '1') {
 6d4:	80 91 e3 00 	lds	r24, 0x00E3	; 0x8000e3 <receivedChar>
 6d8:	81 33       	cpi	r24, 0x31	; 49
 6da:	09 f0       	breq	.+2      	; 0x6de <main+0x156>
 6dc:	6e cf       	rjmp	.-292    	; 0x5ba <main+0x32>
				PORTD |= (1<<ACTIVITY_LED);
 6de:	93 9a       	sbi	0x12, 3	; 18
 6e0:	26 01       	movw	r4, r12
 6e2:	37 01       	movw	r6, r14
 6e4:	50 e2       	ldi	r21, 0x20	; 32
 6e6:	95 2e       	mov	r9, r21
 6e8:	9c 0c       	add	r9, r12
				for (uint8_t x = 0; x < 32; x++) {
					uint16_t dataRead = gba_read_16bit_data(address);
 6ea:	c3 01       	movw	r24, r6
 6ec:	b2 01       	movw	r22, r4
 6ee:	2c dd       	rcall	.-1448   	; 0x148 <gba_read_16bit_data>
					
					// Low byte & High byte
					USART_Transmit(dataRead & 0xFF);
 6f0:	9b 83       	std	Y+3, r25	; 0x03
 6f2:	ac dc       	rcall	.-1704   	; 0x4c <USART_Transmit>
					USART_Transmit(dataRead >> 8);
 6f4:	9b 81       	ldd	r25, Y+3	; 0x03
 6f6:	89 2f       	mov	r24, r25
 6f8:	a9 dc       	rcall	.-1710   	; 0x4c <USART_Transmit>
					
					address++;
 6fa:	9f ef       	ldi	r25, 0xFF	; 255
 6fc:	49 1a       	sub	r4, r25
 6fe:	59 0a       	sbc	r5, r25
 700:	69 0a       	sbc	r6, r25
 702:	79 0a       	sbc	r7, r25
			gba_mode(); 
			
			receivedChar = '1';
			while (receivedChar == '1') {
				PORTD |= (1<<ACTIVITY_LED);
				for (uint8_t x = 0; x < 32; x++) {
 704:	94 10       	cpse	r9, r4
 706:	f1 cf       	rjmp	.-30     	; 0x6ea <main+0x162>
 708:	e0 e2       	ldi	r30, 0x20	; 32
 70a:	ce 0e       	add	r12, r30
 70c:	d1 1c       	adc	r13, r1
 70e:	e1 1c       	adc	r14, r1
 710:	f1 1c       	adc	r15, r1
					USART_Transmit(dataRead >> 8);
					
					address++;
				}
				
				PORTD &= ~(1<<ACTIVITY_LED);
 712:	93 98       	cbi	0x12, 3	; 18
				receivedChar = USART_Receive();
 714:	97 dc       	rcall	.-1746   	; 0x44 <USART_Receive>
 716:	dc cf       	rjmp	.-72     	; 0x6d0 <main+0x148>
		}
		
		
		// ---------- SRAM ----------
		// Read RAM from address (and increment) until anything but 1 is received
		else if (receivedChar == GBA_READ_SRAM) {
 718:	9d 36       	cpi	r25, 0x6D	; 109
 71a:	f9 f4       	brne	.+62     	; 0x75a <main+0x1d2>
			gb_mode(); // Set GB mode as it uses 16 bit address with 8 bit data
 71c:	c6 dc       	rcall	.-1652   	; 0xaa <gb_mode>
			
			receivedChar = '1';
 71e:	81 e3       	ldi	r24, 0x31	; 49
					USART_Transmit(gba_read_ram_8bit_data(address));
					address++;
				}
				
				PORTD &= ~(1<<ACTIVITY_LED);
				receivedChar = USART_Receive();
 720:	80 93 e3 00 	sts	0x00E3, r24	; 0x8000e3 <receivedChar>
		// Read RAM from address (and increment) until anything but 1 is received
		else if (receivedChar == GBA_READ_SRAM) {
			gb_mode(); // Set GB mode as it uses 16 bit address with 8 bit data
			
			receivedChar = '1';
			while (receivedChar == '1') {
 724:	80 91 e3 00 	lds	r24, 0x00E3	; 0x8000e3 <receivedChar>
 728:	81 33       	cpi	r24, 0x31	; 49
 72a:	c9 f5       	brne	.+114    	; 0x79e <main+0x216>
				PORTD |= (1<<ACTIVITY_LED);
 72c:	93 9a       	sbi	0x12, 3	; 18
 72e:	81 2c       	mov	r8, r1
 730:	91 2c       	mov	r9, r1
 732:	c4 01       	movw	r24, r8
 734:	8c 0d       	add	r24, r12
 736:	9d 1d       	adc	r25, r13
				for (uint8_t x = 0; x < 64; x++) {
					USART_Transmit(gba_read_ram_8bit_data(address));
 738:	16 dd       	rcall	.-1492   	; 0x166 <gba_read_ram_8bit_data>
 73a:	88 dc       	rcall	.-1776   	; 0x4c <USART_Transmit>
 73c:	ff ef       	ldi	r31, 0xFF	; 255
 73e:	8f 1a       	sub	r8, r31
 740:	9f 0a       	sbc	r9, r31
			gb_mode(); // Set GB mode as it uses 16 bit address with 8 bit data
			
			receivedChar = '1';
			while (receivedChar == '1') {
				PORTD |= (1<<ACTIVITY_LED);
				for (uint8_t x = 0; x < 64; x++) {
 742:	20 e4       	ldi	r18, 0x40	; 64
 744:	82 16       	cp	r8, r18
 746:	91 04       	cpc	r9, r1
 748:	a1 f7       	brne	.-24     	; 0x732 <main+0x1aa>
 74a:	80 e4       	ldi	r24, 0x40	; 64
 74c:	c8 0e       	add	r12, r24
 74e:	d1 1c       	adc	r13, r1
 750:	e1 1c       	adc	r14, r1
 752:	f1 1c       	adc	r15, r1
					USART_Transmit(gba_read_ram_8bit_data(address));
					address++;
				}
				
				PORTD &= ~(1<<ACTIVITY_LED);
 754:	93 98       	cbi	0x12, 3	; 18
				receivedChar = USART_Receive();
 756:	76 dc       	rcall	.-1812   	; 0x44 <USART_Receive>
 758:	e3 cf       	rjmp	.-58     	; 0x720 <main+0x198>
			
			gba_mode(); // Set back
		}
		
		// Write to RAM on address (and increment) with 64 bytes of data
		else if (receivedChar == GBA_WRITE_SRAM) {
 75a:	97 37       	cpi	r25, 0x77	; 119
 75c:	11 f5       	brne	.+68     	; 0x7a2 <main+0x21a>
			gb_mode();
 75e:	a5 dc       	rcall	.-1718   	; 0xaa <gb_mode>
			
			usart_read_bytes(64);
 760:	80 e4       	ldi	r24, 0x40	; 64
 762:	78 dc       	rcall	.-1808   	; 0x54 <usart_read_bytes>
			
			PORTD |= (1<<ACTIVITY_LED);
 764:	93 9a       	sbi	0x12, 3	; 18
 766:	42 e6       	ldi	r20, 0x62	; 98
 768:	64 2e       	mov	r6, r20
 76a:	40 e0       	ldi	r20, 0x00	; 0
 76c:	74 2e       	mov	r7, r20
 76e:	81 2c       	mov	r8, r1
 770:	91 2c       	mov	r9, r1
			for (uint8_t x = 0; x < 64; x++) {
				gba_write_ram_8bit_data(address, receivedBuffer[x]);
 772:	f3 01       	movw	r30, r6
 774:	61 91       	ld	r22, Z+
 776:	3f 01       	movw	r6, r30
 778:	c4 01       	movw	r24, r8
 77a:	8c 0d       	add	r24, r12
 77c:	9d 1d       	adc	r25, r13
 77e:	fc dc       	rcall	.-1544   	; 0x178 <gba_write_ram_8bit_data>
 780:	ff ef       	ldi	r31, 0xFF	; 255
 782:	8f 1a       	sub	r8, r31
 784:	9f 0a       	sbc	r9, r31
			gb_mode();
			
			usart_read_bytes(64);
			
			PORTD |= (1<<ACTIVITY_LED);
			for (uint8_t x = 0; x < 64; x++) {
 786:	20 e4       	ldi	r18, 0x40	; 64
 788:	82 16       	cp	r8, r18
 78a:	91 04       	cpc	r9, r1
 78c:	91 f7       	brne	.-28     	; 0x772 <main+0x1ea>
 78e:	80 e4       	ldi	r24, 0x40	; 64
 790:	c8 0e       	add	r12, r24
 792:	d1 1c       	adc	r13, r1
 794:	e1 1c       	adc	r14, r1
 796:	f1 1c       	adc	r15, r1
				gba_write_ram_8bit_data(address, receivedBuffer[x]);
				address++;
			}
			USART_Transmit('1'); // Send back acknowledgement
 798:	81 e3       	ldi	r24, 0x31	; 49
 79a:	58 dc       	rcall	.-1872   	; 0x4c <USART_Transmit>
			
			PORTD &= ~(1<<ACTIVITY_LED);
 79c:	93 98       	cbi	0x12, 3	; 18
			gba_mode(); // Set back
 79e:	b6 dc       	rcall	.-1684   	; 0x10c <gba_mode>
 7a0:	0c cf       	rjmp	.-488    	; 0x5ba <main+0x32>
		}
		
		// 'o' - Write 1 byte to SRAM address
		else if (receivedChar == GBA_WRITE_ONE_BYTE_SRAM) {
 7a2:	9f 36       	cpi	r25, 0x6F	; 111
 7a4:	31 f4       	brne	.+12     	; 0x7b2 <main+0x22a>
			gb_mode();
 7a6:	81 dc       	rcall	.-1790   	; 0xaa <gb_mode>
			
			uint8_t data = USART_Receive();
 7a8:	4d dc       	rcall	.-1894   	; 0x44 <USART_Receive>
			gba_write_ram_8bit_data(address, data);
 7aa:	68 2f       	mov	r22, r24
 7ac:	c6 01       	movw	r24, r12
 7ae:	e4 dc       	rcall	.-1592   	; 0x178 <gba_write_ram_8bit_data>
 7b0:	23 c0       	rjmp	.+70     	; 0x7f8 <main+0x270>
		}
		
		
		// ---------- FLASH ----------
		// Read the Flash Manufacturer and Device ID
		else if (receivedChar == GBA_FLASH_READ_ID) {
 7b2:	99 36       	cpi	r25, 0x69	; 105
 7b4:	49 f4       	brne	.+18     	; 0x7c8 <main+0x240>
			gb_mode();
 7b6:	79 dc       	rcall	.-1806   	; 0xaa <gb_mode>
			
			flash_read_chip_id();
 7b8:	9e dd       	rcall	.-1220   	; 0x2f6 <flash_read_chip_id>
			USART_Transmit(flashChipIdBuffer[0]);
 7ba:	80 91 60 00 	lds	r24, 0x0060	; 0x800060 <_edata>
 7be:	46 dc       	rcall	.-1908   	; 0x4c <USART_Transmit>
			USART_Transmit(flashChipIdBuffer[1]);
 7c0:	80 91 61 00 	lds	r24, 0x0061	; 0x800061 <_edata+0x1>
 7c4:	43 dc       	rcall	.-1914   	; 0x4c <USART_Transmit>
 7c6:	eb cf       	rjmp	.-42     	; 0x79e <main+0x216>
			
			gba_mode(); // Set back
		}
		
		// Change bank
		else if (receivedChar == GBA_FLASH_SET_BANK) {
 7c8:	9b 36       	cpi	r25, 0x6B	; 107
 7ca:	49 f4       	brne	.+18     	; 0x7de <main+0x256>
			usart_read_chars(); // Read data
 7cc:	5b dc       	rcall	.-1866   	; 0x84 <usart_read_chars>
			uint8_t bank = atoi(receivedBuffer); // Convert data string to dec
 7ce:	82 e6       	ldi	r24, 0x62	; 98
 7d0:	90 e0       	ldi	r25, 0x00	; 0
 7d2:	e9 d2       	rcall	.+1490   	; 0xda6 <atoi>
			
			gb_mode();
 7d4:	8b 83       	std	Y+3, r24	; 0x03
 7d6:	69 dc       	rcall	.-1838   	; 0xaa <gb_mode>
			flash_switch_bank(bank);
 7d8:	8b 81       	ldd	r24, Y+3	; 0x03
 7da:	c2 dd       	rcall	.-1148   	; 0x360 <flash_switch_bank>
 7dc:	e0 cf       	rjmp	.-64     	; 0x79e <main+0x216>
			
			gba_mode(); // Set back
		}
		
		// Erase 4K sector on Flash (sector 0 to 15 for 512Kbit)
		else if (receivedChar == GBA_FLASH_4K_SECTOR_ERASE) {
 7de:	93 37       	cpi	r25, 0x73	; 115
 7e0:	69 f4       	brne	.+26     	; 0x7fc <main+0x274>
			gb_mode();
 7e2:	63 dc       	rcall	.-1850   	; 0xaa <gb_mode>
			
			usart_read_chars(); // Read sector
 7e4:	4f dc       	rcall	.-1890   	; 0x84 <usart_read_chars>
			uint8_t sectorAddress = strtol(receivedBuffer, NULL, 16); // Convert address string in hex to dec
 7e6:	40 e1       	ldi	r20, 0x10	; 16
 7e8:	50 e0       	ldi	r21, 0x00	; 0
 7ea:	60 e0       	ldi	r22, 0x00	; 0
 7ec:	70 e0       	ldi	r23, 0x00	; 0
 7ee:	82 e6       	ldi	r24, 0x62	; 98
 7f0:	90 e0       	ldi	r25, 0x00	; 0
 7f2:	cd d1       	rcall	.+922    	; 0xb8e <strtol>
 7f4:	86 2f       	mov	r24, r22
			
			flash_erase_4k_sector(sectorAddress);
 7f6:	c7 dd       	rcall	.-1138   	; 0x386 <flash_erase_4k_sector>
			USART_Transmit('1'); // Send back acknowledgement
 7f8:	81 e3       	ldi	r24, 0x31	; 49
 7fa:	e4 cf       	rjmp	.-56     	; 0x7c4 <main+0x23c>
			
			gba_mode(); // Set back
		}
		
		// Write 64 bytes to Flash address one byte write at a time (and increment)
		else if (receivedChar == GBA_FLASH_WRITE_BYTE) {
 7fc:	92 36       	cpi	r25, 0x62	; 98
 7fe:	c9 f4       	brne	.+50     	; 0x832 <main+0x2aa>
			gb_mode();
 800:	54 dc       	rcall	.-1880   	; 0xaa <gb_mode>
			
			usart_read_bytes(64);
 802:	80 e4       	ldi	r24, 0x40	; 64
 804:	27 dc       	rcall	.-1970   	; 0x54 <usart_read_bytes>
			
			PORTD |= (1<<ACTIVITY_LED);
 806:	93 9a       	sbi	0x12, 3	; 18
 808:	32 e6       	ldi	r19, 0x62	; 98
 80a:	83 2e       	mov	r8, r19
 80c:	30 e0       	ldi	r19, 0x00	; 0
 80e:	93 2e       	mov	r9, r19
 810:	61 2c       	mov	r6, r1
 812:	71 2c       	mov	r7, r1
			for (uint8_t x = 0; x < 64; x++) {
				flash_write_byte(address, receivedBuffer[x]);
 814:	f4 01       	movw	r30, r8
 816:	61 91       	ld	r22, Z+
 818:	4f 01       	movw	r8, r30
 81a:	c3 01       	movw	r24, r6
 81c:	8c 0d       	add	r24, r12
 81e:	9d 1d       	adc	r25, r13
 820:	d6 dd       	rcall	.-1108   	; 0x3ce <flash_write_byte>
 822:	ff ef       	ldi	r31, 0xFF	; 255
 824:	6f 1a       	sub	r6, r31
 826:	7f 0a       	sbc	r7, r31
			gb_mode();
			
			usart_read_bytes(64);
			
			PORTD |= (1<<ACTIVITY_LED);
			for (uint8_t x = 0; x < 64; x++) {
 828:	20 e4       	ldi	r18, 0x40	; 64
 82a:	62 16       	cp	r6, r18
 82c:	71 04       	cpc	r7, r1
 82e:	91 f7       	brne	.-28     	; 0x814 <main+0x28c>
 830:	ae cf       	rjmp	.-164    	; 0x78e <main+0x206>
			PORTD &= ~(1<<ACTIVITY_LED);
			gba_mode(); // Set back
		}
		
		// Write 128 bytes to flash sector for Atmel flash (and increment)
		else if (receivedChar == GBA_FLASH_WRITE_ATMEL) {
 832:	91 36       	cpi	r25, 0x61	; 97
 834:	61 f4       	brne	.+24     	; 0x84e <main+0x2c6>
			gb_mode();
 836:	39 dc       	rcall	.-1934   	; 0xaa <gb_mode>
			
			usart_read_bytes(128);
 838:	80 e8       	ldi	r24, 0x80	; 128
 83a:	0c dc       	rcall	.-2024   	; 0x54 <usart_read_bytes>
			
			PORTD |= (1<<ACTIVITY_LED);
 83c:	93 9a       	sbi	0x12, 3	; 18
			flash_write_sector(address); // Address used as sector number
 83e:	c6 01       	movw	r24, r12
 840:	e2 dd       	rcall	.-1084   	; 0x406 <flash_write_sector>
			address++;
 842:	9f ef       	ldi	r25, 0xFF	; 255
 844:	c9 1a       	sub	r12, r25
 846:	d9 0a       	sbc	r13, r25
 848:	e9 0a       	sbc	r14, r25
 84a:	f9 0a       	sbc	r15, r25
 84c:	a5 cf       	rjmp	.-182    	; 0x798 <main+0x210>
		}
		
		
		// ---------- EEPROM ----------
		// Set EEPROM size
		else if (receivedChar == GBA_SET_EEPROM_SIZE) {
 84e:	93 35       	cpi	r25, 0x53	; 83
 850:	51 f4       	brne	.+20     	; 0x866 <main+0x2de>
			usart_read_chars(); // Read size
 852:	18 dc       	rcall	.-2000   	; 0x84 <usart_read_chars>
			eepromSize = strtol(receivedBuffer, NULL, 16); // Convert size to dec
 854:	40 e1       	ldi	r20, 0x10	; 16
 856:	50 e0       	ldi	r21, 0x00	; 0
 858:	60 e0       	ldi	r22, 0x00	; 0
 85a:	70 e0       	ldi	r23, 0x00	; 0
 85c:	82 e6       	ldi	r24, 0x62	; 98
 85e:	90 e0       	ldi	r25, 0x00	; 0
 860:	96 d1       	rcall	.+812    	; 0xb8e <strtol>
 862:	06 2f       	mov	r16, r22
 864:	aa ce       	rjmp	.-684    	; 0x5ba <main+0x32>
		}
		
		// Read the EEPROM on address (and increment) until anything but 1 is received
		else if (receivedChar == GBA_READ_EEPROM) {
 866:	95 36       	cpi	r25, 0x65	; 101
 868:	f9 f4       	brne	.+62     	; 0x8a8 <main+0x320>
			gba_eeprom_mode();
 86a:	9d dc       	rcall	.-1734   	; 0x1a6 <gba_eeprom_mode>
			
			receivedChar = '1';
 86c:	81 e3       	ldi	r24, 0x31	; 49
					USART_Transmit(eepromBuffer[c]);
				}
				address++; // Increment to next 8 bytes
				
				PORTD &= ~(1<<ACTIVITY_LED);
				receivedChar = USART_Receive();
 86e:	80 93 e3 00 	sts	0x00E3, r24	; 0x8000e3 <receivedChar>
		// Read the EEPROM on address (and increment) until anything but 1 is received
		else if (receivedChar == GBA_READ_EEPROM) {
			gba_eeprom_mode();
			
			receivedChar = '1';
			while (receivedChar == '1') {
 872:	80 91 e3 00 	lds	r24, 0x00E3	; 0x8000e3 <receivedChar>
 876:	81 33       	cpi	r24, 0x31	; 49
 878:	09 f0       	breq	.+2      	; 0x87c <main+0x2f4>
 87a:	91 cf       	rjmp	.-222    	; 0x79e <main+0x216>
				PORTD |= (1<<ACTIVITY_LED);
 87c:	93 9a       	sbi	0x12, 3	; 18
				gba_eeprom_read(address, eepromSize);
 87e:	60 2f       	mov	r22, r16
 880:	c6 01       	movw	r24, r12
 882:	ce dc       	rcall	.-1636   	; 0x220 <gba_eeprom_read>
 884:	24 ee       	ldi	r18, 0xE4	; 228
 886:	82 2e       	mov	r8, r18
 888:	20 e0       	ldi	r18, 0x00	; 0
 88a:	92 2e       	mov	r9, r18
				
				// Send back the 8 bytes of data
				for (uint8_t c = 0; c < 8; c++) {
					USART_Transmit(eepromBuffer[c]);
 88c:	f4 01       	movw	r30, r8
 88e:	81 91       	ld	r24, Z+
 890:	4f 01       	movw	r8, r30
 892:	dc db       	rcall	.-2120   	; 0x4c <USART_Transmit>
			while (receivedChar == '1') {
				PORTD |= (1<<ACTIVITY_LED);
				gba_eeprom_read(address, eepromSize);
				
				// Send back the 8 bytes of data
				for (uint8_t c = 0; c < 8; c++) {
 894:	18 11       	cpse	r17, r8
 896:	fa cf       	rjmp	.-12     	; 0x88c <main+0x304>
					USART_Transmit(eepromBuffer[c]);
				}
				address++; // Increment to next 8 bytes
 898:	ff ef       	ldi	r31, 0xFF	; 255
 89a:	cf 1a       	sub	r12, r31
 89c:	df 0a       	sbc	r13, r31
 89e:	ef 0a       	sbc	r14, r31
 8a0:	ff 0a       	sbc	r15, r31
				
				PORTD &= ~(1<<ACTIVITY_LED);
 8a2:	93 98       	cbi	0x12, 3	; 18
				receivedChar = USART_Receive();
 8a4:	cf db       	rcall	.-2146   	; 0x44 <USART_Receive>
 8a6:	e3 cf       	rjmp	.-58     	; 0x86e <main+0x2e6>
			
			gba_mode(); // Set back
		}
		
		// Write 8 bytes to the EEPROM address (and increment)
		else if (receivedChar == GBA_WRITE_EEPROM) {
 8a8:	90 37       	cpi	r25, 0x70	; 112
 8aa:	d9 f4       	brne	.+54     	; 0x8e2 <main+0x35a>
			gba_eeprom_mode();
 8ac:	7c dc       	rcall	.-1800   	; 0x1a6 <gba_eeprom_mode>
 8ae:	94 ee       	ldi	r25, 0xE4	; 228
 8b0:	89 2e       	mov	r8, r25
 8b2:	90 e0       	ldi	r25, 0x00	; 0
 8b4:	99 2e       	mov	r9, r25
			
			// Read 8 bytes from USART and place in buffer
			for (uint8_t x = 0; x < 8; x++) {
				eepromBuffer[x] = USART_Receive();
 8b6:	c6 db       	rcall	.-2164   	; 0x44 <USART_Receive>
 8b8:	f4 01       	movw	r30, r8
 8ba:	81 93       	st	Z+, r24
 8bc:	4f 01       	movw	r8, r30
		// Write 8 bytes to the EEPROM address (and increment)
		else if (receivedChar == GBA_WRITE_EEPROM) {
			gba_eeprom_mode();
			
			// Read 8 bytes from USART and place in buffer
			for (uint8_t x = 0; x < 8; x++) {
 8be:	1e 13       	cpse	r17, r30
 8c0:	fa cf       	rjmp	.-12     	; 0x8b6 <main+0x32e>
				eepromBuffer[x] = USART_Receive();
			}
			PORTD |= (1<<ACTIVITY_LED);
 8c2:	93 9a       	sbi	0x12, 3	; 18
			
			gba_eeprom_write(address, eepromSize);
 8c4:	60 2f       	mov	r22, r16
 8c6:	c6 01       	movw	r24, r12
 8c8:	d8 dc       	rcall	.-1616   	; 0x27a <gba_eeprom_write>
			address++;
 8ca:	ff ef       	ldi	r31, 0xFF	; 255
 8cc:	cf 1a       	sub	r12, r31
 8ce:	df 0a       	sbc	r13, r31
 8d0:	ef 0a       	sbc	r14, r31
 8d2:	ff 0a       	sbc	r15, r31
 8d4:	8f e7       	ldi	r24, 0x7F	; 127
 8d6:	9e e3       	ldi	r25, 0x3E	; 62
 8d8:	01 97       	sbiw	r24, 0x01	; 1
 8da:	f1 f7       	brne	.-4      	; 0x8d8 <main+0x350>
 8dc:	00 c0       	rjmp	.+0      	; 0x8de <main+0x356>
 8de:	00 00       	nop
 8e0:	5b cf       	rjmp	.-330    	; 0x798 <main+0x210>
		
		
		// ---------- FLASH CARTS ----------
		
		// Write address, one byte and pulse a pin
		else if (receivedChar == GB_FLASH_WRITE_BYTE) {
 8e2:	96 34       	cpi	r25, 0x46	; 70
 8e4:	49 f5       	brne	.+82     	; 0x938 <main+0x3b0>
			usart_read_chars(); // Read address
 8e6:	ce db       	rcall	.-2148   	; 0x84 <usart_read_chars>
			uint16_t flashAddress = strtol(receivedBuffer, NULL, 16); // Convert address string in hex to dec
 8e8:	40 e1       	ldi	r20, 0x10	; 16
 8ea:	50 e0       	ldi	r21, 0x00	; 0
 8ec:	60 e0       	ldi	r22, 0x00	; 0
 8ee:	70 e0       	ldi	r23, 0x00	; 0
 8f0:	82 e6       	ldi	r24, 0x62	; 98
 8f2:	90 e0       	ldi	r25, 0x00	; 0
 8f4:	4c d1       	rcall	.+664    	; 0xb8e <strtol>
 8f6:	1b 01       	movw	r2, r22
 8f8:	2c 01       	movw	r4, r24
			
			receivedChar = USART_Receive(); // Wait for byte
 8fa:	a4 db       	rcall	.-2232   	; 0x44 <USART_Receive>
 8fc:	80 93 e3 00 	sts	0x00E3, r24	; 0x8000e3 <receivedChar>
			if (receivedChar == GB_AUDIO_FLASH_WRITE || receivedChar == GB_BV5_FLASH_WRITE) {
 900:	85 35       	cpi	r24, 0x55	; 85
 902:	19 f0       	breq	.+6      	; 0x90a <main+0x382>
 904:	85 33       	cpi	r24, 0x35	; 53
 906:	09 f0       	breq	.+2      	; 0x90a <main+0x382>
 908:	58 ce       	rjmp	.-848    	; 0x5ba <main+0x32>
				usart_read_chars(); // Read data
 90a:	bc db       	rcall	.-2184   	; 0x84 <usart_read_chars>
				uint8_t flashByte = strtol(receivedBuffer, NULL, 16); // Convert data byte in hex to dec
 90c:	40 e1       	ldi	r20, 0x10	; 16
 90e:	50 e0       	ldi	r21, 0x00	; 0
 910:	60 e0       	ldi	r22, 0x00	; 0
 912:	70 e0       	ldi	r23, 0x00	; 0
 914:	82 e6       	ldi	r24, 0x62	; 98
 916:	90 e0       	ldi	r25, 0x00	; 0
 918:	3a d1       	rcall	.+628    	; 0xb8e <strtol>
				
				PORTD |= (1<<ACTIVITY_LED);
 91a:	93 9a       	sbi	0x12, 3	; 18
				if (receivedChar == GB_AUDIO_FLASH_WRITE) { // Pulse audio pin
 91c:	80 91 e3 00 	lds	r24, 0x00E3	; 0x8000e3 <receivedChar>
 920:	85 35       	cpi	r24, 0x55	; 85
 922:	19 f4       	brne	.+6      	; 0x92a <main+0x3a2>
					audio_flash_write_bus_cycle(flashAddress, flashByte);
 924:	c1 01       	movw	r24, r2
 926:	a5 dd       	rcall	.-1206   	; 0x472 <audio_flash_write_bus_cycle>
 928:	04 c0       	rjmp	.+8      	; 0x932 <main+0x3aa>
				}
				else if (receivedChar == GB_BV5_FLASH_WRITE) { // Pulse WR pin
 92a:	85 33       	cpi	r24, 0x35	; 53
 92c:	11 f4       	brne	.+4      	; 0x932 <main+0x3aa>
					bv5_flash_write_bus_cycle(flashAddress, flashByte);
 92e:	c1 01       	movw	r24, r2
 930:	d0 dd       	rcall	.-1120   	; 0x4d2 <bv5_flash_write_bus_cycle>
				}
				PORTD &= ~(1<<ACTIVITY_LED);
 932:	93 98       	cbi	0x12, 3	; 18
				
				USART_Transmit('1'); // Send back acknowledgement
 934:	81 e3       	ldi	r24, 0x31	; 49
 936:	0d c1       	rjmp	.+538    	; 0xb52 <main+0x5ca>
			}
		}
		
		// Write 64 bytes to Flash address one byte write at a time (and increment), pulse a pin
		else if (receivedChar == GB_FLASH_WRITE_64BYTE) {
 938:	94 35       	cpi	r25, 0x54	; 84
 93a:	71 f5       	brne	.+92     	; 0x998 <main+0x410>
			receivedChar = USART_Receive(); // Wait for byte
 93c:	83 db       	rcall	.-2298   	; 0x44 <USART_Receive>
 93e:	80 93 e3 00 	sts	0x00E3, r24	; 0x8000e3 <receivedChar>
			usart_read_bytes(64);
 942:	80 e4       	ldi	r24, 0x40	; 64
 944:	87 db       	rcall	.-2290   	; 0x54 <usart_read_bytes>
			
			PORTD |= (1<<ACTIVITY_LED);
 946:	93 9a       	sbi	0x12, 3	; 18
 948:	82 e6       	ldi	r24, 0x62	; 98
 94a:	68 2e       	mov	r6, r24
 94c:	80 e0       	ldi	r24, 0x00	; 0
 94e:	78 2e       	mov	r7, r24
 950:	f6 01       	movw	r30, r12
 952:	e2 56       	subi	r30, 0x62	; 98
 954:	f0 40       	sbci	r31, 0x00	; 0
 956:	4f 01       	movw	r8, r30
			for (uint8_t x = 0; x < 64; x++) {
				if (receivedChar == GB_AUDIO_FLASH_WRITE) { // Pulse audio pin
 958:	80 91 e3 00 	lds	r24, 0x00E3	; 0x8000e3 <receivedChar>
 95c:	85 35       	cpi	r24, 0x55	; 85
 95e:	39 f4       	brne	.+14     	; 0x96e <main+0x3e6>
					audio_flash_write_byte(address, receivedBuffer[x]);
 960:	f3 01       	movw	r30, r6
 962:	60 81       	ld	r22, Z
 964:	c4 01       	movw	r24, r8
 966:	86 0d       	add	r24, r6
 968:	97 1d       	adc	r25, r7
 96a:	97 dd       	rcall	.-1234   	; 0x49a <audio_flash_write_byte>
 96c:	08 c0       	rjmp	.+16     	; 0x97e <main+0x3f6>
				}
				else if (receivedChar == GB_BV5_FLASH_WRITE) { // Pulse WR pin
 96e:	85 33       	cpi	r24, 0x35	; 53
 970:	31 f4       	brne	.+12     	; 0x97e <main+0x3f6>
					bv5_flash_write_byte(address, receivedBuffer[x]);
 972:	f3 01       	movw	r30, r6
 974:	60 81       	ld	r22, Z
 976:	c4 01       	movw	r24, r8
 978:	86 0d       	add	r24, r6
 97a:	97 1d       	adc	r25, r7
 97c:	be dd       	rcall	.-1156   	; 0x4fa <bv5_flash_write_byte>
 97e:	ff ef       	ldi	r31, 0xFF	; 255
 980:	6f 1a       	sub	r6, r31
 982:	7f 0a       	sbc	r7, r31
		else if (receivedChar == GB_FLASH_WRITE_64BYTE) {
			receivedChar = USART_Receive(); // Wait for byte
			usart_read_bytes(64);
			
			PORTD |= (1<<ACTIVITY_LED);
			for (uint8_t x = 0; x < 64; x++) {
 984:	2a 81       	ldd	r18, Y+2	; 0x02
 986:	26 11       	cpse	r18, r6
 988:	e7 cf       	rjmp	.-50     	; 0x958 <main+0x3d0>
 98a:	80 e4       	ldi	r24, 0x40	; 64
 98c:	c8 0e       	add	r12, r24
 98e:	d1 1c       	adc	r13, r1
 990:	e1 1c       	adc	r14, r1
 992:	f1 1c       	adc	r15, r1
					bv5_flash_write_byte(address, receivedBuffer[x]);
				}
				
				address++;
			}
			USART_Transmit('1'); // Send back acknowledgement
 994:	81 e3       	ldi	r24, 0x31	; 49
 996:	c6 c0       	rjmp	.+396    	; 0xb24 <main+0x59c>
		
		
		// ---------- General commands ----------
		// Set any pin as input/output
		// Reads the DDR/PORT (e.g. DDRB/PORTB is 'B') and the hex value that represents pins to set to an input (e.g. PB7 is 0x80)
		else if (receivedChar == SET_INPUT || receivedChar == SET_OUTPUT) {
 998:	99 34       	cpi	r25, 0x49	; 73
 99a:	19 f0       	breq	.+6      	; 0x9a2 <main+0x41a>
 99c:	9f 34       	cpi	r25, 0x4F	; 79
 99e:	09 f0       	breq	.+2      	; 0x9a2 <main+0x41a>
 9a0:	51 c0       	rjmp	.+162    	; 0xa44 <main+0x4bc>
			char portChar = USART_Receive();
 9a2:	50 db       	rcall	.-2400   	; 0x44 <USART_Receive>
			usart_read_chars();
 9a4:	8b 83       	std	Y+3, r24	; 0x03
 9a6:	6e db       	rcall	.-2340   	; 0x84 <usart_read_chars>
			uint8_t setValue = strtol(receivedBuffer, NULL, 16);
 9a8:	40 e1       	ldi	r20, 0x10	; 16
 9aa:	50 e0       	ldi	r21, 0x00	; 0
 9ac:	60 e0       	ldi	r22, 0x00	; 0
 9ae:	70 e0       	ldi	r23, 0x00	; 0
 9b0:	82 e6       	ldi	r24, 0x62	; 98
 9b2:	90 e0       	ldi	r25, 0x00	; 0
 9b4:	ec d0       	rcall	.+472    	; 0xb8e <strtol>
			
			PORTD |= (1<<ACTIVITY_LED);
 9b6:	93 9a       	sbi	0x12, 3	; 18
			if (receivedChar == SET_INPUT) {
 9b8:	80 91 e3 00 	lds	r24, 0x00E3	; 0x8000e3 <receivedChar>
 9bc:	2b 81       	ldd	r18, Y+3	; 0x03
 9be:	89 34       	cpi	r24, 0x49	; 73
 9c0:	f9 f4       	brne	.+62     	; 0xa00 <main+0x478>
				if (portChar == 'A') {
 9c2:	21 34       	cpi	r18, 0x41	; 65
 9c4:	21 f4       	brne	.+8      	; 0x9ce <main+0x446>
					DDRA &= ~(setValue);
 9c6:	8a b3       	in	r24, 0x1a	; 26
 9c8:	60 95       	com	r22
 9ca:	68 23       	and	r22, r24
 9cc:	20 c0       	rjmp	.+64     	; 0xa0e <main+0x486>
				}
				else if (portChar == 'B') {
 9ce:	22 34       	cpi	r18, 0x42	; 66
 9d0:	21 f4       	brne	.+8      	; 0x9da <main+0x452>
					DDRB &= ~(setValue);
 9d2:	87 b3       	in	r24, 0x17	; 23
 9d4:	60 95       	com	r22
 9d6:	68 23       	and	r22, r24
 9d8:	20 c0       	rjmp	.+64     	; 0xa1a <main+0x492>
				}
				else if (portChar == 'C') {
 9da:	23 34       	cpi	r18, 0x43	; 67
 9dc:	21 f4       	brne	.+8      	; 0x9e6 <main+0x45e>
					DDRC &= ~(setValue);
 9de:	84 b3       	in	r24, 0x14	; 20
 9e0:	60 95       	com	r22
 9e2:	68 23       	and	r22, r24
 9e4:	20 c0       	rjmp	.+64     	; 0xa26 <main+0x49e>
				}
				else if (portChar == 'D') {
 9e6:	24 34       	cpi	r18, 0x44	; 68
 9e8:	21 f4       	brne	.+8      	; 0x9f2 <main+0x46a>
					DDRD &= ~(setValue);
 9ea:	81 b3       	in	r24, 0x11	; 17
 9ec:	60 95       	com	r22
 9ee:	68 23       	and	r22, r24
 9f0:	20 c0       	rjmp	.+64     	; 0xa32 <main+0x4aa>
				}
				else if (portChar == 'E') {
 9f2:	25 34       	cpi	r18, 0x45	; 69
 9f4:	09 f0       	breq	.+2      	; 0x9f8 <main+0x470>
 9f6:	97 c0       	rjmp	.+302    	; 0xb26 <main+0x59e>
					DDRE &= ~(setValue);
 9f8:	86 b1       	in	r24, 0x06	; 6
 9fa:	60 95       	com	r22
 9fc:	68 23       	and	r22, r24
 9fe:	20 c0       	rjmp	.+64     	; 0xa40 <main+0x4b8>
				}
			}
			else if (receivedChar == SET_OUTPUT) {
 a00:	8f 34       	cpi	r24, 0x4F	; 79
 a02:	09 f0       	breq	.+2      	; 0xa06 <main+0x47e>
 a04:	90 c0       	rjmp	.+288    	; 0xb26 <main+0x59e>
				if (portChar == 'A') {
 a06:	21 34       	cpi	r18, 0x41	; 65
 a08:	21 f4       	brne	.+8      	; 0xa12 <main+0x48a>
					DDRA |= (setValue);
 a0a:	8a b3       	in	r24, 0x1a	; 26
 a0c:	68 2b       	or	r22, r24
 a0e:	6a bb       	out	0x1a, r22	; 26
 a10:	8a c0       	rjmp	.+276    	; 0xb26 <main+0x59e>
				}
				else if (portChar == 'B') {
 a12:	22 34       	cpi	r18, 0x42	; 66
 a14:	21 f4       	brne	.+8      	; 0xa1e <main+0x496>
					DDRB |= (setValue);
 a16:	87 b3       	in	r24, 0x17	; 23
 a18:	68 2b       	or	r22, r24
 a1a:	67 bb       	out	0x17, r22	; 23
 a1c:	84 c0       	rjmp	.+264    	; 0xb26 <main+0x59e>
				}
				else if (portChar == 'C') {
 a1e:	23 34       	cpi	r18, 0x43	; 67
 a20:	21 f4       	brne	.+8      	; 0xa2a <main+0x4a2>
					DDRC |= (setValue);
 a22:	84 b3       	in	r24, 0x14	; 20
 a24:	68 2b       	or	r22, r24
 a26:	64 bb       	out	0x14, r22	; 20
 a28:	7e c0       	rjmp	.+252    	; 0xb26 <main+0x59e>
				}
				else if (portChar == 'D') {
 a2a:	24 34       	cpi	r18, 0x44	; 68
 a2c:	21 f4       	brne	.+8      	; 0xa36 <main+0x4ae>
					DDRD |= (setValue);
 a2e:	81 b3       	in	r24, 0x11	; 17
 a30:	68 2b       	or	r22, r24
 a32:	61 bb       	out	0x11, r22	; 17
 a34:	78 c0       	rjmp	.+240    	; 0xb26 <main+0x59e>
				}
				else if (portChar == 'E') {
 a36:	25 34       	cpi	r18, 0x45	; 69
 a38:	09 f0       	breq	.+2      	; 0xa3c <main+0x4b4>
 a3a:	75 c0       	rjmp	.+234    	; 0xb26 <main+0x59e>
					DDRE |= (setValue);
 a3c:	86 b1       	in	r24, 0x06	; 6
 a3e:	68 2b       	or	r22, r24
 a40:	66 b9       	out	0x06, r22	; 6
 a42:	71 c0       	rjmp	.+226    	; 0xb26 <main+0x59e>
			}
			PORTD &= ~(1<<ACTIVITY_LED);
		}
		
		// Set pin output as low
		else if (receivedChar == SET_OUTPUT_LOW) {
 a44:	9c 34       	cpi	r25, 0x4C	; 76
 a46:	59 f5       	brne	.+86     	; 0xa9e <main+0x516>
			char portChar = USART_Receive();			
 a48:	fd da       	rcall	.-2566   	; 0x44 <USART_Receive>
			usart_read_chars();
 a4a:	8b 83       	std	Y+3, r24	; 0x03
 a4c:	1b db       	rcall	.-2506   	; 0x84 <usart_read_chars>
			uint8_t setValue = strtol(receivedBuffer, NULL, 16);
 a4e:	40 e1       	ldi	r20, 0x10	; 16
 a50:	50 e0       	ldi	r21, 0x00	; 0
 a52:	60 e0       	ldi	r22, 0x00	; 0
 a54:	70 e0       	ldi	r23, 0x00	; 0
 a56:	82 e6       	ldi	r24, 0x62	; 98
 a58:	90 e0       	ldi	r25, 0x00	; 0
 a5a:	99 d0       	rcall	.+306    	; 0xb8e <strtol>
			
			PORTD |= (1<<ACTIVITY_LED);
 a5c:	93 9a       	sbi	0x12, 3	; 18
			if (portChar == 'A') {
 a5e:	2b 81       	ldd	r18, Y+3	; 0x03
 a60:	21 34       	cpi	r18, 0x41	; 65
 a62:	21 f4       	brne	.+8      	; 0xa6c <main+0x4e4>
				PORTA &= ~(setValue);
 a64:	8b b3       	in	r24, 0x1b	; 27
 a66:	60 95       	com	r22
 a68:	68 23       	and	r22, r24
 a6a:	2b c0       	rjmp	.+86     	; 0xac2 <main+0x53a>
			}
			else if (portChar == 'B') {
 a6c:	22 34       	cpi	r18, 0x42	; 66
 a6e:	21 f4       	brne	.+8      	; 0xa78 <main+0x4f0>
				PORTB &= ~(setValue);
 a70:	88 b3       	in	r24, 0x18	; 24
 a72:	60 95       	com	r22
 a74:	68 23       	and	r22, r24
 a76:	2b c0       	rjmp	.+86     	; 0xace <main+0x546>
			}
			else if (portChar == 'C') {
 a78:	23 34       	cpi	r18, 0x43	; 67
 a7a:	21 f4       	brne	.+8      	; 0xa84 <main+0x4fc>
				PORTC &= ~(setValue);
 a7c:	85 b3       	in	r24, 0x15	; 21
 a7e:	60 95       	com	r22
 a80:	68 23       	and	r22, r24
 a82:	2b c0       	rjmp	.+86     	; 0xada <main+0x552>
			}
			else if (portChar == 'D') {
 a84:	24 34       	cpi	r18, 0x44	; 68
 a86:	21 f4       	brne	.+8      	; 0xa90 <main+0x508>
				PORTD &= ~(setValue);
 a88:	82 b3       	in	r24, 0x12	; 18
 a8a:	60 95       	com	r22
 a8c:	68 23       	and	r22, r24
 a8e:	2b c0       	rjmp	.+86     	; 0xae6 <main+0x55e>
			}
			else if (portChar == 'E') {
 a90:	25 34       	cpi	r18, 0x45	; 69
 a92:	09 f0       	breq	.+2      	; 0xa96 <main+0x50e>
 a94:	48 c0       	rjmp	.+144    	; 0xb26 <main+0x59e>
				PORTE &= ~(setValue);
 a96:	87 b1       	in	r24, 0x07	; 7
 a98:	60 95       	com	r22
 a9a:	68 23       	and	r22, r24
 a9c:	2a c0       	rjmp	.+84     	; 0xaf2 <main+0x56a>
			}
			PORTD &= ~(1<<ACTIVITY_LED);
		}
		
		// Set pin output as high
		else if (receivedChar == SET_OUTPUT_HIGH) {
 a9e:	98 34       	cpi	r25, 0x48	; 72
 aa0:	51 f5       	brne	.+84     	; 0xaf6 <main+0x56e>
			char portChar = USART_Receive();			
 aa2:	d0 da       	rcall	.-2656   	; 0x44 <USART_Receive>
			usart_read_chars();
 aa4:	8b 83       	std	Y+3, r24	; 0x03
 aa6:	ee da       	rcall	.-2596   	; 0x84 <usart_read_chars>
			uint8_t setValue = strtol(receivedBuffer, NULL, 16);
 aa8:	40 e1       	ldi	r20, 0x10	; 16
 aaa:	50 e0       	ldi	r21, 0x00	; 0
 aac:	60 e0       	ldi	r22, 0x00	; 0
 aae:	70 e0       	ldi	r23, 0x00	; 0
 ab0:	82 e6       	ldi	r24, 0x62	; 98
 ab2:	90 e0       	ldi	r25, 0x00	; 0
 ab4:	6c d0       	rcall	.+216    	; 0xb8e <strtol>
			
			PORTD |= (1<<ACTIVITY_LED);
 ab6:	93 9a       	sbi	0x12, 3	; 18
			if (portChar == 'A') {
 ab8:	2b 81       	ldd	r18, Y+3	; 0x03
 aba:	21 34       	cpi	r18, 0x41	; 65
 abc:	21 f4       	brne	.+8      	; 0xac6 <main+0x53e>
				PORTA |= (setValue);
 abe:	8b b3       	in	r24, 0x1b	; 27
 ac0:	68 2b       	or	r22, r24
 ac2:	6b bb       	out	0x1b, r22	; 27
 ac4:	30 c0       	rjmp	.+96     	; 0xb26 <main+0x59e>
			}
			else if (portChar == 'B') {
 ac6:	22 34       	cpi	r18, 0x42	; 66
 ac8:	21 f4       	brne	.+8      	; 0xad2 <main+0x54a>
				PORTB |= (setValue);
 aca:	88 b3       	in	r24, 0x18	; 24
 acc:	68 2b       	or	r22, r24
 ace:	68 bb       	out	0x18, r22	; 24
 ad0:	2a c0       	rjmp	.+84     	; 0xb26 <main+0x59e>
			}
			else if (portChar == 'C') {
 ad2:	23 34       	cpi	r18, 0x43	; 67
 ad4:	21 f4       	brne	.+8      	; 0xade <main+0x556>
				PORTC |= (setValue);
 ad6:	85 b3       	in	r24, 0x15	; 21
 ad8:	68 2b       	or	r22, r24
 ada:	65 bb       	out	0x15, r22	; 21
 adc:	24 c0       	rjmp	.+72     	; 0xb26 <main+0x59e>
			}
			else if (portChar == 'D') {
 ade:	24 34       	cpi	r18, 0x44	; 68
 ae0:	21 f4       	brne	.+8      	; 0xaea <main+0x562>
				PORTD |= (setValue);
 ae2:	82 b3       	in	r24, 0x12	; 18
 ae4:	68 2b       	or	r22, r24
 ae6:	62 bb       	out	0x12, r22	; 18
 ae8:	1e c0       	rjmp	.+60     	; 0xb26 <main+0x59e>
			}
			else if (portChar == 'E') {
 aea:	25 34       	cpi	r18, 0x45	; 69
 aec:	e1 f4       	brne	.+56     	; 0xb26 <main+0x59e>
				PORTE |= (setValue);
 aee:	87 b1       	in	r24, 0x07	; 7
 af0:	68 2b       	or	r22, r24
 af2:	67 b9       	out	0x07, r22	; 7
 af4:	18 c0       	rjmp	.+48     	; 0xb26 <main+0x59e>
			}
			PORTD &= ~(1<<ACTIVITY_LED);
		}
		
		// Read all pins of a PORT and return the value
		else if (receivedChar == READ_INPUT) {
 af6:	94 34       	cpi	r25, 0x44	; 68
 af8:	c1 f4       	brne	.+48     	; 0xb2a <main+0x5a2>
			char portChar = USART_Receive();			
 afa:	a4 da       	rcall	.-2744   	; 0x44 <USART_Receive>
			
			PORTD |= (1<<ACTIVITY_LED);
 afc:	93 9a       	sbi	0x12, 3	; 18
			if (portChar == 'A') {
 afe:	81 34       	cpi	r24, 0x41	; 65
 b00:	11 f4       	brne	.+4      	; 0xb06 <main+0x57e>
				USART_Transmit(PINA);
 b02:	89 b3       	in	r24, 0x19	; 25
 b04:	0f c0       	rjmp	.+30     	; 0xb24 <main+0x59c>
			}
			else if (portChar == 'B') {
 b06:	82 34       	cpi	r24, 0x42	; 66
 b08:	11 f4       	brne	.+4      	; 0xb0e <main+0x586>
				USART_Transmit(PINB);
 b0a:	86 b3       	in	r24, 0x16	; 22
 b0c:	0b c0       	rjmp	.+22     	; 0xb24 <main+0x59c>
			}
			else if (portChar == 'C') {
 b0e:	83 34       	cpi	r24, 0x43	; 67
 b10:	11 f4       	brne	.+4      	; 0xb16 <main+0x58e>
				USART_Transmit(PINC);
 b12:	83 b3       	in	r24, 0x13	; 19
 b14:	07 c0       	rjmp	.+14     	; 0xb24 <main+0x59c>
			}
			else if (portChar == 'D') {
 b16:	84 34       	cpi	r24, 0x44	; 68
 b18:	11 f4       	brne	.+4      	; 0xb1e <main+0x596>
				USART_Transmit(PIND);
 b1a:	80 b3       	in	r24, 0x10	; 16
 b1c:	03 c0       	rjmp	.+6      	; 0xb24 <main+0x59c>
			}
			else if (portChar == 'E') {
 b1e:	85 34       	cpi	r24, 0x45	; 69
 b20:	11 f4       	brne	.+4      	; 0xb26 <main+0x59e>
				USART_Transmit(PINE);
 b22:	85 b1       	in	r24, 0x05	; 5
 b24:	93 da       	rcall	.-2778   	; 0x4c <USART_Transmit>
			}
			PORTD &= ~(1<<ACTIVITY_LED);
 b26:	93 98       	cbi	0x12, 3	; 18
 b28:	48 cd       	rjmp	.-1392   	; 0x5ba <main+0x32>
		}
		
		// Set the reset common lines variable on or off, useful if you are controlling all the pins directly
		else if (receivedChar == RESET_COMMON_LINES) {
 b2a:	9d 34       	cpi	r25, 0x4D	; 77
 b2c:	59 f4       	brne	.+22     	; 0xb44 <main+0x5bc>
			char commonChar = USART_Receive();
 b2e:	8a da       	rcall	.-2796   	; 0x44 <USART_Receive>
			if (commonChar == '1') {
 b30:	81 33       	cpi	r24, 0x31	; 49
 b32:	19 f4       	brne	.+6      	; 0xb3a <main+0x5b2>
				resetCommonLines = 1;
 b34:	21 e0       	ldi	r18, 0x01	; 1
 b36:	29 83       	std	Y+1, r18	; 0x01
 b38:	43 cd       	rjmp	.-1402   	; 0x5c0 <main+0x38>
			}
			else if (commonChar == '0') {
 b3a:	80 33       	cpi	r24, 0x30	; 48
 b3c:	09 f0       	breq	.+2      	; 0xb40 <main+0x5b8>
 b3e:	3d cd       	rjmp	.-1414   	; 0x5ba <main+0x32>
				resetCommonLines = 0;
 b40:	19 82       	std	Y+1, r1	; 0x01
 b42:	3f cd       	rjmp	.-1410   	; 0x5c2 <main+0x3a>
			}
		}
		
		// Send back the PCB version number
		else if (receivedChar == READ_PCB_VERSION) {
 b44:	98 36       	cpi	r25, 0x68	; 104
 b46:	11 f4       	brne	.+4      	; 0xb4c <main+0x5c4>
			USART_Transmit(PCB_VERSION);
 b48:	82 e0       	ldi	r24, 0x02	; 2
 b4a:	03 c0       	rjmp	.+6      	; 0xb52 <main+0x5ca>
		}
		
		// Send back the firmware version number
		else if (receivedChar == READ_FIRMWARE_VERSION) {
 b4c:	96 35       	cpi	r25, 0x56	; 86
 b4e:	19 f4       	brne	.+6      	; 0xb56 <main+0x5ce>
			USART_Transmit(FIRMWARE_VERSION);
 b50:	84 e0       	ldi	r24, 0x04	; 4
 b52:	7c da       	rcall	.-2824   	; 0x4c <USART_Transmit>
 b54:	32 cd       	rjmp	.-1436   	; 0x5ba <main+0x32>
		}
		
		// Reset the AVR if it matches the number
		else if (receivedChar == RESET_AVR) {
 b56:	9a 32       	cpi	r25, 0x2A	; 42
 b58:	09 f0       	breq	.+2      	; 0xb5c <main+0x5d4>
 b5a:	2f cd       	rjmp	.-1442   	; 0x5ba <main+0x32>
			usart_read_chars();
 b5c:	93 da       	rcall	.-2778   	; 0x84 <usart_read_chars>
			uint32_t resetValue = strtol(receivedBuffer, NULL, 16);
 b5e:	40 e1       	ldi	r20, 0x10	; 16
 b60:	50 e0       	ldi	r21, 0x00	; 0
 b62:	60 e0       	ldi	r22, 0x00	; 0
 b64:	70 e0       	ldi	r23, 0x00	; 0
 b66:	82 e6       	ldi	r24, 0x62	; 98
 b68:	90 e0       	ldi	r25, 0x00	; 0
 b6a:	11 d0       	rcall	.+34     	; 0xb8e <strtol>
			if (resetValue == RESET_VALUE) {
 b6c:	61 3e       	cpi	r22, 0xE1	; 225
 b6e:	75 4e       	sbci	r23, 0xE5	; 229
 b70:	87 40       	sbci	r24, 0x07	; 7
 b72:	91 05       	cpc	r25, r1
 b74:	09 f0       	breq	.+2      	; 0xb78 <main+0x5f0>
 b76:	21 cd       	rjmp	.-1470   	; 0x5ba <main+0x32>
				// Clear watchdog flag
				MCUCSR &= ~(1<<WDRF);
 b78:	84 b7       	in	r24, 0x34	; 52
 b7a:	87 7f       	andi	r24, 0xF7	; 247
 b7c:	84 bf       	out	0x34, r24	; 52
				
				// Start timed sequence
				WDTCR = (1<<WDCE) | (1<<WDE);
 b7e:	88 e1       	ldi	r24, 0x18	; 24
 b80:	81 bd       	out	0x21, r24	; 33
				
				// Reset in 250 ms
				WDTCR = (1<<WDP2) | (1<<WDE);
 b82:	8c e0       	ldi	r24, 0x0C	; 12
 b84:	81 bd       	out	0x21, r24	; 33
 b86:	c5 01       	movw	r24, r10
 b88:	01 97       	sbiw	r24, 0x01	; 1
 b8a:	f1 f7       	brne	.-4      	; 0xb88 <main+0x600>
 b8c:	16 cd       	rjmp	.-1492   	; 0x5ba <main+0x32>

00000b8e <strtol>:
 b8e:	a0 e0       	ldi	r26, 0x00	; 0
 b90:	b0 e0       	ldi	r27, 0x00	; 0
 b92:	ec ec       	ldi	r30, 0xCC	; 204
 b94:	f5 e0       	ldi	r31, 0x05	; 5
 b96:	72 c1       	rjmp	.+740    	; 0xe7c <__prologue_saves__>
 b98:	5c 01       	movw	r10, r24
 b9a:	6b 01       	movw	r12, r22
 b9c:	7a 01       	movw	r14, r20
 b9e:	61 15       	cp	r22, r1
 ba0:	71 05       	cpc	r23, r1
 ba2:	19 f0       	breq	.+6      	; 0xbaa <strtol+0x1c>
 ba4:	fb 01       	movw	r30, r22
 ba6:	91 83       	std	Z+1, r25	; 0x01
 ba8:	80 83       	st	Z, r24
 baa:	e1 14       	cp	r14, r1
 bac:	f1 04       	cpc	r15, r1
 bae:	29 f0       	breq	.+10     	; 0xbba <strtol+0x2c>
 bb0:	c7 01       	movw	r24, r14
 bb2:	02 97       	sbiw	r24, 0x02	; 2
 bb4:	83 97       	sbiw	r24, 0x23	; 35
 bb6:	08 f0       	brcs	.+2      	; 0xbba <strtol+0x2c>
 bb8:	ee c0       	rjmp	.+476    	; 0xd96 <strtol+0x208>
 bba:	e5 01       	movw	r28, r10
 bbc:	21 96       	adiw	r28, 0x01	; 1
 bbe:	f5 01       	movw	r30, r10
 bc0:	10 81       	ld	r17, Z
 bc2:	81 2f       	mov	r24, r17
 bc4:	90 e0       	ldi	r25, 0x00	; 0
 bc6:	0c d1       	rcall	.+536    	; 0xde0 <isspace>
 bc8:	89 2b       	or	r24, r25
 bca:	11 f0       	breq	.+4      	; 0xbd0 <strtol+0x42>
 bcc:	5e 01       	movw	r10, r28
 bce:	f5 cf       	rjmp	.-22     	; 0xbba <strtol+0x2c>
 bd0:	1d 32       	cpi	r17, 0x2D	; 45
 bd2:	29 f4       	brne	.+10     	; 0xbde <strtol+0x50>
 bd4:	21 96       	adiw	r28, 0x01	; 1
 bd6:	f5 01       	movw	r30, r10
 bd8:	11 81       	ldd	r17, Z+1	; 0x01
 bda:	01 e0       	ldi	r16, 0x01	; 1
 bdc:	07 c0       	rjmp	.+14     	; 0xbec <strtol+0x5e>
 bde:	1b 32       	cpi	r17, 0x2B	; 43
 be0:	21 f4       	brne	.+8      	; 0xbea <strtol+0x5c>
 be2:	e5 01       	movw	r28, r10
 be4:	22 96       	adiw	r28, 0x02	; 2
 be6:	f5 01       	movw	r30, r10
 be8:	11 81       	ldd	r17, Z+1	; 0x01
 bea:	00 e0       	ldi	r16, 0x00	; 0
 bec:	e1 14       	cp	r14, r1
 bee:	f1 04       	cpc	r15, r1
 bf0:	59 f1       	breq	.+86     	; 0xc48 <strtol+0xba>
 bf2:	f0 e1       	ldi	r31, 0x10	; 16
 bf4:	ef 16       	cp	r14, r31
 bf6:	f1 04       	cpc	r15, r1
 bf8:	61 f4       	brne	.+24     	; 0xc12 <strtol+0x84>
 bfa:	10 33       	cpi	r17, 0x30	; 48
 bfc:	e1 f4       	brne	.+56     	; 0xc36 <strtol+0xa8>
 bfe:	88 81       	ld	r24, Y
 c00:	8f 7d       	andi	r24, 0xDF	; 223
 c02:	88 35       	cpi	r24, 0x58	; 88
 c04:	69 f5       	brne	.+90     	; 0xc60 <strtol+0xd2>
 c06:	19 81       	ldd	r17, Y+1	; 0x01
 c08:	22 96       	adiw	r28, 0x02	; 2
 c0a:	02 60       	ori	r16, 0x02	; 2
 c0c:	70 e1       	ldi	r23, 0x10	; 16
 c0e:	e7 2e       	mov	r14, r23
 c10:	f1 2c       	mov	r15, r1
 c12:	88 e0       	ldi	r24, 0x08	; 8
 c14:	e8 16       	cp	r14, r24
 c16:	f1 04       	cpc	r15, r1
 c18:	39 f1       	breq	.+78     	; 0xc68 <strtol+0xda>
 c1a:	2c f4       	brge	.+10     	; 0xc26 <strtol+0x98>
 c1c:	f2 e0       	ldi	r31, 0x02	; 2
 c1e:	ef 16       	cp	r14, r31
 c20:	f1 04       	cpc	r15, r1
 c22:	c1 f1       	breq	.+112    	; 0xc94 <strtol+0x106>
 c24:	2a c0       	rjmp	.+84     	; 0xc7a <strtol+0xec>
 c26:	8a e0       	ldi	r24, 0x0A	; 10
 c28:	e8 16       	cp	r14, r24
 c2a:	f1 04       	cpc	r15, r1
 c2c:	79 f0       	breq	.+30     	; 0xc4c <strtol+0xbe>
 c2e:	e0 e1       	ldi	r30, 0x10	; 16
 c30:	ee 16       	cp	r14, r30
 c32:	f1 04       	cpc	r15, r1
 c34:	11 f5       	brne	.+68     	; 0xc7a <strtol+0xec>
 c36:	50 e1       	ldi	r21, 0x10	; 16
 c38:	e5 2e       	mov	r14, r21
 c3a:	f1 2c       	mov	r15, r1
 c3c:	81 2c       	mov	r8, r1
 c3e:	91 2c       	mov	r9, r1
 c40:	a1 2c       	mov	r10, r1
 c42:	68 e0       	ldi	r22, 0x08	; 8
 c44:	b6 2e       	mov	r11, r22
 c46:	2b c0       	rjmp	.+86     	; 0xc9e <strtol+0x110>
 c48:	10 33       	cpi	r17, 0x30	; 48
 c4a:	c9 f2       	breq	.-78     	; 0xbfe <strtol+0x70>
 c4c:	3a e0       	ldi	r19, 0x0A	; 10
 c4e:	e3 2e       	mov	r14, r19
 c50:	f1 2c       	mov	r15, r1
 c52:	4c ec       	ldi	r20, 0xCC	; 204
 c54:	84 2e       	mov	r8, r20
 c56:	98 2c       	mov	r9, r8
 c58:	a8 2c       	mov	r10, r8
 c5a:	4c e0       	ldi	r20, 0x0C	; 12
 c5c:	b4 2e       	mov	r11, r20
 c5e:	1f c0       	rjmp	.+62     	; 0xc9e <strtol+0x110>
 c60:	10 e3       	ldi	r17, 0x30	; 48
 c62:	e1 14       	cp	r14, r1
 c64:	f1 04       	cpc	r15, r1
 c66:	a9 f6       	brne	.-86     	; 0xc12 <strtol+0x84>
 c68:	98 e0       	ldi	r25, 0x08	; 8
 c6a:	e9 2e       	mov	r14, r25
 c6c:	f1 2c       	mov	r15, r1
 c6e:	81 2c       	mov	r8, r1
 c70:	91 2c       	mov	r9, r1
 c72:	a1 2c       	mov	r10, r1
 c74:	20 e1       	ldi	r18, 0x10	; 16
 c76:	b2 2e       	mov	r11, r18
 c78:	12 c0       	rjmp	.+36     	; 0xc9e <strtol+0x110>
 c7a:	60 e0       	ldi	r22, 0x00	; 0
 c7c:	70 e0       	ldi	r23, 0x00	; 0
 c7e:	80 e0       	ldi	r24, 0x00	; 0
 c80:	90 e8       	ldi	r25, 0x80	; 128
 c82:	97 01       	movw	r18, r14
 c84:	0f 2c       	mov	r0, r15
 c86:	00 0c       	add	r0, r0
 c88:	44 0b       	sbc	r20, r20
 c8a:	55 0b       	sbc	r21, r21
 c8c:	cb d0       	rcall	.+406    	; 0xe24 <__udivmodsi4>
 c8e:	49 01       	movw	r8, r18
 c90:	5a 01       	movw	r10, r20
 c92:	05 c0       	rjmp	.+10     	; 0xc9e <strtol+0x110>
 c94:	81 2c       	mov	r8, r1
 c96:	91 2c       	mov	r9, r1
 c98:	a1 2c       	mov	r10, r1
 c9a:	80 e4       	ldi	r24, 0x40	; 64
 c9c:	b8 2e       	mov	r11, r24
 c9e:	60 e0       	ldi	r22, 0x00	; 0
 ca0:	20 e0       	ldi	r18, 0x00	; 0
 ca2:	30 e0       	ldi	r19, 0x00	; 0
 ca4:	a9 01       	movw	r20, r18
 ca6:	27 01       	movw	r4, r14
 ca8:	0f 2c       	mov	r0, r15
 caa:	00 0c       	add	r0, r0
 cac:	66 08       	sbc	r6, r6
 cae:	77 08       	sbc	r7, r7
 cb0:	1e 01       	movw	r2, r28
 cb2:	e0 ed       	ldi	r30, 0xD0	; 208
 cb4:	e1 0f       	add	r30, r17
 cb6:	ea 30       	cpi	r30, 0x0A	; 10
 cb8:	60 f0       	brcs	.+24     	; 0xcd2 <strtol+0x144>
 cba:	8f eb       	ldi	r24, 0xBF	; 191
 cbc:	81 0f       	add	r24, r17
 cbe:	8a 31       	cpi	r24, 0x1A	; 26
 cc0:	10 f4       	brcc	.+4      	; 0xcc6 <strtol+0x138>
 cc2:	e9 ec       	ldi	r30, 0xC9	; 201
 cc4:	05 c0       	rjmp	.+10     	; 0xcd0 <strtol+0x142>
 cc6:	8f e9       	ldi	r24, 0x9F	; 159
 cc8:	81 0f       	add	r24, r17
 cca:	8a 31       	cpi	r24, 0x1A	; 26
 ccc:	20 f5       	brcc	.+72     	; 0xd16 <strtol+0x188>
 cce:	e9 ea       	ldi	r30, 0xA9	; 169
 cd0:	e1 0f       	add	r30, r17
 cd2:	8e 2f       	mov	r24, r30
 cd4:	90 e0       	ldi	r25, 0x00	; 0
 cd6:	8e 15       	cp	r24, r14
 cd8:	9f 05       	cpc	r25, r15
 cda:	ec f4       	brge	.+58     	; 0xd16 <strtol+0x188>
 cdc:	67 fd       	sbrc	r22, 7
 cde:	17 c0       	rjmp	.+46     	; 0xd0e <strtol+0x180>
 ce0:	82 16       	cp	r8, r18
 ce2:	93 06       	cpc	r9, r19
 ce4:	a4 06       	cpc	r10, r20
 ce6:	b5 06       	cpc	r11, r21
 ce8:	88 f0       	brcs	.+34     	; 0xd0c <strtol+0x17e>
 cea:	c3 01       	movw	r24, r6
 cec:	b2 01       	movw	r22, r4
 cee:	8b d0       	rcall	.+278    	; 0xe06 <__mulsi3>
 cf0:	9b 01       	movw	r18, r22
 cf2:	ac 01       	movw	r20, r24
 cf4:	2e 0f       	add	r18, r30
 cf6:	31 1d       	adc	r19, r1
 cf8:	41 1d       	adc	r20, r1
 cfa:	51 1d       	adc	r21, r1
 cfc:	21 30       	cpi	r18, 0x01	; 1
 cfe:	31 05       	cpc	r19, r1
 d00:	41 05       	cpc	r20, r1
 d02:	f0 e8       	ldi	r31, 0x80	; 128
 d04:	5f 07       	cpc	r21, r31
 d06:	10 f4       	brcc	.+4      	; 0xd0c <strtol+0x17e>
 d08:	61 e0       	ldi	r22, 0x01	; 1
 d0a:	01 c0       	rjmp	.+2      	; 0xd0e <strtol+0x180>
 d0c:	6f ef       	ldi	r22, 0xFF	; 255
 d0e:	21 96       	adiw	r28, 0x01	; 1
 d10:	f1 01       	movw	r30, r2
 d12:	10 81       	ld	r17, Z
 d14:	cd cf       	rjmp	.-102    	; 0xcb0 <strtol+0x122>
 d16:	80 2f       	mov	r24, r16
 d18:	81 70       	andi	r24, 0x01	; 1
 d1a:	c1 14       	cp	r12, r1
 d1c:	d1 04       	cpc	r13, r1
 d1e:	71 f0       	breq	.+28     	; 0xd3c <strtol+0x1ae>
 d20:	66 23       	and	r22, r22
 d22:	29 f0       	breq	.+10     	; 0xd2e <strtol+0x1a0>
 d24:	21 97       	sbiw	r28, 0x01	; 1
 d26:	f6 01       	movw	r30, r12
 d28:	d1 83       	std	Z+1, r29	; 0x01
 d2a:	c0 83       	st	Z, r28
 d2c:	07 c0       	rjmp	.+14     	; 0xd3c <strtol+0x1ae>
 d2e:	01 ff       	sbrs	r16, 1
 d30:	19 c0       	rjmp	.+50     	; 0xd64 <strtol+0x1d6>
 d32:	22 97       	sbiw	r28, 0x02	; 2
 d34:	f6 01       	movw	r30, r12
 d36:	d1 83       	std	Z+1, r29	; 0x01
 d38:	c0 83       	st	Z, r28
 d3a:	14 c0       	rjmp	.+40     	; 0xd64 <strtol+0x1d6>
 d3c:	67 ff       	sbrs	r22, 7
 d3e:	12 c0       	rjmp	.+36     	; 0xd64 <strtol+0x1d6>
 d40:	81 11       	cpse	r24, r1
 d42:	05 c0       	rjmp	.+10     	; 0xd4e <strtol+0x1c0>
 d44:	2f ef       	ldi	r18, 0xFF	; 255
 d46:	3f ef       	ldi	r19, 0xFF	; 255
 d48:	4f ef       	ldi	r20, 0xFF	; 255
 d4a:	5f e7       	ldi	r21, 0x7F	; 127
 d4c:	04 c0       	rjmp	.+8      	; 0xd56 <strtol+0x1c8>
 d4e:	20 e0       	ldi	r18, 0x00	; 0
 d50:	30 e0       	ldi	r19, 0x00	; 0
 d52:	40 e0       	ldi	r20, 0x00	; 0
 d54:	50 e8       	ldi	r21, 0x80	; 128
 d56:	82 e2       	ldi	r24, 0x22	; 34
 d58:	90 e0       	ldi	r25, 0x00	; 0
 d5a:	90 93 ed 00 	sts	0x00ED, r25	; 0x8000ed <errno+0x1>
 d5e:	80 93 ec 00 	sts	0x00EC, r24	; 0x8000ec <errno>
 d62:	16 c0       	rjmp	.+44     	; 0xd90 <strtol+0x202>
 d64:	88 23       	and	r24, r24
 d66:	41 f0       	breq	.+16     	; 0xd78 <strtol+0x1ea>
 d68:	50 95       	com	r21
 d6a:	40 95       	com	r20
 d6c:	30 95       	com	r19
 d6e:	21 95       	neg	r18
 d70:	3f 4f       	sbci	r19, 0xFF	; 255
 d72:	4f 4f       	sbci	r20, 0xFF	; 255
 d74:	5f 4f       	sbci	r21, 0xFF	; 255
 d76:	0c c0       	rjmp	.+24     	; 0xd90 <strtol+0x202>
 d78:	57 ff       	sbrs	r21, 7
 d7a:	0a c0       	rjmp	.+20     	; 0xd90 <strtol+0x202>
 d7c:	82 e2       	ldi	r24, 0x22	; 34
 d7e:	90 e0       	ldi	r25, 0x00	; 0
 d80:	90 93 ed 00 	sts	0x00ED, r25	; 0x8000ed <errno+0x1>
 d84:	80 93 ec 00 	sts	0x00EC, r24	; 0x8000ec <errno>
 d88:	2f ef       	ldi	r18, 0xFF	; 255
 d8a:	3f ef       	ldi	r19, 0xFF	; 255
 d8c:	4f ef       	ldi	r20, 0xFF	; 255
 d8e:	5f e7       	ldi	r21, 0x7F	; 127
 d90:	b9 01       	movw	r22, r18
 d92:	ca 01       	movw	r24, r20
 d94:	04 c0       	rjmp	.+8      	; 0xd9e <strtol+0x210>
 d96:	60 e0       	ldi	r22, 0x00	; 0
 d98:	70 e0       	ldi	r23, 0x00	; 0
 d9a:	80 e0       	ldi	r24, 0x00	; 0
 d9c:	90 e0       	ldi	r25, 0x00	; 0
 d9e:	cd b7       	in	r28, 0x3d	; 61
 da0:	de b7       	in	r29, 0x3e	; 62
 da2:	e2 e1       	ldi	r30, 0x12	; 18
 da4:	87 c0       	rjmp	.+270    	; 0xeb4 <__epilogue_restores__>

00000da6 <atoi>:
 da6:	fc 01       	movw	r30, r24
 da8:	88 27       	eor	r24, r24
 daa:	99 27       	eor	r25, r25
 dac:	e8 94       	clt
 dae:	21 91       	ld	r18, Z+
 db0:	20 32       	cpi	r18, 0x20	; 32
 db2:	e9 f3       	breq	.-6      	; 0xdae <atoi+0x8>
 db4:	29 30       	cpi	r18, 0x09	; 9
 db6:	10 f0       	brcs	.+4      	; 0xdbc <atoi+0x16>
 db8:	2e 30       	cpi	r18, 0x0E	; 14
 dba:	c8 f3       	brcs	.-14     	; 0xdae <atoi+0x8>
 dbc:	2b 32       	cpi	r18, 0x2B	; 43
 dbe:	39 f0       	breq	.+14     	; 0xdce <atoi+0x28>
 dc0:	2d 32       	cpi	r18, 0x2D	; 45
 dc2:	31 f4       	brne	.+12     	; 0xdd0 <atoi+0x2a>
 dc4:	68 94       	set
 dc6:	03 c0       	rjmp	.+6      	; 0xdce <atoi+0x28>
 dc8:	13 d0       	rcall	.+38     	; 0xdf0 <__mulhi_const_10>
 dca:	82 0f       	add	r24, r18
 dcc:	91 1d       	adc	r25, r1
 dce:	21 91       	ld	r18, Z+
 dd0:	20 53       	subi	r18, 0x30	; 48
 dd2:	2a 30       	cpi	r18, 0x0A	; 10
 dd4:	c8 f3       	brcs	.-14     	; 0xdc8 <atoi+0x22>
 dd6:	1e f4       	brtc	.+6      	; 0xdde <atoi+0x38>
 dd8:	90 95       	com	r25
 dda:	81 95       	neg	r24
 ddc:	9f 4f       	sbci	r25, 0xFF	; 255
 dde:	08 95       	ret

00000de0 <isspace>:
 de0:	91 11       	cpse	r25, r1
 de2:	0e c0       	rjmp	.+28     	; 0xe00 <__ctype_isfalse>
 de4:	80 32       	cpi	r24, 0x20	; 32
 de6:	19 f0       	breq	.+6      	; 0xdee <isspace+0xe>
 de8:	89 50       	subi	r24, 0x09	; 9
 dea:	85 50       	subi	r24, 0x05	; 5
 dec:	d0 f7       	brcc	.-12     	; 0xde2 <isspace+0x2>
 dee:	08 95       	ret

00000df0 <__mulhi_const_10>:
 df0:	7a e0       	ldi	r23, 0x0A	; 10
 df2:	97 9f       	mul	r25, r23
 df4:	90 2d       	mov	r25, r0
 df6:	87 9f       	mul	r24, r23
 df8:	80 2d       	mov	r24, r0
 dfa:	91 0d       	add	r25, r1
 dfc:	11 24       	eor	r1, r1
 dfe:	08 95       	ret

00000e00 <__ctype_isfalse>:
 e00:	99 27       	eor	r25, r25
 e02:	88 27       	eor	r24, r24

00000e04 <__ctype_istrue>:
 e04:	08 95       	ret

00000e06 <__mulsi3>:
 e06:	db 01       	movw	r26, r22
 e08:	8f 93       	push	r24
 e0a:	9f 93       	push	r25
 e0c:	2d d0       	rcall	.+90     	; 0xe68 <__muluhisi3>
 e0e:	bf 91       	pop	r27
 e10:	af 91       	pop	r26
 e12:	a2 9f       	mul	r26, r18
 e14:	80 0d       	add	r24, r0
 e16:	91 1d       	adc	r25, r1
 e18:	a3 9f       	mul	r26, r19
 e1a:	90 0d       	add	r25, r0
 e1c:	b2 9f       	mul	r27, r18
 e1e:	90 0d       	add	r25, r0
 e20:	11 24       	eor	r1, r1
 e22:	08 95       	ret

00000e24 <__udivmodsi4>:
 e24:	a1 e2       	ldi	r26, 0x21	; 33
 e26:	1a 2e       	mov	r1, r26
 e28:	aa 1b       	sub	r26, r26
 e2a:	bb 1b       	sub	r27, r27
 e2c:	fd 01       	movw	r30, r26
 e2e:	0d c0       	rjmp	.+26     	; 0xe4a <__udivmodsi4_ep>

00000e30 <__udivmodsi4_loop>:
 e30:	aa 1f       	adc	r26, r26
 e32:	bb 1f       	adc	r27, r27
 e34:	ee 1f       	adc	r30, r30
 e36:	ff 1f       	adc	r31, r31
 e38:	a2 17       	cp	r26, r18
 e3a:	b3 07       	cpc	r27, r19
 e3c:	e4 07       	cpc	r30, r20
 e3e:	f5 07       	cpc	r31, r21
 e40:	20 f0       	brcs	.+8      	; 0xe4a <__udivmodsi4_ep>
 e42:	a2 1b       	sub	r26, r18
 e44:	b3 0b       	sbc	r27, r19
 e46:	e4 0b       	sbc	r30, r20
 e48:	f5 0b       	sbc	r31, r21

00000e4a <__udivmodsi4_ep>:
 e4a:	66 1f       	adc	r22, r22
 e4c:	77 1f       	adc	r23, r23
 e4e:	88 1f       	adc	r24, r24
 e50:	99 1f       	adc	r25, r25
 e52:	1a 94       	dec	r1
 e54:	69 f7       	brne	.-38     	; 0xe30 <__udivmodsi4_loop>
 e56:	60 95       	com	r22
 e58:	70 95       	com	r23
 e5a:	80 95       	com	r24
 e5c:	90 95       	com	r25
 e5e:	9b 01       	movw	r18, r22
 e60:	ac 01       	movw	r20, r24
 e62:	bd 01       	movw	r22, r26
 e64:	cf 01       	movw	r24, r30
 e66:	08 95       	ret

00000e68 <__muluhisi3>:
 e68:	40 d0       	rcall	.+128    	; 0xeea <__umulhisi3>
 e6a:	a5 9f       	mul	r26, r21
 e6c:	90 0d       	add	r25, r0
 e6e:	b4 9f       	mul	r27, r20
 e70:	90 0d       	add	r25, r0
 e72:	a4 9f       	mul	r26, r20
 e74:	80 0d       	add	r24, r0
 e76:	91 1d       	adc	r25, r1
 e78:	11 24       	eor	r1, r1
 e7a:	08 95       	ret

00000e7c <__prologue_saves__>:
 e7c:	2f 92       	push	r2
 e7e:	3f 92       	push	r3
 e80:	4f 92       	push	r4
 e82:	5f 92       	push	r5
 e84:	6f 92       	push	r6
 e86:	7f 92       	push	r7
 e88:	8f 92       	push	r8
 e8a:	9f 92       	push	r9
 e8c:	af 92       	push	r10
 e8e:	bf 92       	push	r11
 e90:	cf 92       	push	r12
 e92:	df 92       	push	r13
 e94:	ef 92       	push	r14
 e96:	ff 92       	push	r15
 e98:	0f 93       	push	r16
 e9a:	1f 93       	push	r17
 e9c:	cf 93       	push	r28
 e9e:	df 93       	push	r29
 ea0:	cd b7       	in	r28, 0x3d	; 61
 ea2:	de b7       	in	r29, 0x3e	; 62
 ea4:	ca 1b       	sub	r28, r26
 ea6:	db 0b       	sbc	r29, r27
 ea8:	0f b6       	in	r0, 0x3f	; 63
 eaa:	f8 94       	cli
 eac:	de bf       	out	0x3e, r29	; 62
 eae:	0f be       	out	0x3f, r0	; 63
 eb0:	cd bf       	out	0x3d, r28	; 61
 eb2:	09 94       	ijmp

00000eb4 <__epilogue_restores__>:
 eb4:	2a 88       	ldd	r2, Y+18	; 0x12
 eb6:	39 88       	ldd	r3, Y+17	; 0x11
 eb8:	48 88       	ldd	r4, Y+16	; 0x10
 eba:	5f 84       	ldd	r5, Y+15	; 0x0f
 ebc:	6e 84       	ldd	r6, Y+14	; 0x0e
 ebe:	7d 84       	ldd	r7, Y+13	; 0x0d
 ec0:	8c 84       	ldd	r8, Y+12	; 0x0c
 ec2:	9b 84       	ldd	r9, Y+11	; 0x0b
 ec4:	aa 84       	ldd	r10, Y+10	; 0x0a
 ec6:	b9 84       	ldd	r11, Y+9	; 0x09
 ec8:	c8 84       	ldd	r12, Y+8	; 0x08
 eca:	df 80       	ldd	r13, Y+7	; 0x07
 ecc:	ee 80       	ldd	r14, Y+6	; 0x06
 ece:	fd 80       	ldd	r15, Y+5	; 0x05
 ed0:	0c 81       	ldd	r16, Y+4	; 0x04
 ed2:	1b 81       	ldd	r17, Y+3	; 0x03
 ed4:	aa 81       	ldd	r26, Y+2	; 0x02
 ed6:	b9 81       	ldd	r27, Y+1	; 0x01
 ed8:	ce 0f       	add	r28, r30
 eda:	d1 1d       	adc	r29, r1
 edc:	0f b6       	in	r0, 0x3f	; 63
 ede:	f8 94       	cli
 ee0:	de bf       	out	0x3e, r29	; 62
 ee2:	0f be       	out	0x3f, r0	; 63
 ee4:	cd bf       	out	0x3d, r28	; 61
 ee6:	ed 01       	movw	r28, r26
 ee8:	08 95       	ret

00000eea <__umulhisi3>:
 eea:	a2 9f       	mul	r26, r18
 eec:	b0 01       	movw	r22, r0
 eee:	b3 9f       	mul	r27, r19
 ef0:	c0 01       	movw	r24, r0
 ef2:	a3 9f       	mul	r26, r19
 ef4:	01 d0       	rcall	.+2      	; 0xef8 <__umulhisi3+0xe>
 ef6:	b2 9f       	mul	r27, r18
 ef8:	70 0d       	add	r23, r0
 efa:	81 1d       	adc	r24, r1
 efc:	11 24       	eor	r1, r1
 efe:	91 1d       	adc	r25, r1
 f00:	08 95       	ret

00000f02 <_exit>:
 f02:	f8 94       	cli

00000f04 <__stop_program>:
 f04:	ff cf       	rjmp	.-2      	; 0xf04 <__stop_program>
