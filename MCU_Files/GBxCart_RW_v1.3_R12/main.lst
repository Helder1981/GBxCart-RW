   1               		.file	"main.c"
   2               	__SP_H__ = 0x3e
   3               	__SP_L__ = 0x3d
   4               	__SREG__ = 0x3f
   5               	__tmp_reg__ = 0
   6               	__zero_reg__ = 1
   7               		.text
   8               	.Ltext0:
   9               		.cfi_sections	.debug_frame
  10               	.global	USART_Receive
  12               	USART_Receive:
  13               	.LFB12:
  14               		.file 1 "setup.c"
   1:setup.c       **** /*
   2:setup.c       ****  GBxCart RW
   3:setup.c       ****  PCB version: 1.3
   4:setup.c       ****  Firmware version: R12
   5:setup.c       ****  Author: Alex from insideGadgets (www.insidegadgets.com)
   6:setup.c       ****  Created: 7/11/2016
   7:setup.c       ****  Last Modified: 4/12/2018
   8:setup.c       ****  
   9:setup.c       ****  */
  10:setup.c       ****  
  11:setup.c       **** #ifndef cbi
  12:setup.c       **** #define cbi(sfr, bit) (_SFR_BYTE(sfr) &= ~_BV(bit))
  13:setup.c       **** #endif
  14:setup.c       **** #ifndef sbi
  15:setup.c       **** #define sbi(sfr, bit) (_SFR_BYTE(sfr) |= _BV(bit))
  16:setup.c       **** #endif
  17:setup.c       **** 
  18:setup.c       **** #ifndef NULL
  19:setup.c       **** #define NULL ((void *)0)
  20:setup.c       **** #endif
  21:setup.c       **** 
  22:setup.c       **** #define LOW 0
  23:setup.c       **** #define HIGH 1
  24:setup.c       **** #define false 0
  25:setup.c       **** #define true 1
  26:setup.c       **** 
  27:setup.c       **** #define VOLTAGE_SELECT PD2
  28:setup.c       **** #define ACTIVITY_LED PD3
  29:setup.c       **** #define LED_5V PD7
  30:setup.c       **** #define LED_3V PE0
  31:setup.c       **** 
  32:setup.c       **** #define WR_PIN PD6
  33:setup.c       **** #define RD_PIN PD5
  34:setup.c       **** #define CS_MREQ_PIN PD4
  35:setup.c       **** #define CS2_PIN PE2
  36:setup.c       **** #define AUDIO_PIN PE1
  37:setup.c       **** 
  38:setup.c       **** #define wrPin_high	PORTD |= (1<<WR_PIN);
  39:setup.c       **** #define wrPin_low		PORTD &= ~(1<<WR_PIN);
  40:setup.c       **** #define rdPin_high	PORTD |= (1<<RD_PIN);
  41:setup.c       **** #define rdPin_low		PORTD &= ~(1<<RD_PIN);
  42:setup.c       **** #define cs_mreqPin_high		PORTD |= (1<<CS_MREQ_PIN);
  43:setup.c       **** #define cs_mreqPin_low		PORTD &= ~(1<<CS_MREQ_PIN);
  44:setup.c       **** #define cs2Pin_high		PORTE |= (1<<CS2_PIN);
  45:setup.c       **** #define cs2Pin_low		PORTE &= ~(1<<CS2_PIN);
  46:setup.c       **** #define audioPin_high	PORTE |= (1<<AUDIO_PIN);
  47:setup.c       **** #define audioPin_low		PORTE &= ~(1<<AUDIO_PIN);
  48:setup.c       **** 
  49:setup.c       **** #define GB_MODE 1
  50:setup.c       **** #define GBA_MODE 2
  51:setup.c       **** 
  52:setup.c       **** // GB/GBC
  53:setup.c       **** #define PORT_ADDR7_0 PORTB
  54:setup.c       **** #define PORT_ADDR15_8 PORTA
  55:setup.c       **** #define PORT_DATA7_0 PORTC
  56:setup.c       **** 
  57:setup.c       **** #define DDR_ADDR7_0 DDRB
  58:setup.c       **** #define DDR_ADDR15_8 DDRA
  59:setup.c       **** #define DDR_DATA7_0 DDRC
  60:setup.c       **** 
  61:setup.c       **** #define PIN_ADDR7_0 PINB
  62:setup.c       **** #define PIN_ADDR15_8 PINA
  63:setup.c       **** #define PIN_DATA7_0 PINC
  64:setup.c       **** 
  65:setup.c       **** #define BANK_WRITE 0
  66:setup.c       **** #define MEMORY_WRITE 1
  67:setup.c       **** 
  68:setup.c       **** // GBA
  69:setup.c       **** #define EEPROM_WRITE 1
  70:setup.c       **** #define EEPROM_READ 0
  71:setup.c       **** 
  72:setup.c       **** #define EEPROM_NONE 0
  73:setup.c       **** #define EEPROM_4KBIT 1
  74:setup.c       **** #define EEPROM_64KBIT 2
  75:setup.c       **** 
  76:setup.c       **** #define AD0 PB0
  77:setup.c       **** #define ad0Pin_high		PORTB |= (1<<AD0);
  78:setup.c       **** #define ad0Pin_low		PORTB &= ~(1<<AD0);
  79:setup.c       **** 
  80:setup.c       **** #define A23 PC7
  81:setup.c       **** #define a23Pin_high		PORTC |= (1<<A23);
  82:setup.c       **** #define a23Pin_low		PORTC &= ~(1<<A23);
  83:setup.c       **** 
  84:setup.c       **** #define GBA_DDR_ROM_ADDR7_0 DDRB
  85:setup.c       **** #define GBA_DDR_ROM_ADDR15_8 DDRA
  86:setup.c       **** #define GBA_DDR_ROM_ADDR23_16 DDRC
  87:setup.c       **** #define GBA_DDR_ROM_DATA7_0 DDRB
  88:setup.c       **** #define GBA_DDR_ROM_DATA15_8 DDRA
  89:setup.c       **** #define GBA_DDR_RAM_DATA7_0 DDRC
  90:setup.c       **** #define GBA_DDR_EEPROM_DATA7_0 DDRB
  91:setup.c       **** 
  92:setup.c       **** #define GBA_PORT_ROM_ADDR7_0 PORTB
  93:setup.c       **** #define GBA_PORT_ROM_ADDR15_8 PORTA
  94:setup.c       **** #define GBA_PORT_ROM_ADDR23_16 PORTC
  95:setup.c       **** #define GBA_PORT_ROM_DATA7_0 PORTB
  96:setup.c       **** #define GBA_PORT_ROM_DATA15_8 PORTA
  97:setup.c       **** #define GBA_PORT_RAM_DATA7_0 PORTC
  98:setup.c       **** #define GBA_PORT_EEPROM_DATA7_0 PORTB
  99:setup.c       **** 
 100:setup.c       **** #define GBA_PIN_ROM_DATA7_0 PINB
 101:setup.c       **** #define GBA_PIN_ROM_DATA15_8 PINA
 102:setup.c       **** #define GBA_PIN_RAM_DATA7_0 PINC
 103:setup.c       **** #define GBA_PIN_EEPROM_DATA7_0 PINB
 104:setup.c       **** 
 105:setup.c       **** // GB/GBC commands
 106:setup.c       **** #define SET_START_ADDRESS 'A'
 107:setup.c       **** #define READ_ROM_RAM 'R'
 108:setup.c       **** #define WRITE_RAM 'W'
 109:setup.c       **** #define SET_BANK 'B'
 110:setup.c       **** #define GB_CART_MODE 'G'
 111:setup.c       **** 
 112:setup.c       **** // GBA commands
 113:setup.c       **** #define GBA_READ_ROM 'r'
 114:setup.c       **** #define GBA_READ_ROM_256BYTE 'j'
 115:setup.c       **** #define GBA_READ_SRAM 'm'
 116:setup.c       **** #define GBA_WRITE_SRAM 'w'
 117:setup.c       **** #define GBA_WRITE_ONE_BYTE_SRAM 'o'
 118:setup.c       **** #define GBA_CART_MODE 'g'
 119:setup.c       **** 
 120:setup.c       **** #define GBA_FLASH_READ_ID 'i'
 121:setup.c       **** #define GBA_FLASH_SET_BANK 'k'
 122:setup.c       **** #define GBA_FLASH_4K_SECTOR_ERASE 's'
 123:setup.c       **** #define GBA_FLASH_WRITE_BYTE 'b'
 124:setup.c       **** #define GBA_FLASH_WRITE_ATMEL 'a'
 125:setup.c       **** 
 126:setup.c       **** #define GBA_SET_EEPROM_SIZE 'S'
 127:setup.c       **** #define GBA_READ_EEPROM 'e'
 128:setup.c       **** #define GBA_WRITE_EEPROM 'p'
 129:setup.c       **** 
 130:setup.c       **** // Flash Cart commands
 131:setup.c       **** #define GB_FLASH_WE_PIN 'P'
 132:setup.c       **** 	#define WE_AS_AUDIO_PIN 'A'
 133:setup.c       **** 	#define WE_AS_WR_PIN 'W'
 134:setup.c       **** 
 135:setup.c       **** #define GB_FLASH_PROGRAM_METHOD 'E'
 136:setup.c       **** 	#define GB_FLASH_PROGRAM_555 0
 137:setup.c       **** 	#define GB_FLASH_PROGRAM_AAA 1
 138:setup.c       **** 	#define GB_FLASH_PROGRAM_555_BIT01_SWAPPED 2
 139:setup.c       **** 	#define GB_FLASH_PROGRAM_AAA_BIT01_SWAPPED 3
 140:setup.c       **** 	#define GB_FLASH_PROGRAM_5555 4
 141:setup.c       **** 
 142:setup.c       **** #define GB_FLASH_WRITE_BYTE 'F'
 143:setup.c       **** #define GB_FLASH_WRITE_BUFFERED_32BYTE 'Y'
 144:setup.c       **** #define GB_FLASH_WRITE_64BYTE 'T'
 145:setup.c       **** #define GB_FLASH_WRITE_256BYTE 'X'
 146:setup.c       **** 
 147:setup.c       **** #define GB_FLASH_BANK_1_COMMAND_WRITES 'N'
 148:setup.c       **** 
 149:setup.c       **** #define GBA_FLASH_CART_WRITE_BYTE 'n'
 150:setup.c       **** #define GBA_FLASH_WRITE_64BYTE_SWAPPED_D0D1 'q'
 151:setup.c       **** #define GBA_FLASH_WRITE_256BYTE_SWAPPED_D0D1 't'
 152:setup.c       **** #define GBA_FLASH_WRITE_256BYTE 'f'
 153:setup.c       **** #define GBA_FLASH_WRITE_INTEL_64BYTE 'l'
 154:setup.c       **** 
 155:setup.c       **** #define D0D1_NOT_SWAPPED 0
 156:setup.c       **** #define D0D1_SWAPPED 1
 157:setup.c       **** 
 158:setup.c       **** // General commands
 159:setup.c       **** #define SEND_ACK '1'
 160:setup.c       **** #define CART_MODE 'C'
 161:setup.c       **** #define SET_INPUT 'I'
 162:setup.c       **** #define SET_OUTPUT 'O'
 163:setup.c       **** #define SET_OUTPUT_LOW 'L'
 164:setup.c       **** #define SET_OUTPUT_HIGH 'H'
 165:setup.c       **** #define READ_INPUT 'D'
 166:setup.c       **** #define RESET_COMMON_LINES 'M'
 167:setup.c       **** #define READ_FIRMWARE_VERSION 'V'
 168:setup.c       **** #define READ_PCB_VERSION 'h'
 169:setup.c       **** #define VOLTAGE_3_3V '3'
 170:setup.c       **** #define VOLTAGE_5V '5'
 171:setup.c       **** 
 172:setup.c       **** #define RESET_AVR '*'
 173:setup.c       **** #define RESET_VALUE 0x7E5E1
 174:setup.c       **** 
 175:setup.c       **** 
 176:setup.c       **** char receivedBuffer[256];
 177:setup.c       **** char receivedChar;
 178:setup.c       **** uint8_t eepromBuffer[8];
 179:setup.c       **** uint8_t flashChipIdBuffer[2];
 180:setup.c       **** 
 181:setup.c       **** char flashWriteWePin;
 182:setup.c       **** uint16_t flashWriteCycle[3][2];
 183:setup.c       **** uint8_t flashBank1CommandWrites = 0;
 184:setup.c       **** uint8_t lastBankAccessed = 0;
 185:setup.c       **** 
 186:setup.c       **** uint8_t cartMode = GBA_MODE;
 187:setup.c       **** 
 188:setup.c       **** // Receive USART data
 189:setup.c       **** uint8_t USART_Receive(void) {
  15               		.loc 1 189 0
  16               		.cfi_startproc
  17               	/* prologue: function */
  18               	/* frame size = 0 */
  19               	/* stack size = 0 */
  20               	.L__stack_usage = 0
  21               	.L2:
 190:setup.c       **** 	while ( !(UCSRA & (1<<RXC)) ); // Wait for data to be received
  22               		.loc 1 190 0 discriminator 1
  23 0000 5F9B      		sbis 0xb,7
  24 0002 00C0      		rjmp .L2
 191:setup.c       **** 	return UDR; // Get and return received data from buffer
  25               		.loc 1 191 0
  26 0004 8CB1      		in r24,0xc
 192:setup.c       **** }
  27               		.loc 1 192 0
  28 0006 0895      		ret
  29               		.cfi_endproc
  30               	.LFE12:
  32               	.global	USART_Transmit
  34               	USART_Transmit:
  35               	.LFB13:
 193:setup.c       **** 
 194:setup.c       **** // Transmit USART data
 195:setup.c       **** void USART_Transmit(unsigned char data) {
  36               		.loc 1 195 0
  37               		.cfi_startproc
  38               	/* prologue: function */
  39               	/* frame size = 0 */
  40               	/* stack size = 0 */
  41               	.L__stack_usage = 0
  42               	.LVL0:
  43               	.L6:
 196:setup.c       **** 	while ( !( UCSRA & (1<<UDRE)) ); // Wait for empty transmit buffer
  44               		.loc 1 196 0 discriminator 1
  45 0008 5D9B      		sbis 0xb,5
  46 000a 00C0      		rjmp .L6
 197:setup.c       **** 	UDR = data;
  47               		.loc 1 197 0
  48 000c 8CB9      		out 0xc,r24
  49 000e 0895      		ret
  50               		.cfi_endproc
  51               	.LFE13:
  53               	.global	usart_read_bytes
  55               	usart_read_bytes:
  56               	.LFB14:
 198:setup.c       **** }
 199:setup.c       **** 
 200:setup.c       **** // Read 1-256 bytes from the USART 
 201:setup.c       **** void usart_read_bytes(int count) {
  57               		.loc 1 201 0
  58               		.cfi_startproc
  59               	.LVL1:
  60 0010 0F93      		push r16
  61               	.LCFI0:
  62               		.cfi_def_cfa_offset 3
  63               		.cfi_offset 16, -2
  64 0012 1F93      		push r17
  65               	.LCFI1:
  66               		.cfi_def_cfa_offset 4
  67               		.cfi_offset 17, -3
  68 0014 CF93      		push r28
  69               	.LCFI2:
  70               		.cfi_def_cfa_offset 5
  71               		.cfi_offset 28, -4
  72 0016 DF93      		push r29
  73               	.LCFI3:
  74               		.cfi_def_cfa_offset 6
  75               		.cfi_offset 29, -5
  76               	/* prologue: function */
  77               	/* frame size = 0 */
  78               	/* stack size = 4 */
  79               	.L__stack_usage = 4
  80 0018 8C01      		movw r16,r24
  81               	.LVL2:
  82               	.LBB98:
 202:setup.c       **** 	for (int x = 0; x < count; x++) {
  83               		.loc 1 202 0
  84 001a C0E0      		ldi r28,lo8(receivedBuffer)
  85 001c D0E0      		ldi r29,hi8(receivedBuffer)
  86               	.LVL3:
  87               	.L10:
  88               		.loc 1 202 0 is_stmt 0 discriminator 1
  89 001e CE01      		movw r24,r28
  90 0020 8050      		subi r24,lo8(receivedBuffer)
  91 0022 9040      		sbci r25,hi8(receivedBuffer)
  92               	.LVL4:
  93 0024 8017      		cp r24,r16
  94 0026 9107      		cpc r25,r17
  95 0028 04F4      		brge .L12
 203:setup.c       **** 		receivedBuffer[x] = USART_Receive();
  96               		.loc 1 203 0 is_stmt 1 discriminator 3
  97 002a 00D0      		rcall USART_Receive
  98               	.LVL5:
  99 002c 8993      		st Y+,r24
 100               	.LVL6:
 101 002e 00C0      		rjmp .L10
 102               	.LVL7:
 103               	.L12:
 104               	/* epilogue start */
 105               	.LBE98:
 204:setup.c       **** 	}
 205:setup.c       **** }
 106               		.loc 1 205 0
 107 0030 DF91      		pop r29
 108 0032 CF91      		pop r28
 109 0034 1F91      		pop r17
 110 0036 0F91      		pop r16
 111               	.LVL8:
 112 0038 0895      		ret
 113               		.cfi_endproc
 114               	.LFE14:
 116               	.global	usart_read_chars
 118               	usart_read_chars:
 119               	.LFB15:
 206:setup.c       **** 
 207:setup.c       **** // Read the USART until a 0 (string terminator byte) is received
 208:setup.c       **** void usart_read_chars(void) {
 120               		.loc 1 208 0
 121               		.cfi_startproc
 122 003a CF93      		push r28
 123               	.LCFI4:
 124               		.cfi_def_cfa_offset 3
 125               		.cfi_offset 28, -2
 126 003c DF93      		push r29
 127               	.LCFI5:
 128               		.cfi_def_cfa_offset 4
 129               		.cfi_offset 29, -3
 130               	/* prologue: function */
 131               	/* frame size = 0 */
 132               	/* stack size = 2 */
 133               	.L__stack_usage = 2
 134               	.LVL9:
 135 003e C0E0      		ldi r28,lo8(receivedBuffer)
 136 0040 D0E0      		ldi r29,hi8(receivedBuffer)
 137               	.LVL10:
 138               	.L14:
 209:setup.c       **** 	int x = 0;
 210:setup.c       **** 	while (1) {
 211:setup.c       **** 		receivedBuffer[x] = USART_Receive();
 139               		.loc 1 211 0
 140 0042 00D0      		rcall USART_Receive
 141               	.LVL11:
 142 0044 8993      		st Y+,r24
 143               	.LVL12:
 212:setup.c       **** 		if (receivedBuffer[x] == 0) {
 144               		.loc 1 212 0
 145 0046 8111      		cpse r24,__zero_reg__
 146 0048 00C0      		rjmp .L14
 147               	/* epilogue start */
 213:setup.c       **** 			break;
 214:setup.c       **** 		}
 215:setup.c       **** 		x++;
 216:setup.c       **** 	}
 217:setup.c       **** }
 148               		.loc 1 217 0
 149 004a DF91      		pop r29
 150 004c CF91      		pop r28
 151               	.LVL13:
 152 004e 0895      		ret
 153               		.cfi_endproc
 154               	.LFE15:
 156               	.global	rd_wr_csmreq_cs2_reset
 158               	rd_wr_csmreq_cs2_reset:
 159               	.LFB16:
 218:setup.c       **** 
 219:setup.c       **** // Turn RD, WR, CS/MREQ and CS2 to high so they are deselected (reset state)
 220:setup.c       **** void rd_wr_csmreq_cs2_reset(void) {
 160               		.loc 1 220 0
 161               		.cfi_startproc
 162               	/* prologue: function */
 163               	/* frame size = 0 */
 164               	/* stack size = 0 */
 165               	.L__stack_usage = 0
 221:setup.c       **** 	cs2Pin_high; // CS2 off
 166               		.loc 1 221 0
 167 0050 3A9A      		sbi 0x7,2
 222:setup.c       **** 	cs_mreqPin_high; // CS/MREQ off
 168               		.loc 1 222 0
 169 0052 949A      		sbi 0x12,4
 223:setup.c       **** 	rdPin_high; // RD off
 170               		.loc 1 223 0
 171 0054 959A      		sbi 0x12,5
 224:setup.c       **** 	wrPin_high; // WR off
 172               		.loc 1 224 0
 173 0056 969A      		sbi 0x12,6
 174 0058 0895      		ret
 175               		.cfi_endproc
 176               	.LFE16:
 178               	.global	gb_mode
 180               	gb_mode:
 181               	.LFB17:
 225:setup.c       **** }
 226:setup.c       **** 
 227:setup.c       **** 
 228:setup.c       **** 
 229:setup.c       **** // ****** Gameboy / Gameboy Colour functions ******
 230:setup.c       **** 
 231:setup.c       **** // Set Gameboy mode
 232:setup.c       **** void gb_mode(void) {
 182               		.loc 1 232 0
 183               		.cfi_startproc
 184               	/* prologue: function */
 185               	/* frame size = 0 */
 186               	/* stack size = 0 */
 187               	.L__stack_usage = 0
 233:setup.c       **** 	// Set inputs
 234:setup.c       **** 	PORT_DATA7_0 = 0;
 188               		.loc 1 234 0
 189 005a 15BA      		out 0x15,__zero_reg__
 235:setup.c       **** 	DDR_DATA7_0 = 0;
 190               		.loc 1 235 0
 191 005c 14BA      		out 0x14,__zero_reg__
 236:setup.c       **** 	
 237:setup.c       **** 	// Set outputs
 238:setup.c       **** 	PORT_ADDR7_0 = 0;
 192               		.loc 1 238 0
 193 005e 18BA      		out 0x18,__zero_reg__
 239:setup.c       **** 	PORT_ADDR15_8 = 0;
 194               		.loc 1 239 0
 195 0060 1BBA      		out 0x1b,__zero_reg__
 240:setup.c       **** 	DDR_ADDR7_0 = 0xFF;
 196               		.loc 1 240 0
 197 0062 8FEF      		ldi r24,lo8(-1)
 198 0064 87BB      		out 0x17,r24
 241:setup.c       **** 	DDR_ADDR15_8 = 0xFF;
 199               		.loc 1 241 0
 200 0066 8ABB      		out 0x1a,r24
 201 0068 0895      		ret
 202               		.cfi_endproc
 203               	.LFE17:
 205               	.global	set_16bit_address
 207               	set_16bit_address:
 208               	.LFB18:
 242:setup.c       **** }
 243:setup.c       **** 
 244:setup.c       **** // Set the 16 bit address on A15-0
 245:setup.c       **** void set_16bit_address(uint16_t address) {
 209               		.loc 1 245 0
 210               		.cfi_startproc
 211               	.LVL14:
 212               	/* prologue: function */
 213               	/* frame size = 0 */
 214               	/* stack size = 0 */
 215               	.L__stack_usage = 0
 246:setup.c       **** 	PORT_ADDR15_8 = (address >> 8);
 216               		.loc 1 246 0
 217 006a 9BBB      		out 0x1b,r25
 247:setup.c       **** 	PORT_ADDR7_0 = (address & 0xFF);
 218               		.loc 1 247 0
 219 006c 88BB      		out 0x18,r24
 220 006e 0895      		ret
 221               		.cfi_endproc
 222               	.LFE18:
 224               	.global	read_8bit_data
 226               	read_8bit_data:
 227               	.LFB19:
 248:setup.c       **** }
 249:setup.c       **** 
 250:setup.c       **** // Set the address and read a byte from the 8 bit data line
 251:setup.c       **** uint8_t read_8bit_data(uint16_t address) {
 228               		.loc 1 251 0
 229               		.cfi_startproc
 230               	.LVL15:
 231               	/* prologue: function */
 232               	/* frame size = 0 */
 233               	/* stack size = 0 */
 234               	.L__stack_usage = 0
 252:setup.c       **** 	set_16bit_address(address);
 235               		.loc 1 252 0
 236 0070 00D0      		rcall set_16bit_address
 237               	.LVL16:
 253:setup.c       **** 	
 254:setup.c       **** 	cs_mreqPin_low;
 238               		.loc 1 254 0
 239 0072 9498      		cbi 0x12,4
 255:setup.c       **** 	rdPin_low;
 240               		.loc 1 255 0
 241 0074 9598      		cbi 0x12,5
 256:setup.c       **** 	
 257:setup.c       **** 	asm volatile("nop"); // Delay a little (minimum needed is 1 nops, 2 nops for GB camera)
 242               		.loc 1 257 0
 243               	/* #APP */
 244               	 ;  257 "setup.c" 1
 245 0076 0000      		nop
 246               	 ;  0 "" 2
 258:setup.c       **** 	asm volatile("nop");
 247               		.loc 1 258 0
 248               	 ;  258 "setup.c" 1
 249 0078 0000      		nop
 250               	 ;  0 "" 2
 259:setup.c       **** 	uint8_t data = PIN_DATA7_0; // Read data
 251               		.loc 1 259 0
 252               	/* #NOAPP */
 253 007a 83B3      		in r24,0x13
 254               	.LVL17:
 260:setup.c       **** 	
 261:setup.c       **** 	rdPin_high;
 255               		.loc 1 261 0
 256 007c 959A      		sbi 0x12,5
 262:setup.c       **** 	cs_mreqPin_high;
 257               		.loc 1 262 0
 258 007e 949A      		sbi 0x12,4
 263:setup.c       **** 	
 264:setup.c       **** 	return data;
 265:setup.c       **** }
 259               		.loc 1 265 0
 260 0080 0895      		ret
 261               		.cfi_endproc
 262               	.LFE19:
 264               	.global	write_8bit_data
 266               	write_8bit_data:
 267               	.LFB20:
 266:setup.c       **** 
 267:setup.c       **** // Set the address and write a byte to the 8 bit data line and pulse cs/mREQ if writing to RAM
 268:setup.c       **** void write_8bit_data(uint16_t address, uint8_t data, uint8_t type) {
 268               		.loc 1 268 0
 269               		.cfi_startproc
 270               	.LVL18:
 271 0082 CF93      		push r28
 272               	.LCFI6:
 273               		.cfi_def_cfa_offset 3
 274               		.cfi_offset 28, -2
 275 0084 DF93      		push r29
 276               	.LCFI7:
 277               		.cfi_def_cfa_offset 4
 278               		.cfi_offset 29, -3
 279               	/* prologue: function */
 280               	/* frame size = 0 */
 281               	/* stack size = 2 */
 282               	.L__stack_usage = 2
 283 0086 D62F      		mov r29,r22
 284 0088 C42F      		mov r28,r20
 269:setup.c       **** 	set_16bit_address(address);
 285               		.loc 1 269 0
 286 008a 00D0      		rcall set_16bit_address
 287               	.LVL19:
 270:setup.c       **** 	
 271:setup.c       **** 	DDR_DATA7_0 = 0xFF; // Set data pins as outputs
 288               		.loc 1 271 0
 289 008c 8FEF      		ldi r24,lo8(-1)
 290 008e 84BB      		out 0x14,r24
 272:setup.c       **** 	PORT_DATA7_0 = data; // Set data
 291               		.loc 1 272 0
 292 0090 D5BB      		out 0x15,r29
 273:setup.c       **** 	
 274:setup.c       **** 	// Pulse WR and mREQ if the type matches
 275:setup.c       **** 	wrPin_low;
 293               		.loc 1 275 0
 294 0092 9698      		cbi 0x12,6
 276:setup.c       **** 	if (type == MEMORY_WRITE) {
 295               		.loc 1 276 0
 296 0094 C130      		cpi r28,lo8(1)
 297 0096 01F4      		brne .L21
 277:setup.c       **** 		cs_mreqPin_low;
 298               		.loc 1 277 0
 299 0098 9498      		cbi 0x12,4
 300               	.L21:
 278:setup.c       **** 	}
 279:setup.c       **** 	
 280:setup.c       **** 	asm volatile("nop");
 301               		.loc 1 280 0
 302               	/* #APP */
 303               	 ;  280 "setup.c" 1
 304 009a 0000      		nop
 305               	 ;  0 "" 2
 281:setup.c       **** 	
 282:setup.c       **** 	if (type == MEMORY_WRITE) {
 306               		.loc 1 282 0
 307               	/* #NOAPP */
 308 009c C130      		cpi r28,lo8(1)
 309 009e 01F4      		brne .L22
 283:setup.c       **** 		cs_mreqPin_high;
 310               		.loc 1 283 0
 311 00a0 949A      		sbi 0x12,4
 312               	.L22:
 284:setup.c       **** 	}
 285:setup.c       **** 	wrPin_high;
 313               		.loc 1 285 0
 314 00a2 969A      		sbi 0x12,6
 286:setup.c       **** 	
 287:setup.c       **** 	// Clear data outputs and set data pins as inputs
 288:setup.c       **** 	PORT_DATA7_0 = 0;
 315               		.loc 1 288 0
 316 00a4 15BA      		out 0x15,__zero_reg__
 289:setup.c       **** 	DDR_DATA7_0 = 0;
 317               		.loc 1 289 0
 318 00a6 14BA      		out 0x14,__zero_reg__
 319               	/* epilogue start */
 290:setup.c       **** }
 320               		.loc 1 290 0
 321 00a8 DF91      		pop r29
 322               	.LVL20:
 323 00aa CF91      		pop r28
 324               	.LVL21:
 325 00ac 0895      		ret
 326               		.cfi_endproc
 327               	.LFE20:
 329               	.global	gba_mode
 331               	gba_mode:
 332               	.LFB21:
 291:setup.c       **** 
 292:setup.c       **** 
 293:setup.c       **** 
 294:setup.c       **** // ****** Gameboy Advance functions ****** 
 295:setup.c       **** 
 296:setup.c       **** // Set GBA mode
 297:setup.c       **** void gba_mode(void) {
 333               		.loc 1 297 0
 334               		.cfi_startproc
 335               	/* prologue: function */
 336               	/* frame size = 0 */
 337               	/* stack size = 0 */
 338               	.L__stack_usage = 0
 298:setup.c       **** 	// Set outputs for reading ROM addresses as default
 299:setup.c       **** 	GBA_PORT_ROM_ADDR7_0 = 0;
 339               		.loc 1 299 0
 340 00ae 18BA      		out 0x18,__zero_reg__
 300:setup.c       **** 	GBA_PORT_ROM_ADDR15_8 = 0;
 341               		.loc 1 300 0
 342 00b0 1BBA      		out 0x1b,__zero_reg__
 301:setup.c       **** 	GBA_PORT_ROM_ADDR23_16 = 0;
 343               		.loc 1 301 0
 344 00b2 15BA      		out 0x15,__zero_reg__
 302:setup.c       **** 	GBA_DDR_ROM_ADDR7_0 = 0xFF;
 345               		.loc 1 302 0
 346 00b4 8FEF      		ldi r24,lo8(-1)
 347 00b6 87BB      		out 0x17,r24
 303:setup.c       **** 	GBA_DDR_ROM_ADDR15_8 = 0xFF;
 348               		.loc 1 303 0
 349 00b8 8ABB      		out 0x1a,r24
 304:setup.c       **** 	GBA_DDR_ROM_ADDR23_16 = 0xFF;
 350               		.loc 1 304 0
 351 00ba 84BB      		out 0x14,r24
 352 00bc 0895      		ret
 353               		.cfi_endproc
 354               	.LFE21:
 356               	.global	gba_set_24bit_address
 358               	gba_set_24bit_address:
 359               	.LFB22:
 305:setup.c       **** }
 306:setup.c       **** 
 307:setup.c       **** // Set the 24 bit address on A23-0
 308:setup.c       **** void gba_set_24bit_address(uint32_t address) {	
 360               		.loc 1 308 0
 361               		.cfi_startproc
 362               	.LVL22:
 363 00be 0F93      		push r16
 364               	.LCFI8:
 365               		.cfi_def_cfa_offset 3
 366               		.cfi_offset 16, -2
 367 00c0 1F93      		push r17
 368               	.LCFI9:
 369               		.cfi_def_cfa_offset 4
 370               		.cfi_offset 17, -3
 371               	/* prologue: function */
 372               	/* frame size = 0 */
 373               	/* stack size = 2 */
 374               	.L__stack_usage = 2
 309:setup.c       **** 	GBA_PORT_ROM_ADDR23_16 = 0; // Set 0-23 address lines low and set as outputs
 375               		.loc 1 309 0
 376 00c2 15BA      		out 0x15,__zero_reg__
 310:setup.c       **** 	GBA_PORT_ROM_ADDR15_8 = 0;
 377               		.loc 1 310 0
 378 00c4 1BBA      		out 0x1b,__zero_reg__
 311:setup.c       **** 	GBA_PORT_ROM_ADDR7_0 = 0;
 379               		.loc 1 311 0
 380 00c6 18BA      		out 0x18,__zero_reg__
 312:setup.c       **** 	GBA_DDR_ROM_ADDR23_16 = 0xFF;
 381               		.loc 1 312 0
 382 00c8 2FEF      		ldi r18,lo8(-1)
 383 00ca 24BB      		out 0x14,r18
 313:setup.c       **** 	GBA_DDR_ROM_ADDR15_8 = 0xFF;
 384               		.loc 1 313 0
 385 00cc 2ABB      		out 0x1a,r18
 314:setup.c       **** 	GBA_DDR_ROM_ADDR7_0 = 0xFF;
 386               		.loc 1 314 0
 387 00ce 27BB      		out 0x17,r18
 315:setup.c       **** 	
 316:setup.c       **** 	GBA_PORT_ROM_ADDR23_16 = (address >> 16);
 388               		.loc 1 316 0
 389 00d0 8C01      		movw r16,r24
 390 00d2 2227      		clr r18
 391 00d4 3327      		clr r19
 392 00d6 05BB      		out 0x15,r16
 317:setup.c       **** 	GBA_PORT_ROM_ADDR15_8 = (address >> 8);
 393               		.loc 1 317 0
 394 00d8 072F      		mov r16,r23
 395 00da 182F      		mov r17,r24
 396 00dc 292F      		mov r18,r25
 397 00de 3327      		clr r19
 398 00e0 0BBB      		out 0x1b,r16
 318:setup.c       **** 	GBA_PORT_ROM_ADDR7_0 = (address & 0xFF);
 399               		.loc 1 318 0
 400 00e2 68BB      		out 0x18,r22
 401               	/* epilogue start */
 319:setup.c       **** }
 402               		.loc 1 319 0
 403 00e4 1F91      		pop r17
 404 00e6 0F91      		pop r16
 405 00e8 0895      		ret
 406               		.cfi_endproc
 407               	.LFE22:
 409               	.global	gba_read_16bit_data
 411               	gba_read_16bit_data:
 412               	.LFB23:
 320:setup.c       **** 
 321:setup.c       **** 
 322:setup.c       **** 
 323:setup.c       **** // ---------- ROM/SRAM ----------
 324:setup.c       **** 
 325:setup.c       **** // Read a byte from the 16 bit data line non-sequentially
 326:setup.c       **** uint16_t gba_read_16bit_data(uint32_t address) {
 413               		.loc 1 326 0
 414               		.cfi_startproc
 415               	.LVL23:
 416               	/* prologue: function */
 417               	/* frame size = 0 */
 418               	/* stack size = 0 */
 419               	.L__stack_usage = 0
 327:setup.c       **** 	gba_set_24bit_address(address);
 420               		.loc 1 327 0
 421 00ea 00D0      		rcall gba_set_24bit_address
 422               	.LVL24:
 328:setup.c       **** 	
 329:setup.c       **** 	cs_mreqPin_low;
 423               		.loc 1 329 0
 424 00ec 9498      		cbi 0x12,4
 330:setup.c       **** 	
 331:setup.c       **** 	GBA_PORT_ROM_ADDR15_8 = 0; // Set A16-A0 address lines low and set as inputs for the data to be re
 425               		.loc 1 331 0
 426 00ee 1BBA      		out 0x1b,__zero_reg__
 332:setup.c       **** 	GBA_PORT_ROM_ADDR7_0 = 0;
 427               		.loc 1 332 0
 428 00f0 18BA      		out 0x18,__zero_reg__
 333:setup.c       **** 	GBA_DDR_ROM_ADDR15_8 = 0;
 429               		.loc 1 333 0
 430 00f2 1ABA      		out 0x1a,__zero_reg__
 334:setup.c       **** 	GBA_DDR_ROM_ADDR7_0 = 0;
 431               		.loc 1 334 0
 432 00f4 17BA      		out 0x17,__zero_reg__
 335:setup.c       **** 	
 336:setup.c       **** 	rdPin_low;
 433               		.loc 1 336 0
 434 00f6 9598      		cbi 0x12,5
 337:setup.c       **** 	asm volatile("nop");
 435               		.loc 1 337 0
 436               	/* #APP */
 437               	 ;  337 "setup.c" 1
 438 00f8 0000      		nop
 439               	 ;  0 "" 2
 338:setup.c       **** 	
 339:setup.c       **** 	uint16_t data = (GBA_PIN_ROM_DATA15_8 << 8) | GBA_PIN_ROM_DATA7_0; // Read data
 440               		.loc 1 339 0
 441               	/* #NOAPP */
 442 00fa 29B3      		in r18,0x19
 443 00fc 86B3      		in r24,0x16
 444               	.LVL25:
 340:setup.c       **** 	
 341:setup.c       **** 	rdPin_high;
 445               		.loc 1 341 0
 446 00fe 959A      		sbi 0x12,5
 342:setup.c       **** 	cs_mreqPin_high;
 447               		.loc 1 342 0
 448 0100 949A      		sbi 0x12,4
 343:setup.c       **** 	
 344:setup.c       **** 	return data;
 449               		.loc 1 344 0
 450 0102 90E0      		ldi r25,0
 345:setup.c       **** }
 451               		.loc 1 345 0
 452 0104 922B      		or r25,r18
 453 0106 0895      		ret
 454               		.cfi_endproc
 455               	.LFE23:
 457               	.global	gba_read_ram_8bit_data
 459               	gba_read_ram_8bit_data:
 460               	.LFB24:
 346:setup.c       **** 
 347:setup.c       **** // Set the address and read a byte from the 8 bit data line
 348:setup.c       **** uint8_t gba_read_ram_8bit_data(uint16_t address) {
 461               		.loc 1 348 0
 462               		.cfi_startproc
 463               	.LVL26:
 464               	/* prologue: function */
 465               	/* frame size = 0 */
 466               	/* stack size = 0 */
 467               	.L__stack_usage = 0
 349:setup.c       **** 	set_16bit_address(address);
 468               		.loc 1 349 0
 469 0108 00D0      		rcall set_16bit_address
 470               	.LVL27:
 350:setup.c       **** 	
 351:setup.c       **** 	rdPin_low;
 471               		.loc 1 351 0
 472 010a 9598      		cbi 0x12,5
 352:setup.c       **** 	cs2Pin_low; // CS2 pin low for SRAM/Flash select
 473               		.loc 1 352 0
 474 010c 3A98      		cbi 0x7,2
 353:setup.c       **** 	
 354:setup.c       **** 	asm volatile("nop"); // Delay a little (minimum needed is 2)
 475               		.loc 1 354 0
 476               	/* #APP */
 477               	 ;  354 "setup.c" 1
 478 010e 0000      		nop
 479               	 ;  0 "" 2
 355:setup.c       **** 	asm volatile("nop");
 480               		.loc 1 355 0
 481               	 ;  355 "setup.c" 1
 482 0110 0000      		nop
 483               	 ;  0 "" 2
 356:setup.c       **** 	
 357:setup.c       **** 	uint8_t data = GBA_PIN_RAM_DATA7_0; // Read data
 484               		.loc 1 357 0
 485               	/* #NOAPP */
 486 0112 83B3      		in r24,0x13
 487               	.LVL28:
 358:setup.c       **** 	
 359:setup.c       **** 	cs2Pin_high;
 488               		.loc 1 359 0
 489 0114 3A9A      		sbi 0x7,2
 360:setup.c       **** 	rdPin_high;
 490               		.loc 1 360 0
 491 0116 959A      		sbi 0x12,5
 361:setup.c       **** 	
 362:setup.c       **** 	return data;
 363:setup.c       **** }
 492               		.loc 1 363 0
 493 0118 0895      		ret
 494               		.cfi_endproc
 495               	.LFE24:
 497               	.global	gba_write_ram_8bit_data
 499               	gba_write_ram_8bit_data:
 500               	.LFB25:
 364:setup.c       **** 
 365:setup.c       **** // Set the address and write a byte to the 8 bit data line 
 366:setup.c       **** void gba_write_ram_8bit_data(uint16_t address, uint8_t data) {
 501               		.loc 1 366 0
 502               		.cfi_startproc
 503               	.LVL29:
 504 011a CF93      		push r28
 505               	.LCFI10:
 506               		.cfi_def_cfa_offset 3
 507               		.cfi_offset 28, -2
 508               	/* prologue: function */
 509               	/* frame size = 0 */
 510               	/* stack size = 1 */
 511               	.L__stack_usage = 1
 512 011c C62F      		mov r28,r22
 367:setup.c       **** 	set_16bit_address(address);
 513               		.loc 1 367 0
 514 011e 00D0      		rcall set_16bit_address
 515               	.LVL30:
 368:setup.c       **** 	
 369:setup.c       **** 	GBA_DDR_RAM_DATA7_0 = 0xFF; // Set data pins as outputs
 516               		.loc 1 369 0
 517 0120 8FEF      		ldi r24,lo8(-1)
 518 0122 84BB      		out 0x14,r24
 370:setup.c       **** 	GBA_PORT_RAM_DATA7_0 = data; // Set data
 519               		.loc 1 370 0
 520 0124 C5BB      		out 0x15,r28
 371:setup.c       **** 	
 372:setup.c       **** 	// Pulse WR
 373:setup.c       **** 	wrPin_low;
 521               		.loc 1 373 0
 522 0126 9698      		cbi 0x12,6
 374:setup.c       **** 	cs2Pin_low; // CS2 pin low for SRAM/Flash select
 523               		.loc 1 374 0
 524 0128 3A98      		cbi 0x7,2
 375:setup.c       **** 	
 376:setup.c       **** 	asm volatile("nop");
 525               		.loc 1 376 0
 526               	/* #APP */
 527               	 ;  376 "setup.c" 1
 528 012a 0000      		nop
 529               	 ;  0 "" 2
 377:setup.c       **** 	asm volatile("nop");
 530               		.loc 1 377 0
 531               	 ;  377 "setup.c" 1
 532 012c 0000      		nop
 533               	 ;  0 "" 2
 378:setup.c       **** 	
 379:setup.c       **** 	cs2Pin_high;
 534               		.loc 1 379 0
 535               	/* #NOAPP */
 536 012e 3A9A      		sbi 0x7,2
 380:setup.c       **** 	wrPin_high;
 537               		.loc 1 380 0
 538 0130 969A      		sbi 0x12,6
 381:setup.c       **** 	
 382:setup.c       **** 	// Clear data outputs and set data pins as inputs
 383:setup.c       **** 	GBA_PORT_RAM_DATA7_0 = 0;
 539               		.loc 1 383 0
 540 0132 15BA      		out 0x15,__zero_reg__
 384:setup.c       **** 	GBA_DDR_RAM_DATA7_0 = 0;
 541               		.loc 1 384 0
 542 0134 14BA      		out 0x14,__zero_reg__
 543               	/* epilogue start */
 385:setup.c       **** }
 544               		.loc 1 385 0
 545 0136 CF91      		pop r28
 546               	.LVL31:
 547 0138 0895      		ret
 548               		.cfi_endproc
 549               	.LFE25:
 551               	.global	gba_eeprom_mode
 553               	gba_eeprom_mode:
 554               	.LFB26:
 386:setup.c       **** 
 387:setup.c       **** 
 388:setup.c       **** 
 389:setup.c       **** // ---------- EEPROM ----------
 390:setup.c       **** 
 391:setup.c       **** // Set address/data all high (includes AD0/A23)
 392:setup.c       **** void gba_eeprom_mode (void) {
 555               		.loc 1 392 0
 556               		.cfi_startproc
 557               	/* prologue: function */
 558               	/* frame size = 0 */
 559               	/* stack size = 0 */
 560               	.L__stack_usage = 0
 393:setup.c       **** 	GBA_DDR_ROM_ADDR7_0 = 0xFF;
 561               		.loc 1 393 0
 562 013a 8FEF      		ldi r24,lo8(-1)
 563 013c 87BB      		out 0x17,r24
 394:setup.c       **** 	GBA_DDR_ROM_ADDR15_8 = 0xFF;
 564               		.loc 1 394 0
 565 013e 8ABB      		out 0x1a,r24
 395:setup.c       **** 	GBA_DDR_ROM_ADDR23_16 = 0xFF;
 566               		.loc 1 395 0
 567 0140 84BB      		out 0x14,r24
 396:setup.c       **** 	GBA_PORT_ROM_ADDR7_0 = 0x80;
 568               		.loc 1 396 0
 569 0142 90E8      		ldi r25,lo8(-128)
 570 0144 98BB      		out 0x18,r25
 397:setup.c       **** 	GBA_PORT_ROM_ADDR15_8 = 0xFF;
 571               		.loc 1 397 0
 572 0146 8BBB      		out 0x1b,r24
 398:setup.c       **** 	GBA_PORT_ROM_ADDR23_16 = 0xFF;
 573               		.loc 1 398 0
 574 0148 85BB      		out 0x15,r24
 575 014a 0895      		ret
 576               		.cfi_endproc
 577               	.LFE26:
 579               	.global	gba_eeprom_set_address
 581               	gba_eeprom_set_address:
 582               	.LFB27:
 399:setup.c       **** }
 400:setup.c       **** 
 401:setup.c       **** // Send out EEPROM address serially (WR clock, AD0 data out)
 402:setup.c       **** void gba_eeprom_set_address(uint16_t address, uint8_t eepromSize, uint8_t command) {
 583               		.loc 1 402 0
 584               		.cfi_startproc
 585               	.LVL32:
 586               	/* prologue: function */
 587               	/* frame size = 0 */
 588               	/* stack size = 0 */
 589               	.L__stack_usage = 0
 403:setup.c       **** 	cs_mreqPin_low;
 590               		.loc 1 403 0
 591 014c 9498      		cbi 0x12,4
 592               	.LVL33:
 404:setup.c       **** 	
 405:setup.c       **** 	int8_t x = 0;
 406:setup.c       **** 	if (eepromSize == EEPROM_64KBIT) {
 593               		.loc 1 406 0
 594 014e 6230      		cpi r22,lo8(2)
 595 0150 01F4      		brne .L30
 407:setup.c       **** 		if (command == EEPROM_READ) {
 596               		.loc 1 407 0
 597 0152 4111      		cpse r20,__zero_reg__
 598 0154 00C0      		rjmp .L31
 408:setup.c       **** 			address |= (1<<15) | (1<<14); // Set upper 2 bits high for read request
 599               		.loc 1 408 0
 600 0156 906C      		ori r25,192
 601               	.LVL34:
 602               	.L40:
 409:setup.c       **** 		}
 410:setup.c       **** 		else {
 411:setup.c       **** 			address |= (1<<15); // Set upper 1 bit high for write request
 412:setup.c       **** 		}
 413:setup.c       **** 		x = 15;
 603               		.loc 1 413 0
 604 0158 2FE0      		ldi r18,lo8(15)
 605               	.L33:
 606               	.LVL35:
 414:setup.c       **** 	}
 415:setup.c       **** 	else {
 416:setup.c       **** 		if (command == EEPROM_READ) {
 417:setup.c       **** 			address |= (1<<7) | (1<<6);
 418:setup.c       **** 		}
 419:setup.c       **** 		else {
 420:setup.c       **** 			address |= (1<<7);
 421:setup.c       **** 		}
 422:setup.c       **** 		x = 7;
 423:setup.c       **** 	}
 424:setup.c       **** 	
 425:setup.c       **** 	// Loop through address, 8 or 16 bits depending on EEPROM (includes the 2 bits for request type)
 426:setup.c       **** 	while (x >= 0) {
 427:setup.c       **** 		if (address & (1<<x)) {
 607               		.loc 1 427 0
 608 015a E1E0      		ldi r30,lo8(1)
 609 015c F0E0      		ldi r31,0
 610 015e 00C0      		rjmp .L32
 611               	.LVL36:
 612               	.L31:
 411:setup.c       **** 		}
 613               		.loc 1 411 0
 614 0160 9068      		ori r25,128
 615               	.LVL37:
 616 0162 00C0      		rjmp .L40
 617               	.L30:
 416:setup.c       **** 			address |= (1<<7) | (1<<6);
 618               		.loc 1 416 0
 619 0164 4111      		cpse r20,__zero_reg__
 620 0166 00C0      		rjmp .L34
 417:setup.c       **** 		}
 621               		.loc 1 417 0
 622 0168 806C      		ori r24,192
 623               	.LVL38:
 624 016a 00C0      		rjmp .L39
 625               	.L34:
 420:setup.c       **** 		}
 626               		.loc 1 420 0
 627 016c 8068      		ori r24,128
 628               	.LVL39:
 629               	.L39:
 422:setup.c       **** 	}
 630               		.loc 1 422 0
 631 016e 27E0      		ldi r18,lo8(7)
 632 0170 00C0      		rjmp .L33
 633               	.LVL40:
 634               	.L35:
 428:setup.c       **** 			ad0Pin_high;
 429:setup.c       **** 		}
 430:setup.c       **** 		else {
 431:setup.c       **** 			ad0Pin_low;
 635               		.loc 1 431 0
 636 0172 C098      		cbi 0x18,0
 637               	.L36:
 432:setup.c       **** 		}
 433:setup.c       **** 		
 434:setup.c       **** 		wrPin_low; // CLK
 638               		.loc 1 434 0
 639 0174 9698      		cbi 0x12,6
 435:setup.c       **** 		asm ("nop");
 640               		.loc 1 435 0
 641               	/* #APP */
 642               	 ;  435 "setup.c" 1
 643 0176 0000      		nop
 644               	 ;  0 "" 2
 436:setup.c       **** 		asm ("nop");
 645               		.loc 1 436 0
 646               	 ;  436 "setup.c" 1
 647 0178 0000      		nop
 648               	 ;  0 "" 2
 437:setup.c       **** 		wrPin_high; 
 649               		.loc 1 437 0
 650               	/* #NOAPP */
 651 017a 969A      		sbi 0x12,6
 438:setup.c       **** 		asm ("nop");
 652               		.loc 1 438 0
 653               	/* #APP */
 654               	 ;  438 "setup.c" 1
 655 017c 0000      		nop
 656               	 ;  0 "" 2
 439:setup.c       **** 		asm ("nop");
 657               		.loc 1 439 0
 658               	 ;  439 "setup.c" 1
 659 017e 0000      		nop
 660               	 ;  0 "" 2
 661               	/* #NOAPP */
 662 0180 2150      		subi r18,lo8(-(-1))
 663               	.LVL41:
 426:setup.c       **** 		if (address & (1<<x)) {
 664               		.loc 1 426 0
 665 0182 27FD      		sbrc r18,7
 666 0184 00C0      		rjmp .L41
 667               	.L32:
 427:setup.c       **** 			ad0Pin_high;
 668               		.loc 1 427 0
 669 0186 BF01      		movw r22,r30
 670 0188 022E      		mov r0,r18
 671 018a 00C0      		rjmp 2f
 672               		1:
 673 018c 660F      		lsl r22
 674 018e 771F      		rol r23
 675               		2:
 676 0190 0A94      		dec r0
 677 0192 02F4      		brpl 1b
 678 0194 6823      		and r22,r24
 679 0196 7923      		and r23,r25
 680 0198 672B      		or r22,r23
 681 019a 01F0      		breq .L35
 428:setup.c       **** 		}
 682               		.loc 1 428 0
 683 019c C09A      		sbi 0x18,0
 684 019e 00C0      		rjmp .L36
 685               	.L41:
 440:setup.c       **** 		
 441:setup.c       **** 		x--;
 442:setup.c       **** 	}
 443:setup.c       **** 	
 444:setup.c       **** 	// Only send stop bit (0) and WR/CS high if reading, as writing is done in 1 continuous chunk
 445:setup.c       **** 	if (command == EEPROM_READ) {  
 686               		.loc 1 445 0
 687 01a0 4111      		cpse r20,__zero_reg__
 688 01a2 00C0      		rjmp .L29
 446:setup.c       **** 		ad0Pin_low;
 689               		.loc 1 446 0
 690 01a4 C098      		cbi 0x18,0
 447:setup.c       **** 		asm ("nop");
 691               		.loc 1 447 0
 692               	/* #APP */
 693               	 ;  447 "setup.c" 1
 694 01a6 0000      		nop
 695               	 ;  0 "" 2
 448:setup.c       **** 		wrPin_low;
 696               		.loc 1 448 0
 697               	/* #NOAPP */
 698 01a8 9698      		cbi 0x12,6
 449:setup.c       **** 		asm ("nop");
 699               		.loc 1 449 0
 700               	/* #APP */
 701               	 ;  449 "setup.c" 1
 702 01aa 0000      		nop
 703               	 ;  0 "" 2
 450:setup.c       **** 		asm ("nop");
 704               		.loc 1 450 0
 705               	 ;  450 "setup.c" 1
 706 01ac 0000      		nop
 707               	 ;  0 "" 2
 451:setup.c       **** 		
 452:setup.c       **** 		wrPin_high;
 708               		.loc 1 452 0
 709               	/* #NOAPP */
 710 01ae 969A      		sbi 0x12,6
 453:setup.c       **** 		cs_mreqPin_high;
 711               		.loc 1 453 0
 712 01b0 949A      		sbi 0x12,4
 713               	.L29:
 714 01b2 0895      		ret
 715               		.cfi_endproc
 716               	.LFE27:
 718               	.global	gba_eeprom_read
 720               	gba_eeprom_read:
 721               	.LFB28:
 454:setup.c       **** 	}
 455:setup.c       **** }
 456:setup.c       **** 
 457:setup.c       **** // Read 8 bytes from the EEPROM address, data is valid on rising edge
 458:setup.c       **** void gba_eeprom_read(uint16_t address, uint8_t eepromSize) {
 722               		.loc 1 458 0
 723               		.cfi_startproc
 724               	.LVL42:
 725               	/* prologue: function */
 726               	/* frame size = 0 */
 727               	/* stack size = 0 */
 728               	.L__stack_usage = 0
 459:setup.c       **** 	gba_eeprom_set_address(address, eepromSize, EEPROM_READ);
 729               		.loc 1 459 0
 730 01b4 40E0      		ldi r20,0
 731 01b6 00D0      		rcall gba_eeprom_set_address
 732               	.LVL43:
 460:setup.c       **** 	
 461:setup.c       **** 	// Set AD0 pin as input
 462:setup.c       **** 	GBA_PORT_EEPROM_DATA7_0 &= ~(1<<AD0);
 733               		.loc 1 462 0
 734 01b8 C098      		cbi 0x18,0
 463:setup.c       **** 	GBA_DDR_EEPROM_DATA7_0 &= ~(1<<AD0);
 735               		.loc 1 463 0
 736 01ba B898      		cbi 0x17,0
 464:setup.c       **** 	
 465:setup.c       **** 	cs_mreqPin_low;
 737               		.loc 1 465 0
 738 01bc 9498      		cbi 0x12,4
 739               	.LVL44:
 740 01be 84E0      		ldi r24,lo8(4)
 741               	.LVL45:
 742               	.L43:
 743               	.LBB99:
 466:setup.c       **** 	
 467:setup.c       **** 	// Ignore first 4 bits
 468:setup.c       **** 	for (int8_t x = 0; x < 4; x++) {
 469:setup.c       **** 		rdPin_low; // CLK
 744               		.loc 1 469 0 discriminator 3
 745 01c0 9598      		cbi 0x12,5
 470:setup.c       **** 		asm ("nop");
 746               		.loc 1 470 0 discriminator 3
 747               	/* #APP */
 748               	 ;  470 "setup.c" 1
 749 01c2 0000      		nop
 750               	 ;  0 "" 2
 471:setup.c       **** 		asm ("nop");
 751               		.loc 1 471 0 discriminator 3
 752               	 ;  471 "setup.c" 1
 753 01c4 0000      		nop
 754               	 ;  0 "" 2
 472:setup.c       **** 		rdPin_high; 
 755               		.loc 1 472 0 discriminator 3
 756               	/* #NOAPP */
 757 01c6 959A      		sbi 0x12,5
 473:setup.c       **** 		asm ("nop");
 758               		.loc 1 473 0 discriminator 3
 759               	/* #APP */
 760               	 ;  473 "setup.c" 1
 761 01c8 0000      		nop
 762               	 ;  0 "" 2
 474:setup.c       **** 		asm ("nop");
 763               		.loc 1 474 0 discriminator 3
 764               	 ;  474 "setup.c" 1
 765 01ca 0000      		nop
 766               	 ;  0 "" 2
 767               	.LVL46:
 768               	/* #NOAPP */
 769 01cc 8150      		subi r24,lo8(-(-1))
 770               	.LVL47:
 468:setup.c       **** 		rdPin_low; // CLK
 771               		.loc 1 468 0 discriminator 3
 772 01ce 01F4      		brne .L43
 773 01d0 E0E0      		ldi r30,lo8(eepromBuffer)
 774 01d2 F0E0      		ldi r31,hi8(eepromBuffer)
 775               	.LBE99:
 776               	.LBB100:
 777               	.LBB101:
 778               	.LBB102:
 475:setup.c       **** 	}
 476:setup.c       **** 	
 477:setup.c       **** 	// Read out 64 bits
 478:setup.c       **** 	for (uint8_t c = 0; c < 8; c++) {
 479:setup.c       **** 		uint8_t data = 0;
 480:setup.c       **** 		for (int8_t x = 7; x >= 0; x--) {
 481:setup.c       **** 			rdPin_low; // CLK
 482:setup.c       **** 			asm ("nop");
 483:setup.c       **** 			asm ("nop");
 484:setup.c       **** 			rdPin_high;
 485:setup.c       **** 			
 486:setup.c       **** 			if (GBA_PIN_EEPROM_DATA7_0 & (1<<AD0)) {
 487:setup.c       **** 				data |= (1<<x);
 779               		.loc 1 487 0
 780 01d4 41E0      		ldi r20,lo8(1)
 781 01d6 50E0      		ldi r21,0
 782               	.LVL48:
 783               	.L44:
 784               	.LBE102:
 785               	.LBE101:
 786               	.LBE100:
 465:setup.c       **** 	
 787               		.loc 1 465 0
 788 01d8 87E0      		ldi r24,lo8(7)
 789 01da 90E0      		ldi r25,0
 790 01dc 20E0      		ldi r18,0
 791               	.LVL49:
 792               	.L46:
 793               	.LBB105:
 794               	.LBB104:
 795               	.LBB103:
 481:setup.c       **** 			asm ("nop");
 796               		.loc 1 481 0
 797 01de 9598      		cbi 0x12,5
 482:setup.c       **** 			asm ("nop");
 798               		.loc 1 482 0
 799               	/* #APP */
 800               	 ;  482 "setup.c" 1
 801 01e0 0000      		nop
 802               	 ;  0 "" 2
 483:setup.c       **** 			rdPin_high;
 803               		.loc 1 483 0
 804               	 ;  483 "setup.c" 1
 805 01e2 0000      		nop
 806               	 ;  0 "" 2
 484:setup.c       **** 			
 807               		.loc 1 484 0
 808               	/* #NOAPP */
 809 01e4 959A      		sbi 0x12,5
 486:setup.c       **** 				data |= (1<<x);
 810               		.loc 1 486 0
 811 01e6 B09B      		sbis 0x16,0
 812 01e8 00C0      		rjmp .L45
 813               		.loc 1 487 0
 814 01ea BA01      		movw r22,r20
 815 01ec 082E      		mov r0,r24
 816 01ee 00C0      		rjmp 2f
 817               		1:
 818 01f0 660F      		lsl r22
 819               		2:
 820 01f2 0A94      		dec r0
 821 01f4 02F4      		brpl 1b
 822 01f6 262B      		or r18,r22
 823               	.LVL50:
 824               	.L45:
 825               	.LVL51:
 826 01f8 0197      		sbiw r24,1
 827 01fa 00F4      		brcc .L46
 828               	.LBE103:
 488:setup.c       **** 			}
 489:setup.c       **** 		}
 490:setup.c       **** 		eepromBuffer[c] = data;
 829               		.loc 1 490 0 discriminator 2
 830 01fc 2193      		st Z+,r18
 831               	.LVL52:
 832               	.LBE104:
 478:setup.c       **** 		uint8_t data = 0;
 833               		.loc 1 478 0 discriminator 2
 834 01fe 80E0      		ldi r24,hi8(eepromBuffer+8)
 835 0200 E030      		cpi r30,lo8(eepromBuffer+8)
 836 0202 F807      		cpc r31,r24
 837               	.LVL53:
 838 0204 01F4      		brne .L44
 839               	.LBE105:
 491:setup.c       **** 	}
 492:setup.c       **** 	
 493:setup.c       **** 	cs_mreqPin_high;
 840               		.loc 1 493 0
 841 0206 949A      		sbi 0x12,4
 494:setup.c       **** 	
 495:setup.c       **** 	// Set AD0 pin as output
 496:setup.c       **** 	GBA_PORT_EEPROM_DATA7_0 |= (1<<AD0);
 842               		.loc 1 496 0
 843 0208 C09A      		sbi 0x18,0
 497:setup.c       **** 	GBA_DDR_EEPROM_DATA7_0 |= (1<<AD0);
 844               		.loc 1 497 0
 845 020a B89A      		sbi 0x17,0
 846 020c 0895      		ret
 847               		.cfi_endproc
 848               	.LFE28:
 850               	.global	gba_eeprom_write
 852               	gba_eeprom_write:
 853               	.LFB29:
 498:setup.c       **** }
 499:setup.c       **** 
 500:setup.c       **** // Write 8 bytes to the EEPROM address
 501:setup.c       **** void gba_eeprom_write(uint16_t address, uint8_t eepromSize) {
 854               		.loc 1 501 0
 855               		.cfi_startproc
 856               	.LVL54:
 857               	/* prologue: function */
 858               	/* frame size = 0 */
 859               	/* stack size = 0 */
 860               	.L__stack_usage = 0
 502:setup.c       **** 	gba_eeprom_set_address(address, eepromSize, EEPROM_WRITE);
 861               		.loc 1 502 0
 862 020e 41E0      		ldi r20,lo8(1)
 863 0210 00D0      		rcall gba_eeprom_set_address
 864               	.LVL55:
 865 0212 E0E0      		ldi r30,lo8(eepromBuffer)
 866 0214 F0E0      		ldi r31,hi8(eepromBuffer)
 867 0216 48E0      		ldi r20,lo8(8)
 868               	.LVL56:
 869               	.L54:
 501:setup.c       **** 	gba_eeprom_set_address(address, eepromSize, EEPROM_WRITE);
 870               		.loc 1 501 0
 871 0218 27E0      		ldi r18,lo8(7)
 872 021a 30E0      		ldi r19,0
 873               	.LVL57:
 874               	.L57:
 875               	.LBB106:
 876               	.LBB107:
 503:setup.c       **** 	
 504:setup.c       **** 	// Write 64 bits
 505:setup.c       **** 	for (uint8_t c = 0; c < 8; c++) {
 506:setup.c       **** 		for (int8_t x = 7; x >= 0; x--) {
 507:setup.c       **** 			if (eepromBuffer[c] & (1<<x)) {
 877               		.loc 1 507 0
 878 021c 8081      		ld r24,Z
 879 021e 90E0      		ldi r25,0
 880 0220 022E      		mov r0,r18
 881 0222 00C0      		rjmp 2f
 882               		1:
 883 0224 9595      		asr r25
 884 0226 8795      		ror r24
 885               		2:
 886 0228 0A94      		dec r0
 887 022a 02F4      		brpl 1b
 888 022c 80FF      		sbrs r24,0
 889 022e 00C0      		rjmp .L55
 508:setup.c       **** 				ad0Pin_high;
 890               		.loc 1 508 0
 891 0230 C09A      		sbi 0x18,0
 892 0232 00C0      		rjmp .L56
 893               	.L55:
 509:setup.c       **** 			}
 510:setup.c       **** 			else {
 511:setup.c       **** 				ad0Pin_low;
 894               		.loc 1 511 0
 895 0234 C098      		cbi 0x18,0
 896               	.L56:
 512:setup.c       **** 			}
 513:setup.c       **** 			
 514:setup.c       **** 			wrPin_low; // CLK
 897               		.loc 1 514 0 discriminator 2
 898 0236 9698      		cbi 0x12,6
 515:setup.c       **** 			asm ("nop");
 899               		.loc 1 515 0 discriminator 2
 900               	/* #APP */
 901               	 ;  515 "setup.c" 1
 902 0238 0000      		nop
 903               	 ;  0 "" 2
 516:setup.c       **** 			asm ("nop");
 904               		.loc 1 516 0 discriminator 2
 905               	 ;  516 "setup.c" 1
 906 023a 0000      		nop
 907               	 ;  0 "" 2
 517:setup.c       **** 			wrPin_high; 
 908               		.loc 1 517 0 discriminator 2
 909               	/* #NOAPP */
 910 023c 969A      		sbi 0x12,6
 518:setup.c       **** 			asm ("nop");
 911               		.loc 1 518 0 discriminator 2
 912               	/* #APP */
 913               	 ;  518 "setup.c" 1
 914 023e 0000      		nop
 915               	 ;  0 "" 2
 519:setup.c       **** 			asm ("nop");
 916               		.loc 1 519 0 discriminator 2
 917               	 ;  519 "setup.c" 1
 918 0240 0000      		nop
 919               	 ;  0 "" 2
 920               	.LVL58:
 921               	/* #NOAPP */
 922               	.LVL59:
 923 0242 2150      		subi r18,1
 924 0244 3109      		sbc r19,__zero_reg__
 925 0246 00F4      		brcc .L57
 926 0248 4150      		subi r20,lo8(-(-1))
 927 024a 3196      		adiw r30,1
 928               	.LVL60:
 929               	.LBE107:
 505:setup.c       **** 		for (int8_t x = 7; x >= 0; x--) {
 930               		.loc 1 505 0 discriminator 2
 931 024c 4111      		cpse r20,__zero_reg__
 932 024e 00C0      		rjmp .L54
 933               	.LBE106:
 520:setup.c       **** 		}
 521:setup.c       **** 	}
 522:setup.c       **** 	
 523:setup.c       **** 	// Last bit low
 524:setup.c       **** 	ad0Pin_low;
 934               		.loc 1 524 0
 935 0250 C098      		cbi 0x18,0
 525:setup.c       **** 	wrPin_low; // CLK
 936               		.loc 1 525 0
 937 0252 9698      		cbi 0x12,6
 526:setup.c       **** 	asm ("nop");
 938               		.loc 1 526 0
 939               	/* #APP */
 940               	 ;  526 "setup.c" 1
 941 0254 0000      		nop
 942               	 ;  0 "" 2
 527:setup.c       **** 	asm ("nop");
 943               		.loc 1 527 0
 944               	 ;  527 "setup.c" 1
 945 0256 0000      		nop
 946               	 ;  0 "" 2
 528:setup.c       **** 	wrPin_high; 
 947               		.loc 1 528 0
 948               	/* #NOAPP */
 949 0258 969A      		sbi 0x12,6
 529:setup.c       **** 	asm ("nop");
 950               		.loc 1 529 0
 951               	/* #APP */
 952               	 ;  529 "setup.c" 1
 953 025a 0000      		nop
 954               	 ;  0 "" 2
 530:setup.c       **** 	asm ("nop");
 955               		.loc 1 530 0
 956               	 ;  530 "setup.c" 1
 957 025c 0000      		nop
 958               	 ;  0 "" 2
 531:setup.c       **** 	
 532:setup.c       **** 	cs_mreqPin_high;
 959               		.loc 1 532 0
 960               	/* #NOAPP */
 961 025e 949A      		sbi 0x12,4
 962 0260 0895      		ret
 963               		.cfi_endproc
 964               	.LFE29:
 966               	.global	flash_write_bus_cycle
 968               	flash_write_bus_cycle:
 969               	.LFB30:
 533:setup.c       **** }
 534:setup.c       **** 
 535:setup.c       **** 
 536:setup.c       **** 
 537:setup.c       **** // ---------- FLASH ----------
 538:setup.c       **** 
 539:setup.c       **** // Set the address and data for the write byte cycle to the flash
 540:setup.c       **** void flash_write_bus_cycle(uint16_t address, uint8_t data) {
 970               		.loc 1 540 0
 971               		.cfi_startproc
 972               	.LVL61:
 973 0262 CF93      		push r28
 974               	.LCFI11:
 975               		.cfi_def_cfa_offset 3
 976               		.cfi_offset 28, -2
 977               	/* prologue: function */
 978               	/* frame size = 0 */
 979               	/* stack size = 1 */
 980               	.L__stack_usage = 1
 981 0264 C62F      		mov r28,r22
 541:setup.c       **** 	GBA_DDR_RAM_DATA7_0 = 0xFF; // Set data pins as outputs
 982               		.loc 1 541 0
 983 0266 2FEF      		ldi r18,lo8(-1)
 984 0268 24BB      		out 0x14,r18
 542:setup.c       **** 	set_16bit_address(address);
 985               		.loc 1 542 0
 986 026a 00D0      		rcall set_16bit_address
 987               	.LVL62:
 543:setup.c       **** 	GBA_PORT_RAM_DATA7_0 = data;
 988               		.loc 1 543 0
 989 026c C5BB      		out 0x15,r28
 544:setup.c       **** 	
 545:setup.c       **** 	wrPin_low;
 990               		.loc 1 545 0
 991 026e 9698      		cbi 0x12,6
 546:setup.c       **** 	cs2Pin_low;
 992               		.loc 1 546 0
 993 0270 3A98      		cbi 0x7,2
 547:setup.c       **** 	asm volatile("nop");
 994               		.loc 1 547 0
 995               	/* #APP */
 996               	 ;  547 "setup.c" 1
 997 0272 0000      		nop
 998               	 ;  0 "" 2
 548:setup.c       **** 	wrPin_high;
 999               		.loc 1 548 0
 1000               	/* #NOAPP */
 1001 0274 969A      		sbi 0x12,6
 549:setup.c       **** 	cs2Pin_high;
 1002               		.loc 1 549 0
 1003 0276 3A9A      		sbi 0x7,2
 1004               	/* epilogue start */
 550:setup.c       **** }
 1005               		.loc 1 550 0
 1006 0278 CF91      		pop r28
 1007               	.LVL63:
 1008 027a 0895      		ret
 1009               		.cfi_endproc
 1010               	.LFE30:
 1012               	.global	flash_read_chip_id
 1014               	flash_read_chip_id:
 1015               	.LFB31:
 551:setup.c       **** 
 552:setup.c       **** // Read the flash manufacturer and device ID (Software ID)
 553:setup.c       **** void flash_read_chip_id(void) {
 1016               		.loc 1 553 0
 1017               		.cfi_startproc
 1018 027c CF93      		push r28
 1019               	.LCFI12:
 1020               		.cfi_def_cfa_offset 3
 1021               		.cfi_offset 28, -2
 1022 027e DF93      		push r29
 1023               	.LCFI13:
 1024               		.cfi_def_cfa_offset 4
 1025               		.cfi_offset 29, -3
 1026               	/* prologue: function */
 1027               	/* frame size = 0 */
 1028               	/* stack size = 2 */
 1029               	.L__stack_usage = 2
 554:setup.c       **** 	flash_write_bus_cycle(0x5555, 0xAA);
 1030               		.loc 1 554 0
 1031 0280 6AEA      		ldi r22,lo8(-86)
 1032 0282 85E5      		ldi r24,lo8(85)
 1033 0284 95E5      		ldi r25,lo8(85)
 1034 0286 00D0      		rcall flash_write_bus_cycle
 1035               	.LVL64:
 555:setup.c       **** 	flash_write_bus_cycle(0x2AAA, 0x55);
 1036               		.loc 1 555 0
 1037 0288 65E5      		ldi r22,lo8(85)
 1038 028a 8AEA      		ldi r24,lo8(-86)
 1039 028c 9AE2      		ldi r25,lo8(42)
 1040 028e 00D0      		rcall flash_write_bus_cycle
 1041               	.LVL65:
 556:setup.c       **** 	flash_write_bus_cycle(0x5555, 0x90); // Software ID entry
 1042               		.loc 1 556 0
 1043 0290 60E9      		ldi r22,lo8(-112)
 1044 0292 85E5      		ldi r24,lo8(85)
 1045 0294 95E5      		ldi r25,lo8(85)
 1046 0296 00D0      		rcall flash_write_bus_cycle
 1047               	.LVL66:
 1048               	.LBB108:
 1049               	.LBB109:
 1050               		.file 2 "c:\\winavr-20100110\\avr\\include\\util\\delay.h"
   1:c:\winavr-20100110\avr\include\util\delay.h **** /* Copyright (c) 2002, Marek Michalkiewicz
   2:c:\winavr-20100110\avr\include\util\delay.h ****    Copyright (c) 2004,2005,2007 Joerg Wunsch
   3:c:\winavr-20100110\avr\include\util\delay.h ****    Copyright (c) 2007  Florin-Viorel Petrov
   4:c:\winavr-20100110\avr\include\util\delay.h ****    All rights reserved.
   5:c:\winavr-20100110\avr\include\util\delay.h **** 
   6:c:\winavr-20100110\avr\include\util\delay.h ****    Redistribution and use in source and binary forms, with or without
   7:c:\winavr-20100110\avr\include\util\delay.h ****    modification, are permitted provided that the following conditions are met:
   8:c:\winavr-20100110\avr\include\util\delay.h **** 
   9:c:\winavr-20100110\avr\include\util\delay.h ****    * Redistributions of source code must retain the above copyright
  10:c:\winavr-20100110\avr\include\util\delay.h ****      notice, this list of conditions and the following disclaimer.
  11:c:\winavr-20100110\avr\include\util\delay.h **** 
  12:c:\winavr-20100110\avr\include\util\delay.h ****    * Redistributions in binary form must reproduce the above copyright
  13:c:\winavr-20100110\avr\include\util\delay.h ****      notice, this list of conditions and the following disclaimer in
  14:c:\winavr-20100110\avr\include\util\delay.h ****      the documentation and/or other materials provided with the
  15:c:\winavr-20100110\avr\include\util\delay.h ****      distribution.
  16:c:\winavr-20100110\avr\include\util\delay.h **** 
  17:c:\winavr-20100110\avr\include\util\delay.h ****    * Neither the name of the copyright holders nor the names of
  18:c:\winavr-20100110\avr\include\util\delay.h ****      contributors may be used to endorse or promote products derived
  19:c:\winavr-20100110\avr\include\util\delay.h ****      from this software without specific prior written permission.
  20:c:\winavr-20100110\avr\include\util\delay.h **** 
  21:c:\winavr-20100110\avr\include\util\delay.h ****   THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
  22:c:\winavr-20100110\avr\include\util\delay.h ****   AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
  23:c:\winavr-20100110\avr\include\util\delay.h ****   IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
  24:c:\winavr-20100110\avr\include\util\delay.h ****   ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE
  25:c:\winavr-20100110\avr\include\util\delay.h ****   LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
  26:c:\winavr-20100110\avr\include\util\delay.h ****   CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
  27:c:\winavr-20100110\avr\include\util\delay.h ****   SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
  28:c:\winavr-20100110\avr\include\util\delay.h ****   INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN
  29:c:\winavr-20100110\avr\include\util\delay.h ****   CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
  30:c:\winavr-20100110\avr\include\util\delay.h ****   ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
  31:c:\winavr-20100110\avr\include\util\delay.h ****   POSSIBILITY OF SUCH DAMAGE. */
  32:c:\winavr-20100110\avr\include\util\delay.h **** 
  33:c:\winavr-20100110\avr\include\util\delay.h **** /* $Id$ */
  34:c:\winavr-20100110\avr\include\util\delay.h **** 
  35:c:\winavr-20100110\avr\include\util\delay.h **** #ifndef _UTIL_DELAY_H_
  36:c:\winavr-20100110\avr\include\util\delay.h **** #define _UTIL_DELAY_H_ 1
  37:c:\winavr-20100110\avr\include\util\delay.h **** 
  38:c:\winavr-20100110\avr\include\util\delay.h **** #ifndef __DOXYGEN__
  39:c:\winavr-20100110\avr\include\util\delay.h **** #  ifndef __HAS_DELAY_CYCLES
  40:c:\winavr-20100110\avr\include\util\delay.h **** #    define __HAS_DELAY_CYCLES 1
  41:c:\winavr-20100110\avr\include\util\delay.h **** #  endif
  42:c:\winavr-20100110\avr\include\util\delay.h **** #endif  /* __DOXYGEN__ */
  43:c:\winavr-20100110\avr\include\util\delay.h **** 
  44:c:\winavr-20100110\avr\include\util\delay.h **** #include <inttypes.h>
  45:c:\winavr-20100110\avr\include\util\delay.h **** #include <util/delay_basic.h>
  46:c:\winavr-20100110\avr\include\util\delay.h **** #include <math.h>
  47:c:\winavr-20100110\avr\include\util\delay.h **** 
  48:c:\winavr-20100110\avr\include\util\delay.h **** /** \file */
  49:c:\winavr-20100110\avr\include\util\delay.h **** /** \defgroup util_delay <util/delay.h>: Convenience functions for busy-wait delay loops
  50:c:\winavr-20100110\avr\include\util\delay.h ****     \code
  51:c:\winavr-20100110\avr\include\util\delay.h ****     #define F_CPU 1000000UL  // 1 MHz
  52:c:\winavr-20100110\avr\include\util\delay.h ****     //#define F_CPU 14.7456E6
  53:c:\winavr-20100110\avr\include\util\delay.h ****     #include <util/delay.h>
  54:c:\winavr-20100110\avr\include\util\delay.h ****     \endcode
  55:c:\winavr-20100110\avr\include\util\delay.h **** 
  56:c:\winavr-20100110\avr\include\util\delay.h ****     \note As an alternative method, it is possible to pass the
  57:c:\winavr-20100110\avr\include\util\delay.h ****     F_CPU macro down to the compiler from the Makefile.
  58:c:\winavr-20100110\avr\include\util\delay.h ****     Obviously, in that case, no \c \#define statement should be
  59:c:\winavr-20100110\avr\include\util\delay.h ****     used.
  60:c:\winavr-20100110\avr\include\util\delay.h **** 
  61:c:\winavr-20100110\avr\include\util\delay.h ****     The functions in this header file are wrappers around the basic
  62:c:\winavr-20100110\avr\include\util\delay.h ****     busy-wait functions from <util/delay_basic.h>.  They are meant as
  63:c:\winavr-20100110\avr\include\util\delay.h ****     convenience functions where actual time values can be specified
  64:c:\winavr-20100110\avr\include\util\delay.h ****     rather than a number of cycles to wait for.  The idea behind is
  65:c:\winavr-20100110\avr\include\util\delay.h ****     that compile-time constant expressions will be eliminated by
  66:c:\winavr-20100110\avr\include\util\delay.h ****     compiler optimization so floating-point expressions can be used
  67:c:\winavr-20100110\avr\include\util\delay.h ****     to calculate the number of delay cycles needed based on the CPU
  68:c:\winavr-20100110\avr\include\util\delay.h ****     frequency passed by the macro F_CPU.
  69:c:\winavr-20100110\avr\include\util\delay.h **** 
  70:c:\winavr-20100110\avr\include\util\delay.h ****     \note In order for these functions to work as intended, compiler
  71:c:\winavr-20100110\avr\include\util\delay.h ****     optimizations <em>must</em> be enabled, and the delay time
  72:c:\winavr-20100110\avr\include\util\delay.h ****     <em>must</em> be an expression that is a known constant at
  73:c:\winavr-20100110\avr\include\util\delay.h ****     compile-time.  If these requirements are not met, the resulting
  74:c:\winavr-20100110\avr\include\util\delay.h ****     delay will be much longer (and basically unpredictable), and
  75:c:\winavr-20100110\avr\include\util\delay.h ****     applications that otherwise do not use floating-point calculations
  76:c:\winavr-20100110\avr\include\util\delay.h ****     will experience severe code bloat by the floating-point library
  77:c:\winavr-20100110\avr\include\util\delay.h ****     routines linked into the application.
  78:c:\winavr-20100110\avr\include\util\delay.h **** 
  79:c:\winavr-20100110\avr\include\util\delay.h ****     The functions available allow the specification of microsecond, and
  80:c:\winavr-20100110\avr\include\util\delay.h ****     millisecond delays directly, using the application-supplied macro
  81:c:\winavr-20100110\avr\include\util\delay.h ****     F_CPU as the CPU clock frequency (in Hertz).
  82:c:\winavr-20100110\avr\include\util\delay.h **** 
  83:c:\winavr-20100110\avr\include\util\delay.h **** */
  84:c:\winavr-20100110\avr\include\util\delay.h **** 
  85:c:\winavr-20100110\avr\include\util\delay.h **** #if !defined(__DOXYGEN__)
  86:c:\winavr-20100110\avr\include\util\delay.h **** static __inline__ void _delay_us(double __us) __attribute__((__always_inline__));
  87:c:\winavr-20100110\avr\include\util\delay.h **** static __inline__ void _delay_ms(double __ms) __attribute__((__always_inline__));
  88:c:\winavr-20100110\avr\include\util\delay.h **** #endif
  89:c:\winavr-20100110\avr\include\util\delay.h **** 
  90:c:\winavr-20100110\avr\include\util\delay.h **** #ifndef F_CPU
  91:c:\winavr-20100110\avr\include\util\delay.h **** /* prevent compiler error by supplying a default */
  92:c:\winavr-20100110\avr\include\util\delay.h **** # warning "F_CPU not defined for <util/delay.h>"
  93:c:\winavr-20100110\avr\include\util\delay.h **** /** \ingroup util_delay
  94:c:\winavr-20100110\avr\include\util\delay.h ****     \def F_CPU
  95:c:\winavr-20100110\avr\include\util\delay.h ****     \brief CPU frequency in Hz
  96:c:\winavr-20100110\avr\include\util\delay.h **** 
  97:c:\winavr-20100110\avr\include\util\delay.h ****     The macro F_CPU specifies the CPU frequency to be considered by
  98:c:\winavr-20100110\avr\include\util\delay.h ****     the delay macros.  This macro is normally supplied by the
  99:c:\winavr-20100110\avr\include\util\delay.h ****     environment (e.g. from within a project header, or the project's
 100:c:\winavr-20100110\avr\include\util\delay.h ****     Makefile).  The value 1 MHz here is only provided as a "vanilla"
 101:c:\winavr-20100110\avr\include\util\delay.h ****     fallback if no such user-provided definition could be found.
 102:c:\winavr-20100110\avr\include\util\delay.h **** 
 103:c:\winavr-20100110\avr\include\util\delay.h ****     In terms of the delay functions, the CPU frequency can be given as
 104:c:\winavr-20100110\avr\include\util\delay.h ****     a floating-point constant (e.g. 3.6864E6 for 3.6864 MHz).
 105:c:\winavr-20100110\avr\include\util\delay.h ****     However, the macros in <util/setbaud.h> require it to be an
 106:c:\winavr-20100110\avr\include\util\delay.h ****     integer value.
 107:c:\winavr-20100110\avr\include\util\delay.h ****  */
 108:c:\winavr-20100110\avr\include\util\delay.h **** # define F_CPU 1000000UL
 109:c:\winavr-20100110\avr\include\util\delay.h **** #endif
 110:c:\winavr-20100110\avr\include\util\delay.h **** 
 111:c:\winavr-20100110\avr\include\util\delay.h **** #ifndef __OPTIMIZE__
 112:c:\winavr-20100110\avr\include\util\delay.h **** # warning "Compiler optimizations disabled; functions from <util/delay.h> won't work as designed"
 113:c:\winavr-20100110\avr\include\util\delay.h **** #endif
 114:c:\winavr-20100110\avr\include\util\delay.h **** 
 115:c:\winavr-20100110\avr\include\util\delay.h **** #if __HAS_DELAY_CYCLES && defined(__OPTIMIZE__) && \
 116:c:\winavr-20100110\avr\include\util\delay.h ****   !defined(__DELAY_BACKWARD_COMPATIBLE__) &&	   \
 117:c:\winavr-20100110\avr\include\util\delay.h ****   __STDC_HOSTED__
 118:c:\winavr-20100110\avr\include\util\delay.h **** #  include <math.h>
 119:c:\winavr-20100110\avr\include\util\delay.h **** #endif
 120:c:\winavr-20100110\avr\include\util\delay.h **** 
 121:c:\winavr-20100110\avr\include\util\delay.h **** /**
 122:c:\winavr-20100110\avr\include\util\delay.h ****    \ingroup util_delay
 123:c:\winavr-20100110\avr\include\util\delay.h **** 
 124:c:\winavr-20100110\avr\include\util\delay.h ****    Perform a delay of \c __ms milliseconds, using _delay_loop_2().
 125:c:\winavr-20100110\avr\include\util\delay.h **** 
 126:c:\winavr-20100110\avr\include\util\delay.h ****    The macro F_CPU is supposed to be defined to a
 127:c:\winavr-20100110\avr\include\util\delay.h ****    constant defining the CPU clock frequency (in Hertz).
 128:c:\winavr-20100110\avr\include\util\delay.h **** 
 129:c:\winavr-20100110\avr\include\util\delay.h ****    The maximal possible delay is 262.14 ms / F_CPU in MHz.
 130:c:\winavr-20100110\avr\include\util\delay.h **** 
 131:c:\winavr-20100110\avr\include\util\delay.h ****    When the user request delay which exceed the maximum possible one,
 132:c:\winavr-20100110\avr\include\util\delay.h ****    _delay_ms() provides a decreased resolution functionality. In this
 133:c:\winavr-20100110\avr\include\util\delay.h ****    mode _delay_ms() will work with a resolution of 1/10 ms, providing
 134:c:\winavr-20100110\avr\include\util\delay.h ****    delays up to 6.5535 seconds (independent from CPU frequency).  The
 135:c:\winavr-20100110\avr\include\util\delay.h ****    user will not be informed about decreased resolution.
 136:c:\winavr-20100110\avr\include\util\delay.h **** 
 137:c:\winavr-20100110\avr\include\util\delay.h ****    If the avr-gcc toolchain has __builtin_avr_delay_cycles()
 138:c:\winavr-20100110\avr\include\util\delay.h ****    support, maximal possible delay is 4294967.295 ms/ F_CPU in MHz. For
 139:c:\winavr-20100110\avr\include\util\delay.h ****    values greater than the maximal possible delay, overflows results in
 140:c:\winavr-20100110\avr\include\util\delay.h ****    no delay i.e., 0ms.
 141:c:\winavr-20100110\avr\include\util\delay.h **** 
 142:c:\winavr-20100110\avr\include\util\delay.h ****    Conversion of \c __ms into clock cycles may not always result in
 143:c:\winavr-20100110\avr\include\util\delay.h ****    integer.  By default, the clock cycles rounded up to next
 144:c:\winavr-20100110\avr\include\util\delay.h ****    integer. This ensures that the user gets at least \c __ms
 145:c:\winavr-20100110\avr\include\util\delay.h ****    microseconds of delay.
 146:c:\winavr-20100110\avr\include\util\delay.h **** 
 147:c:\winavr-20100110\avr\include\util\delay.h ****    Alternatively, by defining the macro \c __DELAY_ROUND_DOWN__, or
 148:c:\winavr-20100110\avr\include\util\delay.h ****    \c __DELAY_ROUND_CLOSEST__, before including this header file, the
 149:c:\winavr-20100110\avr\include\util\delay.h ****    algorithm can be made to round down, or round to closest integer,
 150:c:\winavr-20100110\avr\include\util\delay.h ****    respectively.
 151:c:\winavr-20100110\avr\include\util\delay.h **** 
 152:c:\winavr-20100110\avr\include\util\delay.h ****    \note
 153:c:\winavr-20100110\avr\include\util\delay.h **** 
 154:c:\winavr-20100110\avr\include\util\delay.h ****    The implementation of _delay_ms() based on
 155:c:\winavr-20100110\avr\include\util\delay.h ****    __builtin_avr_delay_cycles() is not backward compatible with older
 156:c:\winavr-20100110\avr\include\util\delay.h ****    implementations.  In order to get functionality backward compatible
 157:c:\winavr-20100110\avr\include\util\delay.h ****    with previous versions, the macro \c "__DELAY_BACKWARD_COMPATIBLE__"
 158:c:\winavr-20100110\avr\include\util\delay.h ****    must be defined before including this header file. Also, the
 159:c:\winavr-20100110\avr\include\util\delay.h ****    backward compatible algorithm will be chosen if the code is
 160:c:\winavr-20100110\avr\include\util\delay.h ****    compiled in a <em>freestanding environment</em> (GCC option
 161:c:\winavr-20100110\avr\include\util\delay.h ****    \c -ffreestanding), as the math functions required for rounding are
 162:c:\winavr-20100110\avr\include\util\delay.h ****    not available to the compiler then.
 163:c:\winavr-20100110\avr\include\util\delay.h **** 
 164:c:\winavr-20100110\avr\include\util\delay.h ****  */
 165:c:\winavr-20100110\avr\include\util\delay.h **** void
 166:c:\winavr-20100110\avr\include\util\delay.h **** _delay_ms(double __ms)
 167:c:\winavr-20100110\avr\include\util\delay.h **** {
 168:c:\winavr-20100110\avr\include\util\delay.h **** 	double __tmp ;
 169:c:\winavr-20100110\avr\include\util\delay.h **** #if __HAS_DELAY_CYCLES && defined(__OPTIMIZE__) && \
 170:c:\winavr-20100110\avr\include\util\delay.h ****   !defined(__DELAY_BACKWARD_COMPATIBLE__) &&	   \
 171:c:\winavr-20100110\avr\include\util\delay.h ****   __STDC_HOSTED__
 172:c:\winavr-20100110\avr\include\util\delay.h **** 	uint32_t __ticks_dc;
 173:c:\winavr-20100110\avr\include\util\delay.h **** 	extern void __builtin_avr_delay_cycles(unsigned long);
 174:c:\winavr-20100110\avr\include\util\delay.h **** 	__tmp = ((F_CPU) / 1e3) * __ms;
 175:c:\winavr-20100110\avr\include\util\delay.h **** 
 176:c:\winavr-20100110\avr\include\util\delay.h **** 	#if defined(__DELAY_ROUND_DOWN__)
 177:c:\winavr-20100110\avr\include\util\delay.h **** 		__ticks_dc = (uint32_t)fabs(__tmp);
 178:c:\winavr-20100110\avr\include\util\delay.h **** 
 179:c:\winavr-20100110\avr\include\util\delay.h **** 	#elif defined(__DELAY_ROUND_CLOSEST__)
 180:c:\winavr-20100110\avr\include\util\delay.h **** 		__ticks_dc = (uint32_t)(fabs(__tmp)+0.5);
 181:c:\winavr-20100110\avr\include\util\delay.h **** 
 182:c:\winavr-20100110\avr\include\util\delay.h **** 	#else
 183:c:\winavr-20100110\avr\include\util\delay.h **** 		//round up by default
 184:c:\winavr-20100110\avr\include\util\delay.h **** 		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
 185:c:\winavr-20100110\avr\include\util\delay.h **** 	#endif
 186:c:\winavr-20100110\avr\include\util\delay.h **** 
 187:c:\winavr-20100110\avr\include\util\delay.h **** 	__builtin_avr_delay_cycles(__ticks_dc);
 1051               		.loc 2 187 0
 1052 0298 8FE3      		ldi r24,lo8(-25537)
 1053 029a 9CE9      		ldi r25,hi8(-25537)
 1054 029c 0197      	1:	sbiw r24,1
 1055 029e 01F4      		brne 1b
 1056 02a0 00C0      		rjmp .
 1057 02a2 0000      		nop
 1058               	.LVL67:
 1059               	.LBE109:
 1060               	.LBE108:
 557:setup.c       **** 	_delay_ms(20); // Wait a little (for Atmel chip)
 558:setup.c       **** 	
 559:setup.c       **** 	// Set data as inputs
 560:setup.c       **** 	GBA_PORT_RAM_DATA7_0 = 0;
 1061               		.loc 1 560 0
 1062 02a4 15BA      		out 0x15,__zero_reg__
 561:setup.c       **** 	GBA_DDR_RAM_DATA7_0 = 0;
 1063               		.loc 1 561 0
 1064 02a6 14BA      		out 0x14,__zero_reg__
 562:setup.c       **** 	
 563:setup.c       **** 	// Read and transmit the 2 bytes
 564:setup.c       **** 	flashChipIdBuffer[0] = gba_read_ram_8bit_data(0x0000);
 1065               		.loc 1 564 0
 1066 02a8 80E0      		ldi r24,0
 1067 02aa 90E0      		ldi r25,0
 1068 02ac 00D0      		rcall gba_read_ram_8bit_data
 1069               	.LVL68:
 1070 02ae C0E0      		ldi r28,lo8(flashChipIdBuffer)
 1071 02b0 D0E0      		ldi r29,hi8(flashChipIdBuffer)
 1072 02b2 8883      		st Y,r24
 565:setup.c       **** 	flashChipIdBuffer[1] = gba_read_ram_8bit_data(0x0001);
 1073               		.loc 1 565 0
 1074 02b4 81E0      		ldi r24,lo8(1)
 1075 02b6 90E0      		ldi r25,0
 1076 02b8 00D0      		rcall gba_read_ram_8bit_data
 1077               	.LVL69:
 1078 02ba 8983      		std Y+1,r24
 566:setup.c       **** 	
 567:setup.c       **** 	flash_write_bus_cycle(0x5555, 0xAA);
 1079               		.loc 1 567 0
 1080 02bc 6AEA      		ldi r22,lo8(-86)
 1081 02be 85E5      		ldi r24,lo8(85)
 1082 02c0 95E5      		ldi r25,lo8(85)
 1083 02c2 00D0      		rcall flash_write_bus_cycle
 1084               	.LVL70:
 568:setup.c       **** 	flash_write_bus_cycle(0x2AAA, 0x55);
 1085               		.loc 1 568 0
 1086 02c4 65E5      		ldi r22,lo8(85)
 1087 02c6 8AEA      		ldi r24,lo8(-86)
 1088 02c8 9AE2      		ldi r25,lo8(42)
 1089 02ca 00D0      		rcall flash_write_bus_cycle
 1090               	.LVL71:
 569:setup.c       **** 	flash_write_bus_cycle(0x5555, 0xF0); // Software ID exit
 1091               		.loc 1 569 0
 1092 02cc 60EF      		ldi r22,lo8(-16)
 1093 02ce 85E5      		ldi r24,lo8(85)
 1094 02d0 95E5      		ldi r25,lo8(85)
 1095 02d2 00D0      		rcall flash_write_bus_cycle
 1096               	.LVL72:
 1097               	.LBB110:
 1098               	.LBB111:
 1099               		.loc 2 187 0
 1100 02d4 8FE3      		ldi r24,lo8(-25537)
 1101 02d6 9CE9      		ldi r25,hi8(-25537)
 1102 02d8 0197      	1:	sbiw r24,1
 1103 02da 01F4      		brne 1b
 1104 02dc 00C0      		rjmp .
 1105 02de 0000      		nop
 1106               	.LVL73:
 1107               	/* epilogue start */
 1108               	.LBE111:
 1109               	.LBE110:
 570:setup.c       **** 	_delay_ms(20); // Wait a little (for Atmel chip)
 571:setup.c       **** }
 1110               		.loc 1 571 0
 1111 02e0 DF91      		pop r29
 1112 02e2 CF91      		pop r28
 1113 02e4 0895      		ret
 1114               		.cfi_endproc
 1115               	.LFE31:
 1117               	.global	flash_switch_bank
 1119               	flash_switch_bank:
 1120               	.LFB32:
 572:setup.c       **** 
 573:setup.c       **** // Switch banks on the Flash
 574:setup.c       **** void flash_switch_bank(uint8_t bank) {
 1121               		.loc 1 574 0
 1122               		.cfi_startproc
 1123               	.LVL74:
 1124 02e6 CF93      		push r28
 1125               	.LCFI14:
 1126               		.cfi_def_cfa_offset 3
 1127               		.cfi_offset 28, -2
 1128               	/* prologue: function */
 1129               	/* frame size = 0 */
 1130               	/* stack size = 1 */
 1131               	.L__stack_usage = 1
 1132 02e8 C82F      		mov r28,r24
 575:setup.c       **** 	flash_write_bus_cycle(0x5555, 0xAA);
 1133               		.loc 1 575 0
 1134 02ea 6AEA      		ldi r22,lo8(-86)
 1135 02ec 85E5      		ldi r24,lo8(85)
 1136 02ee 95E5      		ldi r25,lo8(85)
 1137               	.LVL75:
 1138 02f0 00D0      		rcall flash_write_bus_cycle
 1139               	.LVL76:
 576:setup.c       **** 	flash_write_bus_cycle(0x2AAA, 0x55);
 1140               		.loc 1 576 0
 1141 02f2 65E5      		ldi r22,lo8(85)
 1142 02f4 8AEA      		ldi r24,lo8(-86)
 1143 02f6 9AE2      		ldi r25,lo8(42)
 1144 02f8 00D0      		rcall flash_write_bus_cycle
 1145               	.LVL77:
 577:setup.c       **** 	
 578:setup.c       **** 	flash_write_bus_cycle(0x5555, 0xB0);
 1146               		.loc 1 578 0
 1147 02fa 60EB      		ldi r22,lo8(-80)
 1148 02fc 85E5      		ldi r24,lo8(85)
 1149 02fe 95E5      		ldi r25,lo8(85)
 1150 0300 00D0      		rcall flash_write_bus_cycle
 1151               	.LVL78:
 579:setup.c       **** 	flash_write_bus_cycle(0x0000, bank);
 1152               		.loc 1 579 0
 1153 0302 6C2F      		mov r22,r28
 1154 0304 80E0      		ldi r24,0
 1155 0306 90E0      		ldi r25,0
 1156               	/* epilogue start */
 580:setup.c       **** }
 1157               		.loc 1 580 0
 1158 0308 CF91      		pop r28
 1159               	.LVL79:
 579:setup.c       **** 	flash_write_bus_cycle(0x0000, bank);
 1160               		.loc 1 579 0
 1161 030a 00C0      		rjmp flash_write_bus_cycle
 1162               	.LVL80:
 1163               		.cfi_endproc
 1164               	.LFE32:
 1166               	.global	flash_erase_4k_sector
 1168               	flash_erase_4k_sector:
 1169               	.LFB33:
 581:setup.c       **** 
 582:setup.c       **** // Erase 4K sector on Flash, expects first sector to start at 0, left shifts by 12 (A15-A12 to sele
 583:setup.c       **** // Takes 25ms after last command to erase sector
 584:setup.c       **** void flash_erase_4k_sector(uint8_t sector) {
 1170               		.loc 1 584 0
 1171               		.cfi_startproc
 1172               	.LVL81:
 1173 030c CF93      		push r28
 1174               	.LCFI15:
 1175               		.cfi_def_cfa_offset 3
 1176               		.cfi_offset 28, -2
 1177               	/* prologue: function */
 1178               	/* frame size = 0 */
 1179               	/* stack size = 1 */
 1180               	.L__stack_usage = 1
 1181 030e C82F      		mov r28,r24
 585:setup.c       **** 	flash_write_bus_cycle(0x5555, 0xAA);
 1182               		.loc 1 585 0
 1183 0310 6AEA      		ldi r22,lo8(-86)
 1184 0312 85E5      		ldi r24,lo8(85)
 1185 0314 95E5      		ldi r25,lo8(85)
 1186               	.LVL82:
 1187 0316 00D0      		rcall flash_write_bus_cycle
 1188               	.LVL83:
 586:setup.c       **** 	flash_write_bus_cycle(0x2AAA, 0x55);
 1189               		.loc 1 586 0
 1190 0318 65E5      		ldi r22,lo8(85)
 1191 031a 8AEA      		ldi r24,lo8(-86)
 1192 031c 9AE2      		ldi r25,lo8(42)
 1193 031e 00D0      		rcall flash_write_bus_cycle
 1194               	.LVL84:
 587:setup.c       **** 	flash_write_bus_cycle(0x5555, 0x80);
 1195               		.loc 1 587 0
 1196 0320 60E8      		ldi r22,lo8(-128)
 1197 0322 85E5      		ldi r24,lo8(85)
 1198 0324 95E5      		ldi r25,lo8(85)
 1199 0326 00D0      		rcall flash_write_bus_cycle
 1200               	.LVL85:
 588:setup.c       **** 	flash_write_bus_cycle(0x5555, 0xAA);
 1201               		.loc 1 588 0
 1202 0328 6AEA      		ldi r22,lo8(-86)
 1203 032a 85E5      		ldi r24,lo8(85)
 1204 032c 95E5      		ldi r25,lo8(85)
 1205 032e 00D0      		rcall flash_write_bus_cycle
 1206               	.LVL86:
 589:setup.c       **** 	flash_write_bus_cycle(0x2AAA, 0x55);
 1207               		.loc 1 589 0
 1208 0330 65E5      		ldi r22,lo8(85)
 1209 0332 8AEA      		ldi r24,lo8(-86)
 1210 0334 9AE2      		ldi r25,lo8(42)
 1211 0336 00D0      		rcall flash_write_bus_cycle
 1212               	.LVL87:
 590:setup.c       **** 	
 591:setup.c       **** 	flash_write_bus_cycle((uint16_t) sector << 12, 0x30);
 1213               		.loc 1 591 0
 1214 0338 60E3      		ldi r22,lo8(48)
 1215 033a 80E0      		ldi r24,0
 1216 033c 9C2F      		mov r25,r28
 1217 033e 9295      		swap r25
 1218 0340 907F      		andi r25,lo8(-16)
 1219 0342 00D0      		rcall flash_write_bus_cycle
 1220               	.LVL88:
 1221               	.LBB112:
 1222               	.LBB113:
 1223               		.loc 2 187 0
 1224 0344 8FE4      		ldi r24,lo8(-15537)
 1225 0346 93EC      		ldi r25,hi8(-15537)
 1226 0348 0197      	1:	sbiw r24,1
 1227 034a 01F4      		brne 1b
 1228 034c 00C0      		rjmp .
 1229 034e 0000      		nop
 1230               	.LVL89:
 1231               	/* epilogue start */
 1232               	.LBE113:
 1233               	.LBE112:
 592:setup.c       **** 	_delay_ms(25); // Wait 25ms for sector erase
 593:setup.c       **** }
 1234               		.loc 1 593 0
 1235 0350 CF91      		pop r28
 1236               	.LVL90:
 1237 0352 0895      		ret
 1238               		.cfi_endproc
 1239               	.LFE33:
 1241               	.global	flash_write_byte
 1243               	flash_write_byte:
 1244               	.LFB34:
 594:setup.c       **** 
 595:setup.c       **** // Write a single byte to the Flash address
 596:setup.c       **** // Takes 20us to program Flash
 597:setup.c       **** void flash_write_byte(uint16_t address, uint8_t data) {
 1245               		.loc 1 597 0
 1246               		.cfi_startproc
 1247               	.LVL91:
 1248 0354 1F93      		push r17
 1249               	.LCFI16:
 1250               		.cfi_def_cfa_offset 3
 1251               		.cfi_offset 17, -2
 1252 0356 CF93      		push r28
 1253               	.LCFI17:
 1254               		.cfi_def_cfa_offset 4
 1255               		.cfi_offset 28, -3
 1256 0358 DF93      		push r29
 1257               	.LCFI18:
 1258               		.cfi_def_cfa_offset 5
 1259               		.cfi_offset 29, -4
 1260               	/* prologue: function */
 1261               	/* frame size = 0 */
 1262               	/* stack size = 3 */
 1263               	.L__stack_usage = 3
 1264 035a EC01      		movw r28,r24
 1265 035c 162F      		mov r17,r22
 598:setup.c       **** 	flash_write_bus_cycle(0x5555, 0xAA);
 1266               		.loc 1 598 0
 1267 035e 6AEA      		ldi r22,lo8(-86)
 1268               	.LVL92:
 1269 0360 85E5      		ldi r24,lo8(85)
 1270 0362 95E5      		ldi r25,lo8(85)
 1271               	.LVL93:
 1272 0364 00D0      		rcall flash_write_bus_cycle
 1273               	.LVL94:
 599:setup.c       **** 	flash_write_bus_cycle(0x2AAA, 0x55);
 1274               		.loc 1 599 0
 1275 0366 65E5      		ldi r22,lo8(85)
 1276 0368 8AEA      		ldi r24,lo8(-86)
 1277 036a 9AE2      		ldi r25,lo8(42)
 1278 036c 00D0      		rcall flash_write_bus_cycle
 1279               	.LVL95:
 600:setup.c       **** 	flash_write_bus_cycle(0x5555, 0xA0);
 1280               		.loc 1 600 0
 1281 036e 60EA      		ldi r22,lo8(-96)
 1282 0370 85E5      		ldi r24,lo8(85)
 1283 0372 95E5      		ldi r25,lo8(85)
 1284 0374 00D0      		rcall flash_write_bus_cycle
 1285               	.LVL96:
 601:setup.c       **** 	
 602:setup.c       **** 	flash_write_bus_cycle(address, data);
 1286               		.loc 1 602 0
 1287 0376 612F      		mov r22,r17
 1288 0378 CE01      		movw r24,r28
 1289 037a 00D0      		rcall flash_write_bus_cycle
 1290               	.LVL97:
 1291               	.LBB114:
 1292               	.LBB115:
 188:c:\winavr-20100110\avr\include\util\delay.h **** 
 189:c:\winavr-20100110\avr\include\util\delay.h **** #else
 190:c:\winavr-20100110\avr\include\util\delay.h **** 	uint16_t __ticks;
 191:c:\winavr-20100110\avr\include\util\delay.h **** 	__tmp = ((F_CPU) / 4e3) * __ms;
 192:c:\winavr-20100110\avr\include\util\delay.h **** 	if (__tmp < 1.0)
 193:c:\winavr-20100110\avr\include\util\delay.h **** 		__ticks = 1;
 194:c:\winavr-20100110\avr\include\util\delay.h **** 	else if (__tmp > 65535)
 195:c:\winavr-20100110\avr\include\util\delay.h **** 	{
 196:c:\winavr-20100110\avr\include\util\delay.h **** 		//	__ticks = requested delay in 1/10 ms
 197:c:\winavr-20100110\avr\include\util\delay.h **** 		__ticks = (uint16_t) (__ms * 10.0);
 198:c:\winavr-20100110\avr\include\util\delay.h **** 		while(__ticks)
 199:c:\winavr-20100110\avr\include\util\delay.h **** 		{
 200:c:\winavr-20100110\avr\include\util\delay.h **** 			// wait 1/10 ms
 201:c:\winavr-20100110\avr\include\util\delay.h **** 			_delay_loop_2(((F_CPU) / 4e3) / 10);
 202:c:\winavr-20100110\avr\include\util\delay.h **** 			__ticks --;
 203:c:\winavr-20100110\avr\include\util\delay.h **** 		}
 204:c:\winavr-20100110\avr\include\util\delay.h **** 		return;
 205:c:\winavr-20100110\avr\include\util\delay.h **** 	}
 206:c:\winavr-20100110\avr\include\util\delay.h **** 	else
 207:c:\winavr-20100110\avr\include\util\delay.h **** 		__ticks = (uint16_t)__tmp;
 208:c:\winavr-20100110\avr\include\util\delay.h **** 	_delay_loop_2(__ticks);
 209:c:\winavr-20100110\avr\include\util\delay.h **** #endif
 210:c:\winavr-20100110\avr\include\util\delay.h **** }
 211:c:\winavr-20100110\avr\include\util\delay.h **** 
 212:c:\winavr-20100110\avr\include\util\delay.h **** /**
 213:c:\winavr-20100110\avr\include\util\delay.h ****    \ingroup util_delay
 214:c:\winavr-20100110\avr\include\util\delay.h **** 
 215:c:\winavr-20100110\avr\include\util\delay.h ****    Perform a delay of \c __us microseconds, using _delay_loop_1().
 216:c:\winavr-20100110\avr\include\util\delay.h **** 
 217:c:\winavr-20100110\avr\include\util\delay.h ****    The macro F_CPU is supposed to be defined to a
 218:c:\winavr-20100110\avr\include\util\delay.h ****    constant defining the CPU clock frequency (in Hertz).
 219:c:\winavr-20100110\avr\include\util\delay.h **** 
 220:c:\winavr-20100110\avr\include\util\delay.h ****    The maximal possible delay is 768 us / F_CPU in MHz.
 221:c:\winavr-20100110\avr\include\util\delay.h **** 
 222:c:\winavr-20100110\avr\include\util\delay.h ****    If the user requests a delay greater than the maximal possible one,
 223:c:\winavr-20100110\avr\include\util\delay.h ****    _delay_us() will automatically call _delay_ms() instead.  The user
 224:c:\winavr-20100110\avr\include\util\delay.h ****    will not be informed about this case.
 225:c:\winavr-20100110\avr\include\util\delay.h **** 
 226:c:\winavr-20100110\avr\include\util\delay.h ****    If the avr-gcc toolchain has __builtin_avr_delay_cycles()
 227:c:\winavr-20100110\avr\include\util\delay.h ****    support, maximal possible delay is 4294967.295 us/ F_CPU in MHz. For
 228:c:\winavr-20100110\avr\include\util\delay.h ****    values greater than the maximal possible delay, overflow results in
 229:c:\winavr-20100110\avr\include\util\delay.h ****    no delay i.e., 0us.
 230:c:\winavr-20100110\avr\include\util\delay.h **** 
 231:c:\winavr-20100110\avr\include\util\delay.h ****    Conversion of \c __us into clock cycles may not always result in
 232:c:\winavr-20100110\avr\include\util\delay.h ****    integer.  By default, the clock cycles rounded up to next
 233:c:\winavr-20100110\avr\include\util\delay.h ****    integer. This ensures that the user gets at least \c __us
 234:c:\winavr-20100110\avr\include\util\delay.h ****    microseconds of delay.
 235:c:\winavr-20100110\avr\include\util\delay.h **** 
 236:c:\winavr-20100110\avr\include\util\delay.h ****    Alternatively, by defining the macro \c __DELAY_ROUND_DOWN__, or
 237:c:\winavr-20100110\avr\include\util\delay.h ****    \c __DELAY_ROUND_CLOSEST__, before including this header file, the
 238:c:\winavr-20100110\avr\include\util\delay.h ****    algorithm can be made to round down, or round to closest integer,
 239:c:\winavr-20100110\avr\include\util\delay.h ****    respectively.
 240:c:\winavr-20100110\avr\include\util\delay.h **** 
 241:c:\winavr-20100110\avr\include\util\delay.h ****    \note
 242:c:\winavr-20100110\avr\include\util\delay.h **** 
 243:c:\winavr-20100110\avr\include\util\delay.h ****    The implementation of _delay_ms() based on
 244:c:\winavr-20100110\avr\include\util\delay.h ****    __builtin_avr_delay_cycles() is not backward compatible with older
 245:c:\winavr-20100110\avr\include\util\delay.h ****    implementations.  In order to get functionality backward compatible
 246:c:\winavr-20100110\avr\include\util\delay.h ****    with previous versions, the macro \c __DELAY_BACKWARD_COMPATIBLE__
 247:c:\winavr-20100110\avr\include\util\delay.h ****    must be defined before including this header file. Also, the
 248:c:\winavr-20100110\avr\include\util\delay.h ****    backward compatible algorithm will be chosen if the code is
 249:c:\winavr-20100110\avr\include\util\delay.h ****    compiled in a <em>freestanding environment</em> (GCC option
 250:c:\winavr-20100110\avr\include\util\delay.h ****    \c -ffreestanding), as the math functions required for rounding are
 251:c:\winavr-20100110\avr\include\util\delay.h ****    not available to the compiler then.
 252:c:\winavr-20100110\avr\include\util\delay.h **** 
 253:c:\winavr-20100110\avr\include\util\delay.h ****  */
 254:c:\winavr-20100110\avr\include\util\delay.h **** void
 255:c:\winavr-20100110\avr\include\util\delay.h **** _delay_us(double __us)
 256:c:\winavr-20100110\avr\include\util\delay.h **** {
 257:c:\winavr-20100110\avr\include\util\delay.h **** 	double __tmp ;
 258:c:\winavr-20100110\avr\include\util\delay.h **** #if __HAS_DELAY_CYCLES && defined(__OPTIMIZE__) && \
 259:c:\winavr-20100110\avr\include\util\delay.h ****   !defined(__DELAY_BACKWARD_COMPATIBLE__) &&	   \
 260:c:\winavr-20100110\avr\include\util\delay.h ****   __STDC_HOSTED__
 261:c:\winavr-20100110\avr\include\util\delay.h **** 	uint32_t __ticks_dc;
 262:c:\winavr-20100110\avr\include\util\delay.h **** 	extern void __builtin_avr_delay_cycles(unsigned long);
 263:c:\winavr-20100110\avr\include\util\delay.h **** 	__tmp = ((F_CPU) / 1e6) * __us;
 264:c:\winavr-20100110\avr\include\util\delay.h **** 
 265:c:\winavr-20100110\avr\include\util\delay.h **** 	#if defined(__DELAY_ROUND_DOWN__)
 266:c:\winavr-20100110\avr\include\util\delay.h **** 		__ticks_dc = (uint32_t)fabs(__tmp);
 267:c:\winavr-20100110\avr\include\util\delay.h **** 
 268:c:\winavr-20100110\avr\include\util\delay.h **** 	#elif defined(__DELAY_ROUND_CLOSEST__)
 269:c:\winavr-20100110\avr\include\util\delay.h **** 		__ticks_dc = (uint32_t)(fabs(__tmp)+0.5);
 270:c:\winavr-20100110\avr\include\util\delay.h **** 
 271:c:\winavr-20100110\avr\include\util\delay.h **** 	#else
 272:c:\winavr-20100110\avr\include\util\delay.h **** 		//round up by default
 273:c:\winavr-20100110\avr\include\util\delay.h **** 		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
 274:c:\winavr-20100110\avr\include\util\delay.h **** 	#endif
 275:c:\winavr-20100110\avr\include\util\delay.h **** 
 276:c:\winavr-20100110\avr\include\util\delay.h **** 	__builtin_avr_delay_cycles(__ticks_dc);
 1293               		.loc 2 276 0
 1294 037c 85E3      		ldi r24,lo8(53)
 1295 037e 8A95      	1:	dec r24
 1296 0380 01F4      		brne 1b
 1297 0382 0000      		nop
 1298               	.LVL98:
 1299               	/* epilogue start */
 1300               	.LBE115:
 1301               	.LBE114:
 603:setup.c       **** 	_delay_us(20); // Wait byte program time
 604:setup.c       **** }
 1302               		.loc 1 604 0
 1303 0384 DF91      		pop r29
 1304 0386 CF91      		pop r28
 1305               	.LVL99:
 1306 0388 1F91      		pop r17
 1307               	.LVL100:
 1308 038a 0895      		ret
 1309               		.cfi_endproc
 1310               	.LFE34:
 1312               	.global	flash_write_sector
 1314               	flash_write_sector:
 1315               	.LFB35:
 605:setup.c       **** 
 606:setup.c       **** // Write a sector (128 bytes) to the Atmel flash
 607:setup.c       **** // Takes 20ms for write cycle
 608:setup.c       **** void flash_write_sector(uint16_t sector) {
 1316               		.loc 1 608 0
 1317               		.cfi_startproc
 1318               	.LVL101:
 1319 038c EF92      		push r14
 1320               	.LCFI19:
 1321               		.cfi_def_cfa_offset 3
 1322               		.cfi_offset 14, -2
 1323 038e FF92      		push r15
 1324               	.LCFI20:
 1325               		.cfi_def_cfa_offset 4
 1326               		.cfi_offset 15, -3
 1327 0390 0F93      		push r16
 1328               	.LCFI21:
 1329               		.cfi_def_cfa_offset 5
 1330               		.cfi_offset 16, -4
 1331 0392 1F93      		push r17
 1332               	.LCFI22:
 1333               		.cfi_def_cfa_offset 6
 1334               		.cfi_offset 17, -5
 1335 0394 CF93      		push r28
 1336               	.LCFI23:
 1337               		.cfi_def_cfa_offset 7
 1338               		.cfi_offset 28, -6
 1339 0396 DF93      		push r29
 1340               	.LCFI24:
 1341               		.cfi_def_cfa_offset 8
 1342               		.cfi_offset 29, -7
 1343               	/* prologue: function */
 1344               	/* frame size = 0 */
 1345               	/* stack size = 6 */
 1346               	.L__stack_usage = 6
 1347 0398 8C01      		movw r16,r24
 609:setup.c       **** 	flash_write_bus_cycle(0x5555, 0xAA);
 1348               		.loc 1 609 0
 1349 039a 6AEA      		ldi r22,lo8(-86)
 1350 039c 85E5      		ldi r24,lo8(85)
 1351 039e 95E5      		ldi r25,lo8(85)
 1352               	.LVL102:
 1353 03a0 00D0      		rcall flash_write_bus_cycle
 1354               	.LVL103:
 610:setup.c       **** 	flash_write_bus_cycle(0x2AAA, 0x55);
 1355               		.loc 1 610 0
 1356 03a2 65E5      		ldi r22,lo8(85)
 1357 03a4 8AEA      		ldi r24,lo8(-86)
 1358 03a6 9AE2      		ldi r25,lo8(42)
 1359 03a8 00D0      		rcall flash_write_bus_cycle
 1360               	.LVL104:
 611:setup.c       **** 	flash_write_bus_cycle(0x5555, 0xA0);
 1361               		.loc 1 611 0
 1362 03aa 60EA      		ldi r22,lo8(-96)
 1363 03ac 85E5      		ldi r24,lo8(85)
 1364 03ae 95E5      		ldi r25,lo8(85)
 1365 03b0 00D0      		rcall flash_write_bus_cycle
 1366               	.LVL105:
 1367               	.LBB116:
 612:setup.c       **** 	
 613:setup.c       **** 	// Write the bytes (A0-A6 byte address, A7-A15 sector address)
 614:setup.c       **** 	for (uint8_t x = 0; x < 128; x++) {
 615:setup.c       **** 		flash_write_bus_cycle((uint16_t) (sector << 7) | (uint16_t) x, receivedBuffer[x]);
 1368               		.loc 1 615 0
 1369 03b2 1695      		lsr r17
 1370 03b4 102F      		mov r17,r16
 1371 03b6 0027      		clr r16
 1372 03b8 1795      		ror r17
 1373 03ba 0795      		ror r16
 1374               	.LVL106:
 1375 03bc 90E0      		ldi r25,lo8(receivedBuffer)
 1376 03be E92E      		mov r14,r25
 1377 03c0 90E0      		ldi r25,hi8(receivedBuffer)
 1378 03c2 F92E      		mov r15,r25
 1379 03c4 C0E0      		ldi r28,0
 1380 03c6 D0E0      		ldi r29,0
 1381               	.LVL107:
 1382               	.L66:
 1383               		.loc 1 615 0 is_stmt 0 discriminator 3
 1384 03c8 F701      		movw r30,r14
 1385 03ca 6191      		ld r22,Z+
 1386 03cc 7F01      		movw r14,r30
 1387 03ce CE01      		movw r24,r28
 1388 03d0 802B      		or r24,r16
 1389 03d2 912B      		or r25,r17
 1390 03d4 00D0      		rcall flash_write_bus_cycle
 1391               	.LVL108:
 1392 03d6 2196      		adiw r28,1
 1393               	.LVL109:
 614:setup.c       **** 		flash_write_bus_cycle((uint16_t) (sector << 7) | (uint16_t) x, receivedBuffer[x]);
 1394               		.loc 1 614 0 is_stmt 1 discriminator 3
 1395 03d8 C038      		cpi r28,-128
 1396 03da D105      		cpc r29,__zero_reg__
 1397 03dc 01F4      		brne .L66
 1398               	.LVL110:
 1399               	.LBE116:
 1400               	.LBB117:
 1401               	.LBB118:
 187:c:\winavr-20100110\avr\include\util\delay.h **** 
 1402               		.loc 2 187 0
 1403 03de 8FE3      		ldi r24,lo8(-25537)
 1404 03e0 9CE9      		ldi r25,hi8(-25537)
 1405 03e2 0197      	1:	sbiw r24,1
 1406 03e4 01F4      		brne 1b
 1407 03e6 00C0      		rjmp .
 1408 03e8 0000      		nop
 1409               	.LVL111:
 1410               	/* epilogue start */
 1411               	.LBE118:
 1412               	.LBE117:
 616:setup.c       **** 	}
 617:setup.c       **** 	_delay_ms(20); // Wait sector program time
 618:setup.c       **** }
 1413               		.loc 1 618 0
 1414 03ea DF91      		pop r29
 1415 03ec CF91      		pop r28
 1416               	.LVL112:
 1417 03ee 1F91      		pop r17
 1418 03f0 0F91      		pop r16
 1419 03f2 FF90      		pop r15
 1420 03f4 EF90      		pop r14
 1421 03f6 0895      		ret
 1422               		.cfi_endproc
 1423               	.LFE35:
 1425               	.global	gb_flash_read_byte
 1427               	gb_flash_read_byte:
 1428               	.LFB36:
 619:setup.c       **** 
 620:setup.c       **** 
 621:setup.c       **** 
 622:setup.c       **** // ---------- GB FLASH CARTS ----------
 623:setup.c       **** 
 624:setup.c       **** // Read a byte from the flash (No CS pin pulse)
 625:setup.c       **** uint8_t gb_flash_read_byte(uint16_t address) {
 1429               		.loc 1 625 0
 1430               		.cfi_startproc
 1431               	.LVL113:
 1432               	/* prologue: function */
 1433               	/* frame size = 0 */
 1434               	/* stack size = 0 */
 1435               	.L__stack_usage = 0
 626:setup.c       **** 	PORT_DATA7_0 = 0;
 1436               		.loc 1 626 0
 1437 03f8 15BA      		out 0x15,__zero_reg__
 627:setup.c       **** 	DDR_DATA7_0 = 0;
 1438               		.loc 1 627 0
 1439 03fa 14BA      		out 0x14,__zero_reg__
 628:setup.c       **** 	
 629:setup.c       **** 	set_16bit_address(address);
 1440               		.loc 1 629 0
 1441 03fc 00D0      		rcall set_16bit_address
 1442               	.LVL114:
 630:setup.c       **** 	
 631:setup.c       **** 	rdPin_low;
 1443               		.loc 1 631 0
 1444 03fe 9598      		cbi 0x12,5
 632:setup.c       **** 	asm volatile("nop"); // Delay a little
 1445               		.loc 1 632 0
 1446               	/* #APP */
 1447               	 ;  632 "setup.c" 1
 1448 0400 0000      		nop
 1449               	 ;  0 "" 2
 633:setup.c       **** 	asm volatile("nop");
 1450               		.loc 1 633 0
 1451               	 ;  633 "setup.c" 1
 1452 0402 0000      		nop
 1453               	 ;  0 "" 2
 634:setup.c       **** 	uint8_t data = PIN_DATA7_0; // Read data
 1454               		.loc 1 634 0
 1455               	/* #NOAPP */
 1456 0404 83B3      		in r24,0x13
 1457               	.LVL115:
 635:setup.c       **** 	rdPin_high;
 1458               		.loc 1 635 0
 1459 0406 959A      		sbi 0x12,5
 636:setup.c       **** 	
 637:setup.c       **** 	return data;
 638:setup.c       **** }
 1460               		.loc 1 638 0
 1461 0408 0895      		ret
 1462               		.cfi_endproc
 1463               	.LFE36:
 1465               	.global	gb_flash_write_bus_cycle
 1467               	gb_flash_write_bus_cycle:
 1468               	.LFB37:
 639:setup.c       **** 
 640:setup.c       **** // Set the address and data for the write byte cycle to the flash
 641:setup.c       **** void gb_flash_write_bus_cycle(uint16_t address, uint8_t data) {
 1469               		.loc 1 641 0
 1470               		.cfi_startproc
 1471               	.LVL116:
 1472 040a CF93      		push r28
 1473               	.LCFI25:
 1474               		.cfi_def_cfa_offset 3
 1475               		.cfi_offset 28, -2
 1476               	/* prologue: function */
 1477               	/* frame size = 0 */
 1478               	/* stack size = 1 */
 1479               	.L__stack_usage = 1
 1480 040c C62F      		mov r28,r22
 642:setup.c       **** 	DDR_DATA7_0 = 0xFF; // Set data pins as outputs
 1481               		.loc 1 642 0
 1482 040e 2FEF      		ldi r18,lo8(-1)
 1483 0410 24BB      		out 0x14,r18
 643:setup.c       **** 	set_16bit_address(address);
 1484               		.loc 1 643 0
 1485 0412 00D0      		rcall set_16bit_address
 1486               	.LVL117:
 644:setup.c       **** 	PORT_DATA7_0 = data;
 1487               		.loc 1 644 0
 1488 0414 C5BB      		out 0x15,r28
 645:setup.c       **** 	
 646:setup.c       **** 	if (flashWriteWePin == WE_AS_AUDIO_PIN) { // Audio pin
 1489               		.loc 1 646 0
 1490 0416 8091 0000 		lds r24,flashWriteWePin
 1491 041a 8134      		cpi r24,lo8(65)
 1492 041c 01F4      		brne .L70
 1493               	.LVL118:
 1494               	.LBB121:
 1495               	.LBB122:
 647:setup.c       **** 		audioPin_low; // WE low
 1496               		.loc 1 647 0
 1497 041e 3998      		cbi 0x7,1
 648:setup.c       **** 		asm volatile("nop");
 1498               		.loc 1 648 0
 1499               	/* #APP */
 1500               	 ;  648 "setup.c" 1
 1501 0420 0000      		nop
 1502               	 ;  0 "" 2
 649:setup.c       **** 		asm volatile("nop");
 1503               		.loc 1 649 0
 1504               	 ;  649 "setup.c" 1
 1505 0422 0000      		nop
 1506               	 ;  0 "" 2
 650:setup.c       **** 		asm volatile("nop");
 1507               		.loc 1 650 0
 1508               	 ;  650 "setup.c" 1
 1509 0424 0000      		nop
 1510               	 ;  0 "" 2
 651:setup.c       **** 		audioPin_high; // WE high
 1511               		.loc 1 651 0
 1512               	/* #NOAPP */
 1513 0426 399A      		sbi 0x7,1
 1514 0428 00C0      		rjmp .L69
 1515               	.LVL119:
 1516               	.L70:
 1517               	.LBE122:
 1518               	.LBE121:
 652:setup.c       **** 	}
 653:setup.c       **** 	else { // WR pin
 654:setup.c       **** 		wrPin_low; // WE low
 1519               		.loc 1 654 0
 1520 042a 9698      		cbi 0x12,6
 655:setup.c       **** 		asm volatile("nop");
 1521               		.loc 1 655 0
 1522               	/* #APP */
 1523               	 ;  655 "setup.c" 1
 1524 042c 0000      		nop
 1525               	 ;  0 "" 2
 656:setup.c       **** 		asm volatile("nop");
 1526               		.loc 1 656 0
 1527               	 ;  656 "setup.c" 1
 1528 042e 0000      		nop
 1529               	 ;  0 "" 2
 657:setup.c       **** 		asm volatile("nop");
 1530               		.loc 1 657 0
 1531               	 ;  657 "setup.c" 1
 1532 0430 0000      		nop
 1533               	 ;  0 "" 2
 658:setup.c       **** 		wrPin_high; // WE high
 1534               		.loc 1 658 0
 1535               	/* #NOAPP */
 1536 0432 969A      		sbi 0x12,6
 1537               	.L69:
 1538               	/* epilogue start */
 659:setup.c       **** 	}
 660:setup.c       **** }
 1539               		.loc 1 660 0
 1540 0434 CF91      		pop r28
 1541               	.LVL120:
 1542 0436 0895      		ret
 1543               		.cfi_endproc
 1544               	.LFE37:
 1546               	.global	gb_flash_write_byte
 1548               	gb_flash_write_byte:
 1549               	.LFB38:
 661:setup.c       **** 
 662:setup.c       **** // Write a single byte to the Flash address. Takes 10-50us to program each byte.
 663:setup.c       **** void gb_flash_write_byte(uint16_t address, uint8_t data) {
 1550               		.loc 1 663 0
 1551               		.cfi_startproc
 1552               	.LVL121:
 1553 0438 1F93      		push r17
 1554               	.LCFI26:
 1555               		.cfi_def_cfa_offset 3
 1556               		.cfi_offset 17, -2
 1557 043a CF93      		push r28
 1558               	.LCFI27:
 1559               		.cfi_def_cfa_offset 4
 1560               		.cfi_offset 28, -3
 1561 043c DF93      		push r29
 1562               	.LCFI28:
 1563               		.cfi_def_cfa_offset 5
 1564               		.cfi_offset 29, -4
 1565               	/* prologue: function */
 1566               	/* frame size = 0 */
 1567               	/* stack size = 3 */
 1568               	.L__stack_usage = 3
 1569 043e EC01      		movw r28,r24
 1570 0440 162F      		mov r17,r22
 664:setup.c       **** 	gb_flash_write_bus_cycle(flashWriteCycle[0][0], flashWriteCycle[0][1]);
 1571               		.loc 1 664 0
 1572 0442 6091 0000 		lds r22,flashWriteCycle+2
 1573               	.LVL122:
 1574 0446 8091 0000 		lds r24,flashWriteCycle
 1575 044a 9091 0000 		lds r25,flashWriteCycle+1
 1576               	.LVL123:
 1577 044e 00D0      		rcall gb_flash_write_bus_cycle
 1578               	.LVL124:
 665:setup.c       **** 	gb_flash_write_bus_cycle(flashWriteCycle[1][0], flashWriteCycle[1][1]);
 1579               		.loc 1 665 0
 1580 0450 6091 0000 		lds r22,flashWriteCycle+6
 1581 0454 8091 0000 		lds r24,flashWriteCycle+4
 1582 0458 9091 0000 		lds r25,flashWriteCycle+4+1
 1583 045c 00D0      		rcall gb_flash_write_bus_cycle
 1584               	.LVL125:
 666:setup.c       **** 	gb_flash_write_bus_cycle(flashWriteCycle[2][0], flashWriteCycle[2][1]);
 1585               		.loc 1 666 0
 1586 045e 6091 0000 		lds r22,flashWriteCycle+10
 1587 0462 8091 0000 		lds r24,flashWriteCycle+8
 1588 0466 9091 0000 		lds r25,flashWriteCycle+8+1
 1589 046a 00D0      		rcall gb_flash_write_bus_cycle
 1590               	.LVL126:
 667:setup.c       **** 	gb_flash_write_bus_cycle(address, data);
 1591               		.loc 1 667 0
 1592 046c 612F      		mov r22,r17
 1593 046e CE01      		movw r24,r28
 1594 0470 00D0      		rcall gb_flash_write_bus_cycle
 1595               	.LVL127:
 1596               	.LBB123:
 1597               	.LBB124:
 1598               		.loc 2 276 0
 1599 0472 8AE1      		ldi r24,lo8(26)
 1600 0474 8A95      	1:	dec r24
 1601 0476 01F4      		brne 1b
 1602 0478 00C0      		rjmp .
 1603               	.LVL128:
 1604               	.LBE124:
 1605               	.LBE123:
 668:setup.c       **** 	_delay_us(10); // Wait byte program time
 669:setup.c       **** 	
 670:setup.c       **** 	// Set data pins inputs
 671:setup.c       **** 	PORT_DATA7_0 = 0;
 1606               		.loc 1 671 0
 1607 047a 15BA      		out 0x15,__zero_reg__
 672:setup.c       **** 	DDR_DATA7_0 = 0;
 1608               		.loc 1 672 0
 1609 047c 14BA      		out 0x14,__zero_reg__
 673:setup.c       **** 	
 674:setup.c       **** 	// Verify data
 675:setup.c       **** 	uint8_t dataVerify = gb_flash_read_byte(address);
 1610               		.loc 1 675 0
 1611 047e CE01      		movw r24,r28
 1612 0480 00D0      		rcall gb_flash_read_byte
 1613               	.LVL129:
 1614               	.L73:
 676:setup.c       **** 	while (data != dataVerify) {
 1615               		.loc 1 676 0
 1616 0482 8117      		cp r24,r17
 1617 0484 01F0      		breq .L75
 677:setup.c       **** 		dataVerify = gb_flash_read_byte(address);
 1618               		.loc 1 677 0
 1619 0486 CE01      		movw r24,r28
 1620               	.LVL130:
 1621 0488 00D0      		rcall gb_flash_read_byte
 1622               	.LVL131:
 1623               	.LBB125:
 1624               	.LBB126:
 1625               		.loc 2 276 0
 1626 048a 9DE0      		ldi r25,lo8(13)
 1627 048c 9A95      	1:	dec r25
 1628 048e 01F4      		brne 1b
 1629 0490 0000      		nop
 1630 0492 00C0      		rjmp .L73
 1631               	.LVL132:
 1632               	.L75:
 1633               	/* epilogue start */
 1634               	.LBE126:
 1635               	.LBE125:
 678:setup.c       **** 		_delay_us(5);
 679:setup.c       **** 	}
 680:setup.c       **** }
 1636               		.loc 1 680 0
 1637 0494 DF91      		pop r29
 1638 0496 CF91      		pop r28
 1639               	.LVL133:
 1640 0498 1F91      		pop r17
 1641               	.LVL134:
 1642 049a 0895      		ret
 1643               		.cfi_endproc
 1644               	.LFE38:
 1646               	.global	gb_flash_write_byte_bank1_commands
 1648               	gb_flash_write_byte_bank1_commands:
 1649               	.LFB39:
 681:setup.c       **** 
 682:setup.c       **** // Write a single byte to the Flash address. Takes 10-50us to program each byte. 
 683:setup.c       **** // Switch to bank 1 to issue flash commands, then switch back to the bank we were at before
 684:setup.c       **** void gb_flash_write_byte_bank1_commands(uint16_t address, uint8_t data) {
 1650               		.loc 1 684 0
 1651               		.cfi_startproc
 1652               	.LVL135:
 1653 049c FF92      		push r15
 1654               	.LCFI29:
 1655               		.cfi_def_cfa_offset 3
 1656               		.cfi_offset 15, -2
 1657 049e 0F93      		push r16
 1658               	.LCFI30:
 1659               		.cfi_def_cfa_offset 4
 1660               		.cfi_offset 16, -3
 1661 04a0 1F93      		push r17
 1662               	.LCFI31:
 1663               		.cfi_def_cfa_offset 5
 1664               		.cfi_offset 17, -4
 1665 04a2 CF93      		push r28
 1666               	.LCFI32:
 1667               		.cfi_def_cfa_offset 6
 1668               		.cfi_offset 28, -5
 1669 04a4 DF93      		push r29
 1670               	.LCFI33:
 1671               		.cfi_def_cfa_offset 7
 1672               		.cfi_offset 29, -6
 1673               	/* prologue: function */
 1674               	/* frame size = 0 */
 1675               	/* stack size = 5 */
 1676               	.L__stack_usage = 5
 1677 04a6 EC01      		movw r28,r24
 1678 04a8 162F      		mov r17,r22
 685:setup.c       **** 	// Set bank 1
 686:setup.c       **** 	DDR_DATA7_0 = 0xFF;
 1679               		.loc 1 686 0
 1680 04aa FF24      		clr r15
 1681 04ac FA94      		dec r15
 1682 04ae F4BA      		out 0x14,r15
 1683               	.LVL136:
 1684               	.LBB127:
 1685               	.LBB128:
 246:setup.c       **** 	PORT_ADDR7_0 = (address & 0xFF);
 1686               		.loc 1 246 0
 1687 04b0 01E2      		ldi r16,lo8(33)
 1688 04b2 0BBB      		out 0x1b,r16
 247:setup.c       **** }
 1689               		.loc 1 247 0
 1690 04b4 18BA      		out 0x18,__zero_reg__
 1691               	.LVL137:
 1692               	.LBE128:
 1693               	.LBE127:
 687:setup.c       **** 	set_16bit_address(0x2100);
 688:setup.c       **** 	PORT_DATA7_0 = 1;
 1694               		.loc 1 688 0
 1695 04b6 81E0      		ldi r24,lo8(1)
 1696               	.LVL138:
 1697 04b8 85BB      		out 0x15,r24
 689:setup.c       **** 	wrPin_low; // Pulse WR
 1698               		.loc 1 689 0
 1699 04ba 9698      		cbi 0x12,6
 690:setup.c       **** 	asm volatile("nop");
 1700               		.loc 1 690 0
 1701               	/* #APP */
 1702               	 ;  690 "setup.c" 1
 1703 04bc 0000      		nop
 1704               	 ;  0 "" 2
 691:setup.c       **** 	wrPin_high;
 1705               		.loc 1 691 0
 1706               	/* #NOAPP */
 1707 04be 969A      		sbi 0x12,6
 692:setup.c       **** 	
 693:setup.c       **** 	gb_flash_write_bus_cycle(flashWriteCycle[0][0], flashWriteCycle[0][1]);
 1708               		.loc 1 693 0
 1709 04c0 6091 0000 		lds r22,flashWriteCycle+2
 1710               	.LVL139:
 1711 04c4 8091 0000 		lds r24,flashWriteCycle
 1712 04c8 9091 0000 		lds r25,flashWriteCycle+1
 1713 04cc 00D0      		rcall gb_flash_write_bus_cycle
 1714               	.LVL140:
 694:setup.c       **** 	gb_flash_write_bus_cycle(flashWriteCycle[1][0], flashWriteCycle[1][1]);
 1715               		.loc 1 694 0
 1716 04ce 6091 0000 		lds r22,flashWriteCycle+6
 1717 04d2 8091 0000 		lds r24,flashWriteCycle+4
 1718 04d6 9091 0000 		lds r25,flashWriteCycle+4+1
 1719 04da 00D0      		rcall gb_flash_write_bus_cycle
 1720               	.LVL141:
 695:setup.c       **** 	gb_flash_write_bus_cycle(flashWriteCycle[2][0], flashWriteCycle[2][1]);
 1721               		.loc 1 695 0
 1722 04dc 6091 0000 		lds r22,flashWriteCycle+10
 1723 04e0 8091 0000 		lds r24,flashWriteCycle+8
 1724 04e4 9091 0000 		lds r25,flashWriteCycle+8+1
 1725 04e8 00D0      		rcall gb_flash_write_bus_cycle
 1726               	.LVL142:
 696:setup.c       **** 	
 697:setup.c       **** 	
 698:setup.c       **** 	// Set bank back
 699:setup.c       **** 	DDR_DATA7_0 = 0xFF;
 1727               		.loc 1 699 0
 1728 04ea F4BA      		out 0x14,r15
 1729               	.LVL143:
 1730               	.LBB129:
 1731               	.LBB130:
 246:setup.c       **** 	PORT_ADDR7_0 = (address & 0xFF);
 1732               		.loc 1 246 0
 1733 04ec 0BBB      		out 0x1b,r16
 247:setup.c       **** }
 1734               		.loc 1 247 0
 1735 04ee 18BA      		out 0x18,__zero_reg__
 1736               	.LVL144:
 1737               	.LBE130:
 1738               	.LBE129:
 700:setup.c       **** 	set_16bit_address(0x2100);
 701:setup.c       **** 	PORT_DATA7_0 = lastBankAccessed;
 1739               		.loc 1 701 0
 1740 04f0 8091 0000 		lds r24,lastBankAccessed
 1741 04f4 85BB      		out 0x15,r24
 702:setup.c       **** 	wrPin_low; // Pulse WR
 1742               		.loc 1 702 0
 1743 04f6 9698      		cbi 0x12,6
 703:setup.c       **** 	asm volatile("nop");
 1744               		.loc 1 703 0
 1745               	/* #APP */
 1746               	 ;  703 "setup.c" 1
 1747 04f8 0000      		nop
 1748               	 ;  0 "" 2
 704:setup.c       **** 	wrPin_high;
 1749               		.loc 1 704 0
 1750               	/* #NOAPP */
 1751 04fa 969A      		sbi 0x12,6
 705:setup.c       **** 	
 706:setup.c       **** 	gb_flash_write_bus_cycle(address, data);
 1752               		.loc 1 706 0
 1753 04fc 612F      		mov r22,r17
 1754 04fe CE01      		movw r24,r28
 1755 0500 00D0      		rcall gb_flash_write_bus_cycle
 1756               	.LVL145:
 1757               	.LBB131:
 1758               	.LBB132:
 1759               		.loc 2 276 0
 1760 0502 8AE1      		ldi r24,lo8(26)
 1761 0504 8A95      	1:	dec r24
 1762 0506 01F4      		brne 1b
 1763 0508 00C0      		rjmp .
 1764               	.LVL146:
 1765               	.LBE132:
 1766               	.LBE131:
 707:setup.c       **** 	_delay_us(10); // Wait byte program time
 708:setup.c       **** 	
 709:setup.c       **** 	// Set data pins inputs
 710:setup.c       **** 	PORT_DATA7_0 = 0;
 1767               		.loc 1 710 0
 1768 050a 15BA      		out 0x15,__zero_reg__
 711:setup.c       **** 	DDR_DATA7_0 = 0;
 1769               		.loc 1 711 0
 1770 050c 14BA      		out 0x14,__zero_reg__
 712:setup.c       **** 	
 713:setup.c       **** 	// Verify data
 714:setup.c       **** 	uint8_t dataVerify = gb_flash_read_byte(address);
 1771               		.loc 1 714 0
 1772 050e CE01      		movw r24,r28
 1773 0510 00D0      		rcall gb_flash_read_byte
 1774               	.LVL147:
 1775               	.L77:
 715:setup.c       **** 	while (data != dataVerify) {
 1776               		.loc 1 715 0
 1777 0512 8117      		cp r24,r17
 1778 0514 01F0      		breq .L79
 716:setup.c       **** 		dataVerify = gb_flash_read_byte(address);
 1779               		.loc 1 716 0
 1780 0516 CE01      		movw r24,r28
 1781               	.LVL148:
 1782 0518 00D0      		rcall gb_flash_read_byte
 1783               	.LVL149:
 1784               	.LBB133:
 1785               	.LBB134:
 1786               		.loc 2 276 0
 1787 051a 9DE0      		ldi r25,lo8(13)
 1788 051c 9A95      	1:	dec r25
 1789 051e 01F4      		brne 1b
 1790 0520 0000      		nop
 1791 0522 00C0      		rjmp .L77
 1792               	.LVL150:
 1793               	.L79:
 1794               	/* epilogue start */
 1795               	.LBE134:
 1796               	.LBE133:
 717:setup.c       **** 		_delay_us(5);
 718:setup.c       **** 	}
 719:setup.c       **** }
 1797               		.loc 1 719 0
 1798 0524 DF91      		pop r29
 1799 0526 CF91      		pop r28
 1800               	.LVL151:
 1801 0528 1F91      		pop r17
 1802               	.LVL152:
 1803 052a 0F91      		pop r16
 1804 052c FF90      		pop r15
 1805 052e 0895      		ret
 1806               		.cfi_endproc
 1807               	.LFE39:
 1809               	.global	gba_flash_write_bus_cycle
 1811               	gba_flash_write_bus_cycle:
 1812               	.LFB40:
 720:setup.c       **** 
 721:setup.c       **** 
 722:setup.c       **** 
 723:setup.c       **** // ---------- GBA FLASH CARTS ----------
 724:setup.c       **** 
 725:setup.c       **** // Set the 24 bit address and 16 bit data for the write byte cycle to the flash (pulse WR pin)
 726:setup.c       **** void gba_flash_write_bus_cycle(uint32_t address, uint16_t data) {
 1813               		.loc 1 726 0
 1814               		.cfi_startproc
 1815               	.LVL153:
 1816 0530 0F93      		push r16
 1817               	.LCFI34:
 1818               		.cfi_def_cfa_offset 3
 1819               		.cfi_offset 16, -2
 1820 0532 1F93      		push r17
 1821               	.LCFI35:
 1822               		.cfi_def_cfa_offset 4
 1823               		.cfi_offset 17, -3
 1824               	/* prologue: function */
 1825               	/* frame size = 0 */
 1826               	/* stack size = 2 */
 1827               	.L__stack_usage = 2
 727:setup.c       **** 	GBA_PORT_ROM_ADDR23_16 = (address >> 16);
 1828               		.loc 1 727 0
 1829 0534 8C01      		movw r16,r24
 1830 0536 2227      		clr r18
 1831 0538 3327      		clr r19
 1832 053a 05BB      		out 0x15,r16
 728:setup.c       **** 	GBA_PORT_ROM_ADDR15_8 = (address >> 8);
 1833               		.loc 1 728 0
 1834 053c 072F      		mov r16,r23
 1835 053e 182F      		mov r17,r24
 1836 0540 292F      		mov r18,r25
 1837 0542 3327      		clr r19
 1838 0544 0BBB      		out 0x1b,r16
 729:setup.c       **** 	GBA_PORT_ROM_ADDR7_0 = (address & 0xFF);
 1839               		.loc 1 729 0
 1840 0546 68BB      		out 0x18,r22
 730:setup.c       **** 	
 731:setup.c       **** 	cs_mreqPin_low;
 1841               		.loc 1 731 0
 1842 0548 9498      		cbi 0x12,4
 732:setup.c       **** 	
 733:setup.c       **** 	GBA_PORT_ROM_DATA15_8 = data >> 8; // Set data
 1843               		.loc 1 733 0
 1844 054a 5BBB      		out 0x1b,r21
 734:setup.c       **** 	GBA_PORT_ROM_DATA7_0 = data & 0xFF;
 1845               		.loc 1 734 0
 1846 054c 48BB      		out 0x18,r20
 735:setup.c       **** 	
 736:setup.c       **** 	wrPin_low;
 1847               		.loc 1 736 0
 1848 054e 9698      		cbi 0x12,6
 737:setup.c       **** 	asm volatile("nop");
 1849               		.loc 1 737 0
 1850               	/* #APP */
 1851               	 ;  737 "setup.c" 1
 1852 0550 0000      		nop
 1853               	 ;  0 "" 2
 738:setup.c       **** 	asm volatile("nop");
 1854               		.loc 1 738 0
 1855               	 ;  738 "setup.c" 1
 1856 0552 0000      		nop
 1857               	 ;  0 "" 2
 739:setup.c       **** 	asm volatile("nop");
 1858               		.loc 1 739 0
 1859               	 ;  739 "setup.c" 1
 1860 0554 0000      		nop
 1861               	 ;  0 "" 2
 740:setup.c       **** 	wrPin_high;
 1862               		.loc 1 740 0
 1863               	/* #NOAPP */
 1864 0556 969A      		sbi 0x12,6
 741:setup.c       **** 	cs_mreqPin_high;
 1865               		.loc 1 741 0
 1866 0558 949A      		sbi 0x12,4
 1867               	/* epilogue start */
 742:setup.c       **** }
 1868               		.loc 1 742 0
 1869 055a 1F91      		pop r17
 1870 055c 0F91      		pop r16
 1871 055e 0895      		ret
 1872               		.cfi_endproc
 1873               	.LFE40:
 1875               	.global	gba_flash_write_cycle_start_swapped
 1877               	gba_flash_write_cycle_start_swapped:
 1878               	.LFB41:
 743:setup.c       **** 
 744:setup.c       **** // Send the first 3 write cycles to the flash (swapped D0/D1)
 745:setup.c       **** void gba_flash_write_cycle_start_swapped(void) {
 1879               		.loc 1 745 0
 1880               		.cfi_startproc
 1881               	/* prologue: function */
 1882               	/* frame size = 0 */
 1883               	/* stack size = 0 */
 1884               	.L__stack_usage = 0
 746:setup.c       **** 	// Set outputs
 747:setup.c       **** 	GBA_DDR_ROM_ADDR23_16 = 0xFF;
 1885               		.loc 1 747 0
 1886 0560 8FEF      		ldi r24,lo8(-1)
 1887 0562 84BB      		out 0x14,r24
 748:setup.c       **** 	GBA_DDR_ROM_ADDR15_8 = 0xFF;
 1888               		.loc 1 748 0
 1889 0564 8ABB      		out 0x1a,r24
 749:setup.c       **** 	GBA_DDR_ROM_ADDR7_0 = 0xFF;
 1890               		.loc 1 749 0
 1891 0566 87BB      		out 0x17,r24
 750:setup.c       **** 	
 751:setup.c       **** 	// 0x555, 0xA9
 752:setup.c       **** 	GBA_PORT_ROM_ADDR23_16 = 0;
 1892               		.loc 1 752 0
 1893 0568 15BA      		out 0x15,__zero_reg__
 753:setup.c       **** 	GBA_PORT_ROM_ADDR15_8 = 0x05;
 1894               		.loc 1 753 0
 1895 056a 95E0      		ldi r25,lo8(5)
 1896 056c 9BBB      		out 0x1b,r25
 754:setup.c       **** 	GBA_PORT_ROM_ADDR7_0 = 0x55;
 1897               		.loc 1 754 0
 1898 056e 85E5      		ldi r24,lo8(85)
 1899 0570 88BB      		out 0x18,r24
 755:setup.c       **** 	cs_mreqPin_low;
 1900               		.loc 1 755 0
 1901 0572 9498      		cbi 0x12,4
 756:setup.c       **** 	GBA_PORT_ROM_DATA15_8 = 0; // Set data
 1902               		.loc 1 756 0
 1903 0574 1BBA      		out 0x1b,__zero_reg__
 757:setup.c       **** 	GBA_PORT_ROM_DATA7_0 = 0xA9;
 1904               		.loc 1 757 0
 1905 0576 29EA      		ldi r18,lo8(-87)
 1906 0578 28BB      		out 0x18,r18
 758:setup.c       **** 	wrPin_low;
 1907               		.loc 1 758 0
 1908 057a 9698      		cbi 0x12,6
 759:setup.c       **** 	asm volatile("nop");
 1909               		.loc 1 759 0
 1910               	/* #APP */
 1911               	 ;  759 "setup.c" 1
 1912 057c 0000      		nop
 1913               	 ;  0 "" 2
 760:setup.c       **** 	asm volatile("nop");
 1914               		.loc 1 760 0
 1915               	 ;  760 "setup.c" 1
 1916 057e 0000      		nop
 1917               	 ;  0 "" 2
 761:setup.c       **** 	asm volatile("nop");
 1918               		.loc 1 761 0
 1919               	 ;  761 "setup.c" 1
 1920 0580 0000      		nop
 1921               	 ;  0 "" 2
 762:setup.c       **** 	wrPin_high;
 1922               		.loc 1 762 0
 1923               	/* #NOAPP */
 1924 0582 969A      		sbi 0x12,6
 763:setup.c       **** 	cs_mreqPin_high;
 1925               		.loc 1 763 0
 1926 0584 949A      		sbi 0x12,4
 764:setup.c       **** 	
 765:setup.c       **** 	// 0x2AA, 0x56
 766:setup.c       **** 	GBA_PORT_ROM_ADDR23_16 = 0;
 1927               		.loc 1 766 0
 1928 0586 15BA      		out 0x15,__zero_reg__
 767:setup.c       **** 	GBA_PORT_ROM_ADDR15_8 = 0x02;
 1929               		.loc 1 767 0
 1930 0588 22E0      		ldi r18,lo8(2)
 1931 058a 2BBB      		out 0x1b,r18
 768:setup.c       **** 	GBA_PORT_ROM_ADDR7_0 = 0xAA;
 1932               		.loc 1 768 0
 1933 058c 2AEA      		ldi r18,lo8(-86)
 1934 058e 28BB      		out 0x18,r18
 769:setup.c       **** 	cs_mreqPin_low;
 1935               		.loc 1 769 0
 1936 0590 9498      		cbi 0x12,4
 770:setup.c       **** 	GBA_PORT_ROM_DATA15_8 = 0; // Set data
 1937               		.loc 1 770 0
 1938 0592 1BBA      		out 0x1b,__zero_reg__
 771:setup.c       **** 	GBA_PORT_ROM_DATA7_0 = 0x56;
 1939               		.loc 1 771 0
 1940 0594 26E5      		ldi r18,lo8(86)
 1941 0596 28BB      		out 0x18,r18
 772:setup.c       **** 	wrPin_low;
 1942               		.loc 1 772 0
 1943 0598 9698      		cbi 0x12,6
 773:setup.c       **** 	asm volatile("nop");
 1944               		.loc 1 773 0
 1945               	/* #APP */
 1946               	 ;  773 "setup.c" 1
 1947 059a 0000      		nop
 1948               	 ;  0 "" 2
 774:setup.c       **** 	asm volatile("nop");
 1949               		.loc 1 774 0
 1950               	 ;  774 "setup.c" 1
 1951 059c 0000      		nop
 1952               	 ;  0 "" 2
 775:setup.c       **** 	asm volatile("nop");
 1953               		.loc 1 775 0
 1954               	 ;  775 "setup.c" 1
 1955 059e 0000      		nop
 1956               	 ;  0 "" 2
 776:setup.c       **** 	wrPin_high;
 1957               		.loc 1 776 0
 1958               	/* #NOAPP */
 1959 05a0 969A      		sbi 0x12,6
 777:setup.c       **** 	cs_mreqPin_high;
 1960               		.loc 1 777 0
 1961 05a2 949A      		sbi 0x12,4
 778:setup.c       **** 	
 779:setup.c       **** 	// 0x555, 0xA0;
 780:setup.c       **** 	GBA_PORT_ROM_ADDR23_16 = 0;
 1962               		.loc 1 780 0
 1963 05a4 15BA      		out 0x15,__zero_reg__
 781:setup.c       **** 	GBA_PORT_ROM_ADDR15_8 = 0x05;
 1964               		.loc 1 781 0
 1965 05a6 9BBB      		out 0x1b,r25
 782:setup.c       **** 	GBA_PORT_ROM_ADDR7_0 = 0x55;
 1966               		.loc 1 782 0
 1967 05a8 88BB      		out 0x18,r24
 783:setup.c       **** 	cs_mreqPin_low;
 1968               		.loc 1 783 0
 1969 05aa 9498      		cbi 0x12,4
 784:setup.c       **** 	GBA_PORT_ROM_DATA15_8 = 0; // Set data
 1970               		.loc 1 784 0
 1971 05ac 1BBA      		out 0x1b,__zero_reg__
 785:setup.c       **** 	GBA_PORT_ROM_DATA7_0 = 0xA0;
 1972               		.loc 1 785 0
 1973 05ae 80EA      		ldi r24,lo8(-96)
 1974 05b0 88BB      		out 0x18,r24
 786:setup.c       **** 	wrPin_low;
 1975               		.loc 1 786 0
 1976 05b2 9698      		cbi 0x12,6
 787:setup.c       **** 	asm volatile("nop");
 1977               		.loc 1 787 0
 1978               	/* #APP */
 1979               	 ;  787 "setup.c" 1
 1980 05b4 0000      		nop
 1981               	 ;  0 "" 2
 788:setup.c       **** 	asm volatile("nop");
 1982               		.loc 1 788 0
 1983               	 ;  788 "setup.c" 1
 1984 05b6 0000      		nop
 1985               	 ;  0 "" 2
 789:setup.c       **** 	asm volatile("nop");
 1986               		.loc 1 789 0
 1987               	 ;  789 "setup.c" 1
 1988 05b8 0000      		nop
 1989               	 ;  0 "" 2
 790:setup.c       **** 	wrPin_high;
 1990               		.loc 1 790 0
 1991               	/* #NOAPP */
 1992 05ba 969A      		sbi 0x12,6
 791:setup.c       **** 	cs_mreqPin_high;
 1993               		.loc 1 791 0
 1994 05bc 949A      		sbi 0x12,4
 1995 05be 0895      		ret
 1996               		.cfi_endproc
 1997               	.LFE41:
 1999               	.global	gba_flash_write_cycle_start
 2001               	gba_flash_write_cycle_start:
 2002               	.LFB42:
 792:setup.c       **** }
 793:setup.c       **** 
 794:setup.c       **** 
 795:setup.c       **** // Send the first 3 write cycles to the flash
 796:setup.c       **** void gba_flash_write_cycle_start(void) {
 2003               		.loc 1 796 0
 2004               		.cfi_startproc
 2005               	/* prologue: function */
 2006               	/* frame size = 0 */
 2007               	/* stack size = 0 */
 2008               	.L__stack_usage = 0
 797:setup.c       **** 	// Set outputs
 798:setup.c       **** 	GBA_DDR_ROM_ADDR23_16 = 0xFF;
 2009               		.loc 1 798 0
 2010 05c0 8FEF      		ldi r24,lo8(-1)
 2011 05c2 84BB      		out 0x14,r24
 799:setup.c       **** 	GBA_DDR_ROM_ADDR15_8 = 0xFF;
 2012               		.loc 1 799 0
 2013 05c4 8ABB      		out 0x1a,r24
 800:setup.c       **** 	GBA_DDR_ROM_ADDR7_0 = 0xFF;
 2014               		.loc 1 800 0
 2015 05c6 87BB      		out 0x17,r24
 801:setup.c       **** 	
 802:setup.c       **** 	// 0x555, 0xAA
 803:setup.c       **** 	GBA_PORT_ROM_ADDR23_16 = 0;
 2016               		.loc 1 803 0
 2017 05c8 15BA      		out 0x15,__zero_reg__
 804:setup.c       **** 	GBA_PORT_ROM_ADDR15_8 = 0x05;
 2018               		.loc 1 804 0
 2019 05ca 95E0      		ldi r25,lo8(5)
 2020 05cc 9BBB      		out 0x1b,r25
 805:setup.c       **** 	GBA_PORT_ROM_ADDR7_0 = 0x55;
 2021               		.loc 1 805 0
 2022 05ce 85E5      		ldi r24,lo8(85)
 2023 05d0 88BB      		out 0x18,r24
 806:setup.c       **** 	cs_mreqPin_low;
 2024               		.loc 1 806 0
 2025 05d2 9498      		cbi 0x12,4
 807:setup.c       **** 	GBA_PORT_ROM_DATA15_8 = 0; // Set data
 2026               		.loc 1 807 0
 2027 05d4 1BBA      		out 0x1b,__zero_reg__
 808:setup.c       **** 	GBA_PORT_ROM_DATA7_0 = 0xAA;
 2028               		.loc 1 808 0
 2029 05d6 2AEA      		ldi r18,lo8(-86)
 2030 05d8 28BB      		out 0x18,r18
 809:setup.c       **** 	wrPin_low;
 2031               		.loc 1 809 0
 2032 05da 9698      		cbi 0x12,6
 810:setup.c       **** 	asm volatile("nop");
 2033               		.loc 1 810 0
 2034               	/* #APP */
 2035               	 ;  810 "setup.c" 1
 2036 05dc 0000      		nop
 2037               	 ;  0 "" 2
 811:setup.c       **** 	asm volatile("nop");
 2038               		.loc 1 811 0
 2039               	 ;  811 "setup.c" 1
 2040 05de 0000      		nop
 2041               	 ;  0 "" 2
 812:setup.c       **** 	asm volatile("nop");
 2042               		.loc 1 812 0
 2043               	 ;  812 "setup.c" 1
 2044 05e0 0000      		nop
 2045               	 ;  0 "" 2
 813:setup.c       **** 	wrPin_high;
 2046               		.loc 1 813 0
 2047               	/* #NOAPP */
 2048 05e2 969A      		sbi 0x12,6
 814:setup.c       **** 	cs_mreqPin_high;
 2049               		.loc 1 814 0
 2050 05e4 949A      		sbi 0x12,4
 815:setup.c       **** 	
 816:setup.c       **** 	// 0x2AA, 0x55
 817:setup.c       **** 	GBA_PORT_ROM_ADDR23_16 = 0;
 2051               		.loc 1 817 0
 2052 05e6 15BA      		out 0x15,__zero_reg__
 818:setup.c       **** 	GBA_PORT_ROM_ADDR15_8 = 0x02;
 2053               		.loc 1 818 0
 2054 05e8 32E0      		ldi r19,lo8(2)
 2055 05ea 3BBB      		out 0x1b,r19
 819:setup.c       **** 	GBA_PORT_ROM_ADDR7_0 = 0xAA;
 2056               		.loc 1 819 0
 2057 05ec 28BB      		out 0x18,r18
 820:setup.c       **** 	cs_mreqPin_low;
 2058               		.loc 1 820 0
 2059 05ee 9498      		cbi 0x12,4
 821:setup.c       **** 	GBA_PORT_ROM_DATA15_8 = 0; // Set data
 2060               		.loc 1 821 0
 2061 05f0 1BBA      		out 0x1b,__zero_reg__
 822:setup.c       **** 	GBA_PORT_ROM_DATA7_0 = 0x55;
 2062               		.loc 1 822 0
 2063 05f2 88BB      		out 0x18,r24
 823:setup.c       **** 	wrPin_low;
 2064               		.loc 1 823 0
 2065 05f4 9698      		cbi 0x12,6
 824:setup.c       **** 	asm volatile("nop");
 2066               		.loc 1 824 0
 2067               	/* #APP */
 2068               	 ;  824 "setup.c" 1
 2069 05f6 0000      		nop
 2070               	 ;  0 "" 2
 825:setup.c       **** 	asm volatile("nop");
 2071               		.loc 1 825 0
 2072               	 ;  825 "setup.c" 1
 2073 05f8 0000      		nop
 2074               	 ;  0 "" 2
 826:setup.c       **** 	asm volatile("nop");
 2075               		.loc 1 826 0
 2076               	 ;  826 "setup.c" 1
 2077 05fa 0000      		nop
 2078               	 ;  0 "" 2
 827:setup.c       **** 	wrPin_high;
 2079               		.loc 1 827 0
 2080               	/* #NOAPP */
 2081 05fc 969A      		sbi 0x12,6
 828:setup.c       **** 	cs_mreqPin_high;
 2082               		.loc 1 828 0
 2083 05fe 949A      		sbi 0x12,4
 829:setup.c       **** 	
 830:setup.c       **** 	// 0x555, 0xA0;
 831:setup.c       **** 	GBA_PORT_ROM_ADDR23_16 = 0;
 2084               		.loc 1 831 0
 2085 0600 15BA      		out 0x15,__zero_reg__
 832:setup.c       **** 	GBA_PORT_ROM_ADDR15_8 = 0x05;
 2086               		.loc 1 832 0
 2087 0602 9BBB      		out 0x1b,r25
 833:setup.c       **** 	GBA_PORT_ROM_ADDR7_0 = 0x55;
 2088               		.loc 1 833 0
 2089 0604 88BB      		out 0x18,r24
 834:setup.c       **** 	cs_mreqPin_low;
 2090               		.loc 1 834 0
 2091 0606 9498      		cbi 0x12,4
 835:setup.c       **** 	GBA_PORT_ROM_DATA15_8 = 0; // Set data
 2092               		.loc 1 835 0
 2093 0608 1BBA      		out 0x1b,__zero_reg__
 836:setup.c       **** 	GBA_PORT_ROM_DATA7_0 = 0xA0;
 2094               		.loc 1 836 0
 2095 060a 80EA      		ldi r24,lo8(-96)
 2096 060c 88BB      		out 0x18,r24
 837:setup.c       **** 	wrPin_low;
 2097               		.loc 1 837 0
 2098 060e 9698      		cbi 0x12,6
 838:setup.c       **** 	asm volatile("nop");
 2099               		.loc 1 838 0
 2100               	/* #APP */
 2101               	 ;  838 "setup.c" 1
 2102 0610 0000      		nop
 2103               	 ;  0 "" 2
 839:setup.c       **** 	asm volatile("nop");
 2104               		.loc 1 839 0
 2105               	 ;  839 "setup.c" 1
 2106 0612 0000      		nop
 2107               	 ;  0 "" 2
 840:setup.c       **** 	asm volatile("nop");
 2108               		.loc 1 840 0
 2109               	 ;  840 "setup.c" 1
 2110 0614 0000      		nop
 2111               	 ;  0 "" 2
 841:setup.c       **** 	wrPin_high;
 2112               		.loc 1 841 0
 2113               	/* #NOAPP */
 2114 0616 969A      		sbi 0x12,6
 842:setup.c       **** 	cs_mreqPin_high;
 2115               		.loc 1 842 0
 2116 0618 949A      		sbi 0x12,4
 2117 061a 0895      		ret
 2118               		.cfi_endproc
 2119               	.LFE42:
 2121               	.global	gba_flash_write_byte
 2123               	gba_flash_write_byte:
 2124               	.LFB43:
 843:setup.c       **** }	
 844:setup.c       **** 
 845:setup.c       **** 
 846:setup.c       **** // Write 2 bytes to the Flash address. Time to wait depends on Flash, we will query it to verify th
 847:setup.c       **** // Address is divided by 2 as we are in GBA mode. 
 848:setup.c       **** void gba_flash_write_byte(uint32_t address, uint16_t data, uint8_t isD0D1Swapped) {
 2125               		.loc 1 848 0
 2126               		.cfi_startproc
 2127               	.LVL154:
 2128 061c CF92      		push r12
 2129               	.LCFI36:
 2130               		.cfi_def_cfa_offset 3
 2131               		.cfi_offset 12, -2
 2132 061e DF92      		push r13
 2133               	.LCFI37:
 2134               		.cfi_def_cfa_offset 4
 2135               		.cfi_offset 13, -3
 2136 0620 EF92      		push r14
 2137               	.LCFI38:
 2138               		.cfi_def_cfa_offset 5
 2139               		.cfi_offset 14, -4
 2140 0622 FF92      		push r15
 2141               	.LCFI39:
 2142               		.cfi_def_cfa_offset 6
 2143               		.cfi_offset 15, -5
 2144 0624 CF93      		push r28
 2145               	.LCFI40:
 2146               		.cfi_def_cfa_offset 7
 2147               		.cfi_offset 28, -6
 2148 0626 DF93      		push r29
 2149               	.LCFI41:
 2150               		.cfi_def_cfa_offset 8
 2151               		.cfi_offset 29, -7
 2152               	/* prologue: function */
 2153               	/* frame size = 0 */
 2154               	/* stack size = 6 */
 2155               	.L__stack_usage = 6
 2156 0628 6B01      		movw r12,r22
 2157 062a 7C01      		movw r14,r24
 2158 062c EA01      		movw r28,r20
 849:setup.c       **** 	if (isD0D1Swapped == 0) {
 2159               		.loc 1 849 0
 2160 062e 2111      		cpse r18,__zero_reg__
 2161 0630 00C0      		rjmp .L84
 850:setup.c       **** 		gba_flash_write_cycle_start();
 2162               		.loc 1 850 0
 2163 0632 00D0      		rcall gba_flash_write_cycle_start
 2164               	.LVL155:
 2165 0634 00C0      		rjmp .L85
 2166               	.LVL156:
 2167               	.L84:
 851:setup.c       **** 	}
 852:setup.c       **** 	else {
 853:setup.c       **** 		gba_flash_write_cycle_start_swapped();
 2168               		.loc 1 853 0
 2169 0636 00D0      		rcall gba_flash_write_cycle_start_swapped
 2170               	.LVL157:
 2171               	.L85:
 854:setup.c       **** 	}
 855:setup.c       **** 	gba_flash_write_bus_cycle(address, data);
 2172               		.loc 1 855 0
 2173 0638 AE01      		movw r20,r28
 2174 063a C701      		movw r24,r14
 2175 063c B601      		movw r22,r12
 2176 063e 00D0      		rcall gba_flash_write_bus_cycle
 2177               	.LVL158:
 2178               	.LBB135:
 2179               	.LBB136:
 2180               		.loc 2 276 0
 2181 0640 25E0      		ldi r18,lo8(5)
 2182 0642 2A95      	1:	dec r18
 2183 0644 01F4      		brne 1b
 2184 0646 0000      		nop
 2185               	.LVL159:
 2186               	.LBE136:
 2187               	.LBE135:
 856:setup.c       **** 	_delay_us(2); // Wait byte program time
 857:setup.c       **** 	
 858:setup.c       **** 	// Verify data
 859:setup.c       **** 	uint16_t dataVerify = gba_read_16bit_data(address);
 2188               		.loc 1 859 0
 2189 0648 C701      		movw r24,r14
 2190 064a B601      		movw r22,r12
 2191 064c 00D0      		rcall gba_read_16bit_data
 2192               	.LVL160:
 2193               	.L86:
 860:setup.c       **** 	while (data != dataVerify) {
 2194               		.loc 1 860 0
 2195 064e 8C17      		cp r24,r28
 2196 0650 9D07      		cpc r25,r29
 2197 0652 01F0      		breq .L88
 861:setup.c       **** 		dataVerify = gba_read_16bit_data(address);
 2198               		.loc 1 861 0
 2199 0654 C701      		movw r24,r14
 2200 0656 B601      		movw r22,r12
 2201 0658 00D0      		rcall gba_read_16bit_data
 2202               	.LVL161:
 2203               	.LBB137:
 2204               	.LBB138:
 2205               		.loc 2 276 0
 2206 065a 25E0      		ldi r18,lo8(5)
 2207 065c 2A95      	1:	dec r18
 2208 065e 01F4      		brne 1b
 2209 0660 0000      		nop
 2210 0662 00C0      		rjmp .L86
 2211               	.LVL162:
 2212               	.L88:
 2213               	/* epilogue start */
 2214               	.LBE138:
 2215               	.LBE137:
 862:setup.c       **** 		_delay_us(2);
 863:setup.c       **** 	}
 864:setup.c       **** }
 2216               		.loc 1 864 0
 2217 0664 DF91      		pop r29
 2218 0666 CF91      		pop r28
 2219               	.LVL163:
 2220 0668 FF90      		pop r15
 2221 066a EF90      		pop r14
 2222 066c DF90      		pop r13
 2223 066e CF90      		pop r12
 2224               	.LVL164:
 2225 0670 0895      		ret
 2226               		.cfi_endproc
 2227               	.LFE43:
 2229               	.global	setup
 2231               	setup:
 2232               	.LFB44:
 865:setup.c       **** 
 866:setup.c       **** 
 867:setup.c       **** // Setup
 868:setup.c       **** void setup(void) {
 2233               		.loc 1 868 0
 2234               		.cfi_startproc
 2235               	/* prologue: function */
 2236               	/* frame size = 0 */
 2237               	/* stack size = 0 */
 2238               	.L__stack_usage = 0
 869:setup.c       **** 	// Turn off watchdog
 870:setup.c       **** 	MCUCSR &= ~(1<<WDRF);
 2239               		.loc 1 870 0
 2240 0672 84B7      		in r24,0x34
 2241 0674 877F      		andi r24,lo8(-9)
 2242 0676 84BF      		out 0x34,r24
 871:setup.c       **** 	WDTCR = (1<<WDCE) | (1<<WDE);
 2243               		.loc 1 871 0
 2244 0678 88E1      		ldi r24,lo8(24)
 2245 067a 81BD      		out 0x21,r24
 872:setup.c       **** 	WDTCR = 0;
 2246               		.loc 1 872 0
 2247 067c 11BC      		out 0x21,__zero_reg__
 873:setup.c       **** 	
 874:setup.c       **** 	// Reset common lines
 875:setup.c       **** 	rd_wr_csmreq_cs2_reset();
 2248               		.loc 1 875 0
 2249 067e 00D0      		rcall rd_wr_csmreq_cs2_reset
 2250               	.LVL165:
 876:setup.c       **** 	
 877:setup.c       **** 	// Set outputs
 878:setup.c       **** 	DDRD |= (1<<ACTIVITY_LED) | (1<<WR_PIN) | (1<<RD_PIN) | (1<<CS_MREQ_PIN) | (1<<LED_5V) | (1<<VOLTA
 2251               		.loc 1 878 0
 2252 0680 81B3      		in r24,0x11
 2253 0682 8C6F      		ori r24,lo8(-4)
 2254 0684 81BB      		out 0x11,r24
 879:setup.c       **** 	DDRE |= (1<<CS2_PIN) | (1<<LED_3V);
 2255               		.loc 1 879 0
 2256 0686 86B1      		in r24,0x6
 2257 0688 8560      		ori r24,lo8(5)
 2258 068a 86B9      		out 0x6,r24
 880:setup.c       **** 	
 881:setup.c       **** 	// Set all pins as inputs
 882:setup.c       **** 	PORT_DATA7_0 = 0;
 2259               		.loc 1 882 0
 2260 068c 15BA      		out 0x15,__zero_reg__
 883:setup.c       **** 	DDR_DATA7_0 = 0;
 2261               		.loc 1 883 0
 2262 068e 14BA      		out 0x14,__zero_reg__
 884:setup.c       **** 	PORT_ADDR7_0 = 0;
 2263               		.loc 1 884 0
 2264 0690 18BA      		out 0x18,__zero_reg__
 885:setup.c       **** 	DDR_ADDR7_0 = 0;
 2265               		.loc 1 885 0
 2266 0692 17BA      		out 0x17,__zero_reg__
 886:setup.c       **** 	PORT_ADDR15_8 = 0;
 2267               		.loc 1 886 0
 2268 0694 1BBA      		out 0x1b,__zero_reg__
 887:setup.c       **** 	DDR_ADDR15_8 = 0;
 2269               		.loc 1 887 0
 2270 0696 1ABA      		out 0x1a,__zero_reg__
 888:setup.c       **** 	
 889:setup.c       **** 	// Light up 3.3V or 5V
 890:setup.c       **** 	if (cartMode == GB_MODE) {
 2271               		.loc 1 890 0
 2272 0698 8091 0000 		lds r24,cartMode
 2273 069c 8130      		cpi r24,lo8(1)
 2274 069e 01F4      		brne .L90
 891:setup.c       **** 		PORTD |= (1<<LED_5V);
 2275               		.loc 1 891 0
 2276 06a0 979A      		sbi 0x12,7
 892:setup.c       **** 		PORTE &= ~(1<<LED_3V);
 2277               		.loc 1 892 0
 2278 06a2 3898      		cbi 0x7,0
 2279 06a4 00C0      		rjmp .L91
 2280               	.L90:
 893:setup.c       **** 	}
 894:setup.c       **** 	else {
 895:setup.c       **** 		PORTE |= (1<<LED_3V);
 2281               		.loc 1 895 0
 2282 06a6 389A      		sbi 0x7,0
 896:setup.c       **** 		PORTD &= ~(1<<LED_5V);
 2283               		.loc 1 896 0
 2284 06a8 9798      		cbi 0x12,7
 2285               	.L91:
 897:setup.c       **** 	}
 898:setup.c       **** 	
 899:setup.c       **** 	// Light LED
 900:setup.c       **** 	PORTD |= (1<<ACTIVITY_LED);
 2286               		.loc 1 900 0
 2287 06aa 939A      		sbi 0x12,3
 2288               	.LVL166:
 2289               	.LBB139:
 2290               	.LBB140:
 187:c:\winavr-20100110\avr\include\util\delay.h **** 
 2291               		.loc 2 187 0
 2292 06ac 2FEF      		ldi r18,lo8(799999)
 2293 06ae 84E3      		ldi r24,hi8(799999)
 2294 06b0 9CE0      		ldi r25,hlo8(799999)
 2295 06b2 2150      	1:	subi r18,1
 2296 06b4 8040      		sbci r24,0
 2297 06b6 9040      		sbci r25,0
 2298 06b8 01F4      		brne 1b
 2299 06ba 00C0      		rjmp .
 2300 06bc 0000      		nop
 2301               	.LVL167:
 2302               	.LBE140:
 2303               	.LBE139:
 901:setup.c       **** 	_delay_ms(500);
 902:setup.c       **** 	PORTD &= ~(1<<ACTIVITY_LED);
 2304               		.loc 1 902 0
 2305 06be 9398      		cbi 0x12,3
 903:setup.c       **** 	
 904:setup.c       **** 	// Setup USART
 905:setup.c       **** 	UBRRL = 0; // 1Mbps Baud rate
 2306               		.loc 1 905 0
 2307 06c0 19B8      		out 0x9,__zero_reg__
 906:setup.c       **** 	sbi(UCSRA, U2X); // Double rate
 2308               		.loc 1 906 0
 2309 06c2 599A      		sbi 0xb,1
 907:setup.c       **** 	sbi(UCSRB, TXEN); // Transmitter enable
 2310               		.loc 1 907 0
 2311 06c4 539A      		sbi 0xa,3
 908:setup.c       **** 	sbi(UCSRB, RXEN); // Receiver enable
 2312               		.loc 1 908 0
 2313 06c6 549A      		sbi 0xa,4
 909:setup.c       **** 	
 910:setup.c       **** 	// Turn on interrupts
 911:setup.c       **** 	sei();
 2314               		.loc 1 911 0
 2315               	/* #APP */
 2316               	 ;  911 "setup.c" 1
 2317 06c8 7894      		sei
 2318               	 ;  0 "" 2
 2319               	/* #NOAPP */
 2320 06ca 0895      		ret
 2321               		.cfi_endproc
 2322               	.LFE44:
 2324               		.section	.text.startup,"ax",@progbits
 2325               	.global	main
 2327               	main:
 2328               	.LFB45:
 2329               		.file 3 "main.c"
   1:main.c        **** /*
   2:main.c        ****  GBxCart RW
   3:main.c        ****  PCB version: 1.3
   4:main.c        ****  Firmware version: R12
   5:main.c        ****  Author: Alex from insideGadgets (www.insidegadgets.com)
   6:main.c        ****  Created: 7/11/2016
   7:main.c        ****  Last Modified: 4/12/2018
   8:main.c        ****  
   9:main.c        ****  GBxCart RW allows you to dump your Gameboy/Gameboy Colour/Gameboy Advance games ROM, save the RAM,
  10:main.c        ****  write to certain Gameboy/Gameboy Advance flash carts.
  11:main.c        ****  
  12:main.c        ****  The ATmega8515L talks to the cartridge and interfaces with the CH340G serial to USB converter with
  13:main.c        ****  
  14:main.c        ****  
  15:main.c        ****  Set fuse bits: External 8MHz crystal, divide clock by 8 is off, boot loader is on (512 bytes), BOD
  16:main.c        ****  avrdude -p atmega8515 -c usbasp -U lfuse:w:0xaf:m -U hfuse:w:0xda:m
  17:main.c        ****  
  18:main.c        ****  Program the TinySafeBoot boot loader (modified ASM code, watchdog reset will act as a hardware res
  19:main.c        ****  avrdude -p atmega8515 -c usbasp -U flash:w:GBxCart_RW_v1.1_Rx\tsb\tsb_m8515_d0d1_resetwdt.hex
  20:main.c        ****  
  21:main.c        ****  Program GBxCart RW through TinySafeBoot
  22:main.c        ****  tsb com16:57600 fw GBxCart_RW_v1.1_Rx\main.hex
  23:main.c        ****  
  24:main.c        ****  Set TinySafeBoot delay time to 25 (T 25), gives ~0.5s in bootloader
  25:main.c        ****  tsb com16:9600 T 25
  26:main.c        ****  
  27:main.c        ****  
  28:main.c        ****  Programming shortcuts (if added in Programmers Notepad):
  29:main.c        ****  Alt + W - Program fuse
  30:main.c        ****  Alt + B - Burn bootloader
  31:main.c        ****  
  32:main.c        ****  Plug in USB then
  33:main.c        ****  Alt + T - Program
  34:main.c        ****  Alt + N - Program delay settings
  35:main.c        ****  
  36:main.c        ****  
  37:main.c        ****  */
  38:main.c        **** 
  39:main.c        **** // ATmega8515L Pin Map
  40:main.c        **** //
  41:main.c        **** // VCC (5)			GND (6)			XTAL (7 ,8)		Activity LED PD3 (9)				Switch sense PD2 (8)
  42:main.c        **** // SCK PB7 (3)		MOSI PB5 (1)	MISO PB6 (2)	RST (4)		RXD PD0 (5)			TXD PD1 (7)
  43:main.c        **** // 
  44:main.c        **** // Gameboy / Gameboy Colour
  45:main.c        **** // A0-A7 PB0-7 (40-44, 1-3) 		A8-A15 PA0-7 (37-30)			D0-D7 PC0-7 (18-25)		Audio PE1 (27)
  46:main.c        **** // 
  47:main.c        **** // Gameboy Advance
  48:main.c        **** // AD0-AD7 PB0-7 (40-44, 1-3) 	AD8-AD15 PA0-7 (37-30)		A16-23 / D0-D7 PC0-7 (19-26)
  49:main.c        **** // *WR PD6 (13)						*RD PD5 (14)					*MREQ/CS PD4 (15)			CS2/RST PE2 (16)
  50:main.c        **** 
  51:main.c        **** #define F_CPU 8000000 // 8 MHz
  52:main.c        **** #define PCB_VERSION 4
  53:main.c        **** #define FIRMWARE_VERSION 12
  54:main.c        **** 
  55:main.c        **** #include <avr/io.h>
  56:main.c        **** #include <avr/wdt.h>
  57:main.c        **** #include <avr/eeprom.h>
  58:main.c        **** #include <avr/interrupt.h>
  59:main.c        **** #include <avr/sleep.h>
  60:main.c        **** #include <util/delay.h>
  61:main.c        **** #include <stdlib.h>
  62:main.c        **** #include <string.h>
  63:main.c        **** #include "setup.c" // See defines, variables, constants, functions here
  64:main.c        **** 
  65:main.c        **** 
  66:main.c        **** int main(void) {
 2330               		.loc 3 66 0
 2331               		.cfi_startproc
 2332 0000 CF93      		push r28
 2333               	.LCFI42:
 2334               		.cfi_def_cfa_offset 3
 2335               		.cfi_offset 28, -2
 2336 0002 DF93      		push r29
 2337               	.LCFI43:
 2338               		.cfi_def_cfa_offset 4
 2339               		.cfi_offset 29, -3
 2340 0004 00D0      		rcall .
 2341               	.LCFI44:
 2342               		.cfi_def_cfa_offset 6
 2343 0006 CDB7      		in r28,__SP_L__
 2344 0008 DEB7      		in r29,__SP_H__
 2345               	.LCFI45:
 2346               		.cfi_def_cfa_register 28
 2347               	/* prologue: function */
 2348               	/* frame size = 2 */
 2349               	/* stack size = 4 */
 2350               	.L__stack_usage = 4
  67:main.c        **** 	setup();
 2351               		.loc 3 67 0
 2352 000a 00D0      		rcall setup
 2353               	.LVL168:
  68:main.c        **** 	
  69:main.c        **** 	uint32_t address = 0;
  70:main.c        **** 	uint8_t eepromSize = EEPROM_4KBIT;
  71:main.c        **** 	uint8_t resetCommonLines = 1;
 2354               		.loc 3 71 0
 2355 000c 21E0      		ldi r18,lo8(1)
 2356 000e 2A83      		std Y+2,r18
  70:main.c        **** 	uint8_t resetCommonLines = 1;
 2357               		.loc 3 70 0
 2358 0010 81E0      		ldi r24,lo8(1)
 2359 0012 8983      		std Y+1,r24
  69:main.c        **** 	uint8_t eepromSize = EEPROM_4KBIT;
 2360               		.loc 3 69 0
 2361 0014 C12C      		mov r12,__zero_reg__
 2362 0016 D12C      		mov r13,__zero_reg__
 2363 0018 7601      		movw r14,r12
 2364 001a B0E0      		ldi r27,lo8(eepromBuffer+8)
 2365 001c 2B2E      		mov r2,r27
 2366 001e B0E0      		ldi r27,hi8(eepromBuffer+8)
 2367 0020 3B2E      		mov r3,r27
 2368               	.LVL169:
 2369               	.L93:
  72:main.c        **** 	
  73:main.c        **** 	while(1) {
  74:main.c        **** 		if (resetCommonLines == 1) {
 2370               		.loc 3 74 0
 2371 0022 EA81      		ldd r30,Y+2
 2372 0024 E130      		cpi r30,lo8(1)
 2373 0026 01F4      		brne .L94
 2374               	.LVL170:
 2375               	.L227:
  75:main.c        **** 			rd_wr_csmreq_cs2_reset();
 2376               		.loc 3 75 0
 2377 0028 00D0      		rcall rd_wr_csmreq_cs2_reset
 2378               	.LVL171:
 2379               	.L94:
  76:main.c        **** 		}
  77:main.c        **** 		receivedChar = USART_Receive(); // Wait for 1 byte of data
 2380               		.loc 3 77 0
 2381 002a 00D0      		rcall USART_Receive
 2382               	.LVL172:
 2383 002c 8093 0000 		sts receivedChar,r24
  78:main.c        **** 		
  79:main.c        **** 		// Return the cart mode in use
  80:main.c        **** 		if (receivedChar == CART_MODE) {
 2384               		.loc 3 80 0
 2385 0030 8334      		cpi r24,lo8(67)
 2386 0032 01F4      		brne .L95
  81:main.c        **** 			USART_Transmit(cartMode);
 2387               		.loc 3 81 0
 2388 0034 8091 0000 		lds r24,cartMode
 2389 0038 00C0      		rjmp .L228
 2390               	.L95:
  82:main.c        **** 		}
  83:main.c        **** 		
  84:main.c        **** 		// Change to GB mode or GBA mode if requested
  85:main.c        **** 		else if (receivedChar == GB_CART_MODE) {
 2391               		.loc 3 85 0
 2392 003a 8734      		cpi r24,lo8(71)
 2393 003c 01F4      		brne .L97
  86:main.c        **** 			gb_mode();
 2394               		.loc 3 86 0
 2395 003e 00D0      		rcall gb_mode
 2396               	.LVL173:
 2397 0040 00C0      		rjmp .L93
 2398               	.L97:
  87:main.c        **** 		}
  88:main.c        **** 		else if (receivedChar == GBA_CART_MODE) {
 2399               		.loc 3 88 0
 2400 0042 8736      		cpi r24,lo8(103)
 2401 0044 01F4      		brne .+2
 2402 0046 00C0      		rjmp .L230
  89:main.c        **** 			gba_mode();
  90:main.c        **** 		}
  91:main.c        **** 		
  92:main.c        **** 		// Switch voltage if requested
  93:main.c        **** 		else if (receivedChar == VOLTAGE_3_3V) {
 2403               		.loc 3 93 0
 2404 0048 8333      		cpi r24,lo8(51)
 2405 004a 01F4      		brne .L99
  94:main.c        **** 			PORTD &= ~(1<<VOLTAGE_SELECT);
 2406               		.loc 3 94 0
 2407 004c 9298      		cbi 0x12,2
  95:main.c        **** 			cartMode = GBA_MODE;
 2408               		.loc 3 95 0
 2409 004e F2E0      		ldi r31,lo8(2)
 2410 0050 F093 0000 		sts cartMode,r31
  96:main.c        **** 			PORTE |= (1<<LED_3V);
 2411               		.loc 3 96 0
 2412 0054 389A      		sbi 0x7,0
  97:main.c        **** 			PORTD &= ~(1<<LED_5V);
 2413               		.loc 3 97 0
 2414 0056 9798      		cbi 0x12,7
 2415 0058 00C0      		rjmp .L93
 2416               	.L99:
  98:main.c        **** 		}
  99:main.c        **** 		else if (receivedChar == VOLTAGE_5V) {
 2417               		.loc 3 99 0
 2418 005a 8533      		cpi r24,lo8(53)
 2419 005c 01F4      		brne .L100
 100:main.c        **** 			PORTD |= (1<<VOLTAGE_SELECT);
 2420               		.loc 3 100 0
 2421 005e 929A      		sbi 0x12,2
 101:main.c        **** 			cartMode = GB_MODE;
 2422               		.loc 3 101 0
 2423 0060 81E0      		ldi r24,lo8(1)
 2424 0062 8093 0000 		sts cartMode,r24
 102:main.c        **** 			PORTD |= (1<<LED_5V);
 2425               		.loc 3 102 0
 2426 0066 979A      		sbi 0x12,7
 103:main.c        **** 			PORTE &= ~(1<<LED_3V);
 2427               		.loc 3 103 0
 2428 0068 3898      		cbi 0x7,0
 2429 006a 00C0      		rjmp .L93
 2430               	.L100:
 104:main.c        **** 		}
 105:main.c        **** 		
 106:main.c        **** 		
 107:main.c        **** 		// ****** Gameboy / Gameboy Colour ******
 108:main.c        **** 		
 109:main.c        **** 		// Set address
 110:main.c        **** 		else if (receivedChar == SET_START_ADDRESS) {
 2431               		.loc 3 110 0
 2432 006c 8134      		cpi r24,lo8(65)
 2433 006e 01F4      		brne .L101
 111:main.c        **** 			usart_read_chars(); // Read start address
 2434               		.loc 3 111 0
 2435 0070 00D0      		rcall usart_read_chars
 2436               	.LVL174:
 112:main.c        **** 			address = strtol(receivedBuffer, NULL, 16); // Convert address string in hex to dec
 2437               		.loc 3 112 0
 2438 0072 40E1      		ldi r20,lo8(16)
 2439 0074 50E0      		ldi r21,0
 2440 0076 60E0      		ldi r22,0
 2441 0078 70E0      		ldi r23,0
 2442 007a 80E0      		ldi r24,lo8(receivedBuffer)
 2443 007c 90E0      		ldi r25,hi8(receivedBuffer)
 2444 007e 00D0      		rcall strtol
 2445               	.LVL175:
 2446 0080 6B01      		movw r12,r22
 2447 0082 7C01      		movw r14,r24
 2448               	.LVL176:
 2449 0084 00C0      		rjmp .L93
 2450               	.L101:
 113:main.c        **** 		}
 114:main.c        **** 		
 115:main.c        **** 		// Read 64 bytes of ROM/RAM from address (and increment) until anything but 1 is received
 116:main.c        **** 		else if (receivedChar == READ_ROM_RAM) {
 2451               		.loc 3 116 0
 2452 0086 8235      		cpi r24,lo8(82)
 2453 0088 01F4      		brne .L102
 117:main.c        **** 			gb_mode();
 2454               		.loc 3 117 0
 2455 008a 00D0      		rcall gb_mode
 2456               	.LVL177:
 118:main.c        **** 			receivedChar = '1';
 2457               		.loc 3 118 0
 2458 008c 21E3      		ldi r18,lo8(49)
 2459 008e 2093 0000 		sts receivedChar,r18
 2460               	.LVL178:
 2461               	.L103:
 119:main.c        **** 			while (receivedChar == '1') {
 2462               		.loc 3 119 0
 2463 0092 8091 0000 		lds r24,receivedChar
 2464 0096 8133      		cpi r24,lo8(49)
 2465 0098 01F4      		brne .L93
 120:main.c        **** 				PORTD |= (1<<ACTIVITY_LED);
 2466               		.loc 3 120 0
 2467 009a 939A      		sbi 0x12,3
 2468               	.LVL179:
 2469 009c 00E0      		ldi r16,0
 2470 009e 10E0      		ldi r17,0
 2471               	.LVL180:
 2472               	.L104:
 2473               	.LBB141:
 121:main.c        **** 				for (uint8_t x = 0; x < 64; x++) {
 122:main.c        **** 					USART_Transmit(read_8bit_data(address));
 2474               		.loc 3 122 0 discriminator 3
 2475 00a0 C801      		movw r24,r16
 2476 00a2 8C0D      		add r24,r12
 2477 00a4 9D1D      		adc r25,r13
 2478 00a6 00D0      		rcall read_8bit_data
 2479               	.LVL181:
 2480 00a8 00D0      		rcall USART_Transmit
 2481               	.LVL182:
 2482 00aa 0F5F      		subi r16,-1
 2483 00ac 1F4F      		sbci r17,-1
 2484               	.LVL183:
 121:main.c        **** 				for (uint8_t x = 0; x < 64; x++) {
 2485               		.loc 3 121 0 discriminator 3
 2486 00ae 0034      		cpi r16,64
 2487 00b0 1105      		cpc r17,__zero_reg__
 2488 00b2 01F4      		brne .L104
 2489 00b4 80E4      		ldi r24,64
 2490 00b6 C80E      		add r12,r24
 2491 00b8 D11C      		adc r13,__zero_reg__
 2492 00ba E11C      		adc r14,__zero_reg__
 2493 00bc F11C      		adc r15,__zero_reg__
 2494               	.LBE141:
 123:main.c        **** 					address++;
 124:main.c        **** 				}
 125:main.c        **** 				
 126:main.c        **** 				PORTD &= ~(1<<ACTIVITY_LED);
 2495               		.loc 3 126 0
 2496 00be 9398      		cbi 0x12,3
 127:main.c        **** 				receivedChar = USART_Receive();
 2497               		.loc 3 127 0
 2498 00c0 00D0      		rcall USART_Receive
 2499               	.LVL184:
 2500 00c2 8093 0000 		sts receivedChar,r24
 2501 00c6 00C0      		rjmp .L103
 2502               	.LVL185:
 2503               	.L102:
 128:main.c        **** 			}
 129:main.c        **** 		}
 130:main.c        **** 		
 131:main.c        **** 		// Write 64 bytes to RAM on address (and increment)
 132:main.c        **** 		else if (receivedChar == WRITE_RAM) {
 2504               		.loc 3 132 0
 2505 00c8 8735      		cpi r24,lo8(87)
 2506 00ca 01F4      		brne .L106
 133:main.c        **** 			gb_mode();
 2507               		.loc 3 133 0
 2508 00cc 00D0      		rcall gb_mode
 2509               	.LVL186:
 134:main.c        **** 			
 135:main.c        **** 			// Read 64 bytes first as CH340G sends them all at once
 136:main.c        **** 			usart_read_bytes(64);
 2510               		.loc 3 136 0
 2511 00ce 80E4      		ldi r24,lo8(64)
 2512 00d0 90E0      		ldi r25,0
 2513 00d2 00D0      		rcall usart_read_bytes
 2514               	.LVL187:
 137:main.c        **** 			
 138:main.c        **** 			PORTD |= (1<<ACTIVITY_LED);
 2515               		.loc 3 138 0
 2516 00d4 939A      		sbi 0x12,3
 2517               	.LVL188:
 2518 00d6 A0E0      		ldi r26,lo8(receivedBuffer)
 2519 00d8 AA2E      		mov r10,r26
 2520 00da A0E0      		ldi r26,hi8(receivedBuffer)
 2521 00dc BA2E      		mov r11,r26
 2522 00de 00E0      		ldi r16,0
 2523 00e0 10E0      		ldi r17,0
 2524               	.LVL189:
 2525               	.L107:
 2526               	.LBB142:
 139:main.c        **** 			for (uint8_t x = 0; x < 64; x++) {
 140:main.c        **** 				write_8bit_data(address, receivedBuffer[x], MEMORY_WRITE);
 2527               		.loc 3 140 0 discriminator 3
 2528 00e2 F501      		movw r30,r10
 2529 00e4 6191      		ld r22,Z+
 2530 00e6 5F01      		movw r10,r30
 2531 00e8 C801      		movw r24,r16
 2532 00ea 8C0D      		add r24,r12
 2533 00ec 9D1D      		adc r25,r13
 2534 00ee 41E0      		ldi r20,lo8(1)
 2535 00f0 00D0      		rcall write_8bit_data
 2536               	.LVL190:
 2537 00f2 0F5F      		subi r16,-1
 2538 00f4 1F4F      		sbci r17,-1
 2539               	.LVL191:
 139:main.c        **** 			for (uint8_t x = 0; x < 64; x++) {
 2540               		.loc 3 139 0 discriminator 3
 2541 00f6 0034      		cpi r16,64
 2542 00f8 1105      		cpc r17,__zero_reg__
 2543 00fa 01F4      		brne .L107
 2544 00fc F0E4      		ldi r31,64
 2545 00fe CF0E      		add r12,r31
 2546 0100 D11C      		adc r13,__zero_reg__
 2547 0102 E11C      		adc r14,__zero_reg__
 2548 0104 F11C      		adc r15,__zero_reg__
 2549 0106 00C0      		rjmp .L248
 2550               	.LVL192:
 2551               	.L106:
 2552               	.LBE142:
 141:main.c        **** 				address++;
 142:main.c        **** 			}
 143:main.c        **** 			
 144:main.c        **** 			PORTD &= ~(1<<ACTIVITY_LED);
 145:main.c        **** 			USART_Transmit(SEND_ACK); // Send back acknowledgement
 146:main.c        **** 		}
 147:main.c        **** 		
 148:main.c        **** 		// Set bank address and write a byte
 149:main.c        **** 		else if (receivedChar == SET_BANK) {
 2553               		.loc 3 149 0
 2554 0108 8234      		cpi r24,lo8(66)
 2555 010a 01F4      		brne .L108
 2556               	.LBB143:
 150:main.c        **** 			gb_mode();
 2557               		.loc 3 150 0
 2558 010c 00D0      		rcall gb_mode
 2559               	.LVL193:
 151:main.c        **** 			
 152:main.c        **** 			usart_read_chars(); // Read start address
 2560               		.loc 3 152 0
 2561 010e 00D0      		rcall usart_read_chars
 2562               	.LVL194:
 153:main.c        **** 			uint16_t bankaddress = strtol(receivedBuffer, NULL, 16); // Convert address string in hex to dec
 2563               		.loc 3 153 0
 2564 0110 40E1      		ldi r20,lo8(16)
 2565 0112 50E0      		ldi r21,0
 2566 0114 60E0      		ldi r22,0
 2567 0116 70E0      		ldi r23,0
 2568 0118 80E0      		ldi r24,lo8(receivedBuffer)
 2569 011a 90E0      		ldi r25,hi8(receivedBuffer)
 2570 011c 00D0      		rcall strtol
 2571               	.LVL195:
 2572 011e 4B01      		movw r8,r22
 2573 0120 5C01      		movw r10,r24
 2574               	.LVL196:
 154:main.c        **** 			
 155:main.c        **** 			receivedChar = USART_Receive(); // Wait for bank number
 2575               		.loc 3 155 0
 2576 0122 00D0      		rcall USART_Receive
 2577               	.LVL197:
 2578 0124 8093 0000 		sts receivedChar,r24
 156:main.c        **** 			if (receivedChar == 'B') {
 2579               		.loc 3 156 0
 2580 0128 8234      		cpi r24,lo8(66)
 2581 012a 01F0      		breq .+2
 2582 012c 00C0      		rjmp .L93
 2583               	.LBB144:
 157:main.c        **** 				usart_read_chars(); // Read data
 2584               		.loc 3 157 0
 2585 012e 00D0      		rcall usart_read_chars
 2586               	.LVL198:
 158:main.c        **** 				uint8_t data = atoi(receivedBuffer); // Convert data string to dec
 2587               		.loc 3 158 0
 2588 0130 80E0      		ldi r24,lo8(receivedBuffer)
 2589 0132 90E0      		ldi r25,hi8(receivedBuffer)
 2590 0134 00D0      		rcall atoi
 2591               	.LVL199:
 159:main.c        **** 				lastBankAccessed = data; // Store the last bank accessed (used for flash carts that need it)
 2592               		.loc 3 159 0
 2593 0136 8093 0000 		sts lastBankAccessed,r24
 160:main.c        **** 				
 161:main.c        **** 				write_8bit_data(bankaddress, data, BANK_WRITE);
 2594               		.loc 3 161 0
 2595 013a 40E0      		ldi r20,0
 2596 013c 682F      		mov r22,r24
 2597 013e C401      		movw r24,r8
 2598               	.LVL200:
 2599 0140 00D0      		rcall write_8bit_data
 2600               	.LVL201:
 2601 0142 00C0      		rjmp .L93
 2602               	.LVL202:
 2603               	.L108:
 2604               	.LBE144:
 2605               	.LBE143:
 162:main.c        **** 			}
 163:main.c        **** 		}
 164:main.c        **** 		
 165:main.c        **** 		
 166:main.c        **** 		// ****** Gameboy Advance ******
 167:main.c        **** 		
 168:main.c        **** 		// ---------- ROM ----------
 169:main.c        **** 		// Read one 16bit byte from ROM using address (and increment) until anything but 1 is received
 170:main.c        **** 		else if (receivedChar == GBA_READ_ROM || receivedChar == GBA_READ_ROM_256BYTE) {
 2606               		.loc 3 170 0
 2607 0144 8237      		cpi r24,lo8(114)
 2608 0146 01F0      		breq .L109
 2609               		.loc 3 170 0 is_stmt 0 discriminator 1
 2610 0148 8A36      		cpi r24,lo8(106)
 2611 014a 01F4      		brne .L110
 2612               	.L109:
 2613               	.LBB145:
 171:main.c        **** 			gba_mode();
 2614               		.loc 3 171 0 is_stmt 1
 2615 014c 00D0      		rcall gba_mode
 2616               	.LVL203:
 172:main.c        **** 			
 173:main.c        **** 			uint8_t readEnd = 32;
 174:main.c        **** 			if (receivedChar == GBA_READ_ROM_256BYTE) {
 2617               		.loc 3 174 0
 2618 014e 8091 0000 		lds r24,receivedChar
 2619 0152 8A36      		cpi r24,lo8(106)
 2620 0154 01F4      		brne .L199
 175:main.c        **** 				readEnd = 128;
 2621               		.loc 3 175 0
 2622 0156 00E8      		ldi r16,lo8(-128)
 2623 0158 00C0      		rjmp .L111
 2624               	.L199:
 173:main.c        **** 			if (receivedChar == GBA_READ_ROM_256BYTE) {
 2625               		.loc 3 173 0
 2626 015a 00E2      		ldi r16,lo8(32)
 2627               	.L111:
 2628               	.LVL204:
 176:main.c        **** 			}
 177:main.c        **** 			
 178:main.c        **** 			receivedChar = '1';
 2629               		.loc 3 178 0
 2630 015c 21E3      		ldi r18,lo8(49)
 2631 015e 2093 0000 		sts receivedChar,r18
 2632 0162 8824      		clr r8
 2633 0164 8A94      		dec r8
 2634 0166 800E      		add r8,r16
 2635 0168 912C      		mov r9,__zero_reg__
 2636 016a A12C      		mov r10,__zero_reg__
 2637 016c B12C      		mov r11,__zero_reg__
 2638 016e 8FEF      		ldi r24,-1
 2639 0170 881A      		sub r8,r24
 2640 0172 980A      		sbc r9,r24
 2641 0174 A80A      		sbc r10,r24
 2642 0176 B80A      		sbc r11,r24
 2643               	.LVL205:
 2644               	.L112:
 179:main.c        **** 			while (receivedChar == '1') {
 2645               		.loc 3 179 0
 2646 0178 8091 0000 		lds r24,receivedChar
 2647 017c 8133      		cpi r24,lo8(49)
 2648 017e 01F0      		breq .+2
 2649 0180 00C0      		rjmp .L93
 180:main.c        **** 				PORTD |= (1<<ACTIVITY_LED);
 2650               		.loc 3 180 0
 2651 0182 939A      		sbi 0x12,3
 2652               	.LVL206:
 2653 0184 2601      		movw r4,r12
 2654 0186 3701      		movw r6,r14
 2655               	.LVL207:
 2656               	.L113:
 2657               	.LBB146:
 2658               	.LBB147:
 181:main.c        **** 				
 182:main.c        **** 				for (uint8_t x = 0; x < readEnd; x++) {
 183:main.c        **** 					uint16_t dataRead = gba_read_16bit_data(address);
 2659               		.loc 3 183 0 discriminator 3
 2660 0188 C301      		movw r24,r6
 2661 018a B201      		movw r22,r4
 2662 018c 00D0      		rcall gba_read_16bit_data
 2663               	.LVL208:
 2664 018e 192F      		mov r17,r25
 2665               	.LVL209:
 184:main.c        **** 					
 185:main.c        **** 					// Low byte & High byte
 186:main.c        **** 					USART_Transmit(dataRead & 0xFF);
 2666               		.loc 3 186 0 discriminator 3
 2667 0190 00D0      		rcall USART_Transmit
 2668               	.LVL210:
 187:main.c        **** 					USART_Transmit(dataRead >> 8);
 2669               		.loc 3 187 0 discriminator 3
 2670 0192 812F      		mov r24,r17
 2671 0194 00D0      		rcall USART_Transmit
 2672               	.LVL211:
 188:main.c        **** 					
 189:main.c        **** 					address++;
 2673               		.loc 3 189 0 discriminator 3
 2674 0196 9FEF      		ldi r25,-1
 2675 0198 491A      		sub r4,r25
 2676 019a 590A      		sbc r5,r25
 2677 019c 690A      		sbc r6,r25
 2678 019e 790A      		sbc r7,r25
 2679               	.LVL212:
 2680               	.LBE147:
 182:main.c        **** 					uint16_t dataRead = gba_read_16bit_data(address);
 2681               		.loc 3 182 0 discriminator 3
 2682 01a0 842D      		mov r24,r4
 2683 01a2 8C19      		sub r24,r12
 2684 01a4 8017      		cp r24,r16
 2685 01a6 00F0      		brlo .L113
 2686 01a8 C80C      		add r12,r8
 2687 01aa D91C      		adc r13,r9
 2688 01ac EA1C      		adc r14,r10
 2689 01ae FB1C      		adc r15,r11
 2690               	.LVL213:
 2691               	.LBE146:
 190:main.c        **** 				}
 191:main.c        **** 				
 192:main.c        **** 				PORTD &= ~(1<<ACTIVITY_LED);
 2692               		.loc 3 192 0
 2693 01b0 9398      		cbi 0x12,3
 193:main.c        **** 				receivedChar = USART_Receive();
 2694               		.loc 3 193 0
 2695 01b2 00D0      		rcall USART_Receive
 2696               	.LVL214:
 2697 01b4 8093 0000 		sts receivedChar,r24
 2698 01b8 00C0      		rjmp .L112
 2699               	.LVL215:
 2700               	.L110:
 2701               	.LBE145:
 194:main.c        **** 			}
 195:main.c        **** 		}
 196:main.c        **** 		
 197:main.c        **** 		// ---------- SRAM ----------
 198:main.c        **** 		// Read RAM from address (and increment) until anything but 1 is received
 199:main.c        **** 		else if (receivedChar == GBA_READ_SRAM) {
 2702               		.loc 3 199 0
 2703 01ba 8D36      		cpi r24,lo8(109)
 2704 01bc 01F4      		brne .L115
 200:main.c        **** 			gb_mode(); // Set GB mode as it uses 16 bit address with 8 bit data
 2705               		.loc 3 200 0
 2706 01be 00D0      		rcall gb_mode
 2707               	.LVL216:
 201:main.c        **** 			
 202:main.c        **** 			receivedChar = '1';
 2708               		.loc 3 202 0
 2709 01c0 E1E3      		ldi r30,lo8(49)
 2710 01c2 E093 0000 		sts receivedChar,r30
 2711               	.LVL217:
 2712               	.L116:
 203:main.c        **** 			while (receivedChar == '1') {
 2713               		.loc 3 203 0
 2714 01c6 8091 0000 		lds r24,receivedChar
 2715 01ca 8133      		cpi r24,lo8(49)
 2716 01cc 01F4      		brne .L230
 204:main.c        **** 				PORTD |= (1<<ACTIVITY_LED);
 2717               		.loc 3 204 0
 2718 01ce 939A      		sbi 0x12,3
 2719               	.LVL218:
 2720 01d0 00E0      		ldi r16,0
 2721 01d2 10E0      		ldi r17,0
 2722               	.LVL219:
 2723               	.L117:
 2724               	.LBB148:
 205:main.c        **** 				for (uint8_t x = 0; x < 64; x++) {
 206:main.c        **** 					USART_Transmit(gba_read_ram_8bit_data(address));
 2725               		.loc 3 206 0 discriminator 3
 2726 01d4 C801      		movw r24,r16
 2727 01d6 8C0D      		add r24,r12
 2728 01d8 9D1D      		adc r25,r13
 2729 01da 00D0      		rcall gba_read_ram_8bit_data
 2730               	.LVL220:
 2731 01dc 00D0      		rcall USART_Transmit
 2732               	.LVL221:
 2733 01de 0F5F      		subi r16,-1
 2734 01e0 1F4F      		sbci r17,-1
 2735               	.LVL222:
 205:main.c        **** 				for (uint8_t x = 0; x < 64; x++) {
 2736               		.loc 3 205 0 discriminator 3
 2737 01e2 0034      		cpi r16,64
 2738 01e4 1105      		cpc r17,__zero_reg__
 2739 01e6 01F4      		brne .L117
 2740 01e8 F0E4      		ldi r31,64
 2741 01ea CF0E      		add r12,r31
 2742 01ec D11C      		adc r13,__zero_reg__
 2743 01ee E11C      		adc r14,__zero_reg__
 2744 01f0 F11C      		adc r15,__zero_reg__
 2745               	.LBE148:
 207:main.c        **** 					address++;
 208:main.c        **** 				}
 209:main.c        **** 				
 210:main.c        **** 				PORTD &= ~(1<<ACTIVITY_LED);
 2746               		.loc 3 210 0
 2747 01f2 9398      		cbi 0x12,3
 211:main.c        **** 				receivedChar = USART_Receive();
 2748               		.loc 3 211 0
 2749 01f4 00D0      		rcall USART_Receive
 2750               	.LVL223:
 2751 01f6 8093 0000 		sts receivedChar,r24
 2752 01fa 00C0      		rjmp .L116
 2753               	.LVL224:
 2754               	.L115:
 212:main.c        **** 			}
 213:main.c        **** 			
 214:main.c        **** 			gba_mode(); // Set back
 215:main.c        **** 		}
 216:main.c        **** 		
 217:main.c        **** 		// Write to RAM on address (and increment) with 64 bytes of data
 218:main.c        **** 		else if (receivedChar == GBA_WRITE_SRAM) {
 2755               		.loc 3 218 0
 2756 01fc 8737      		cpi r24,lo8(119)
 2757 01fe 01F4      		brne .L119
 219:main.c        **** 			gb_mode();
 2758               		.loc 3 219 0
 2759 0200 00D0      		rcall gb_mode
 2760               	.LVL225:
 220:main.c        **** 			
 221:main.c        **** 			usart_read_bytes(64);
 2761               		.loc 3 221 0
 2762 0202 80E4      		ldi r24,lo8(64)
 2763 0204 90E0      		ldi r25,0
 2764 0206 00D0      		rcall usart_read_bytes
 2765               	.LVL226:
 222:main.c        **** 			
 223:main.c        **** 			PORTD |= (1<<ACTIVITY_LED);
 2766               		.loc 3 223 0
 2767 0208 939A      		sbi 0x12,3
 2768               	.LVL227:
 2769 020a F0E0      		ldi r31,lo8(receivedBuffer)
 2770 020c AF2E      		mov r10,r31
 2771 020e F0E0      		ldi r31,hi8(receivedBuffer)
 2772 0210 BF2E      		mov r11,r31
 2773 0212 00E0      		ldi r16,0
 2774 0214 10E0      		ldi r17,0
 2775               	.LVL228:
 2776               	.L120:
 2777               	.LBB149:
 224:main.c        **** 			for (uint8_t x = 0; x < 64; x++) {
 225:main.c        **** 				gba_write_ram_8bit_data(address, receivedBuffer[x]);
 2778               		.loc 3 225 0 discriminator 3
 2779 0216 F501      		movw r30,r10
 2780 0218 6191      		ld r22,Z+
 2781 021a 5F01      		movw r10,r30
 2782 021c C801      		movw r24,r16
 2783 021e 8C0D      		add r24,r12
 2784 0220 9D1D      		adc r25,r13
 2785 0222 00D0      		rcall gba_write_ram_8bit_data
 2786               	.LVL229:
 2787 0224 0F5F      		subi r16,-1
 2788 0226 1F4F      		sbci r17,-1
 2789               	.LVL230:
 224:main.c        **** 			for (uint8_t x = 0; x < 64; x++) {
 2790               		.loc 3 224 0 discriminator 3
 2791 0228 0034      		cpi r16,64
 2792 022a 1105      		cpc r17,__zero_reg__
 2793 022c 01F4      		brne .L120
 2794               	.LVL231:
 2795               	.L233:
 2796 022e F0E4      		ldi r31,64
 2797 0230 CF0E      		add r12,r31
 2798 0232 D11C      		adc r13,__zero_reg__
 2799 0234 E11C      		adc r14,__zero_reg__
 2800 0236 F11C      		adc r15,__zero_reg__
 2801               	.L232:
 2802               	.LBE149:
 226:main.c        **** 				address++;
 227:main.c        **** 			}
 228:main.c        **** 			USART_Transmit(SEND_ACK); // Send back acknowledgement
 2803               		.loc 3 228 0
 2804 0238 81E3      		ldi r24,lo8(49)
 2805 023a 00D0      		rcall USART_Transmit
 2806               	.LVL232:
 229:main.c        **** 			
 230:main.c        **** 			PORTD &= ~(1<<ACTIVITY_LED);
 2807               		.loc 3 230 0
 2808 023c 9398      		cbi 0x12,3
 2809               	.L230:
 231:main.c        **** 			gba_mode(); // Set back
 2810               		.loc 3 231 0
 2811 023e 00D0      		rcall gba_mode
 2812               	.LVL233:
 2813 0240 00C0      		rjmp .L93
 2814               	.LVL234:
 2815               	.L119:
 232:main.c        **** 		}
 233:main.c        **** 		
 234:main.c        **** 		// Write 1 byte to SRAM address
 235:main.c        **** 		else if (receivedChar == GBA_WRITE_ONE_BYTE_SRAM) {
 2816               		.loc 3 235 0
 2817 0242 8F36      		cpi r24,lo8(111)
 2818 0244 01F4      		brne .L121
 2819               	.LBB150:
 236:main.c        **** 			gb_mode();
 2820               		.loc 3 236 0
 2821 0246 00D0      		rcall gb_mode
 2822               	.LVL235:
 237:main.c        **** 			
 238:main.c        **** 			uint8_t data = USART_Receive();
 2823               		.loc 3 238 0
 2824 0248 00D0      		rcall USART_Receive
 2825               	.LVL236:
 239:main.c        **** 			gba_write_ram_8bit_data(address, data);
 2826               		.loc 3 239 0
 2827 024a 682F      		mov r22,r24
 2828 024c C601      		movw r24,r12
 2829               	.LVL237:
 2830 024e 00D0      		rcall gba_write_ram_8bit_data
 2831               	.LVL238:
 2832 0250 00C0      		rjmp .L235
 2833               	.L121:
 2834               	.LBE150:
 240:main.c        **** 			USART_Transmit(SEND_ACK); // Send back acknowledgement
 241:main.c        **** 			
 242:main.c        **** 			gba_mode(); // Set back
 243:main.c        **** 		}
 244:main.c        **** 		
 245:main.c        **** 		
 246:main.c        **** 		// ---------- FLASH ----------
 247:main.c        **** 		// Read the Flash Manufacturer and Device ID
 248:main.c        **** 		else if (receivedChar == GBA_FLASH_READ_ID) {
 2835               		.loc 3 248 0
 2836 0252 8936      		cpi r24,lo8(105)
 2837 0254 01F4      		brne .L122
 249:main.c        **** 			gb_mode();
 2838               		.loc 3 249 0
 2839 0256 00D0      		rcall gb_mode
 2840               	.LVL239:
 250:main.c        **** 			
 251:main.c        **** 			flash_read_chip_id();
 2841               		.loc 3 251 0
 2842 0258 00D0      		rcall flash_read_chip_id
 2843               	.LVL240:
 252:main.c        **** 			USART_Transmit(flashChipIdBuffer[0]);
 2844               		.loc 3 252 0
 2845 025a 8091 0000 		lds r24,flashChipIdBuffer
 2846 025e 00D0      		rcall USART_Transmit
 2847               	.LVL241:
 253:main.c        **** 			USART_Transmit(flashChipIdBuffer[1]);
 2848               		.loc 3 253 0
 2849 0260 8091 0000 		lds r24,flashChipIdBuffer+1
 2850               	.L234:
 2851 0264 00D0      		rcall USART_Transmit
 2852               	.LVL242:
 2853 0266 00C0      		rjmp .L230
 2854               	.L122:
 254:main.c        **** 			
 255:main.c        **** 			gba_mode(); // Set back
 256:main.c        **** 		}
 257:main.c        **** 		
 258:main.c        **** 		// Change bank
 259:main.c        **** 		else if (receivedChar == GBA_FLASH_SET_BANK) {
 2855               		.loc 3 259 0
 2856 0268 8B36      		cpi r24,lo8(107)
 2857 026a 01F4      		brne .L123
 2858               	.LBB151:
 260:main.c        **** 			usart_read_chars(); // Read data
 2859               		.loc 3 260 0
 2860 026c 00D0      		rcall usart_read_chars
 2861               	.LVL243:
 261:main.c        **** 			uint8_t bank = atoi(receivedBuffer); // Convert data string to dec
 2862               		.loc 3 261 0
 2863 026e 80E0      		ldi r24,lo8(receivedBuffer)
 2864 0270 90E0      		ldi r25,hi8(receivedBuffer)
 2865 0272 00D0      		rcall atoi
 2866               	.LVL244:
 2867 0274 182F      		mov r17,r24
 2868               	.LVL245:
 262:main.c        **** 			
 263:main.c        **** 			gb_mode();
 2869               		.loc 3 263 0
 2870 0276 00D0      		rcall gb_mode
 2871               	.LVL246:
 264:main.c        **** 			flash_switch_bank(bank);
 2872               		.loc 3 264 0
 2873 0278 812F      		mov r24,r17
 2874 027a 00D0      		rcall flash_switch_bank
 2875               	.LVL247:
 2876 027c 00C0      		rjmp .L230
 2877               	.LVL248:
 2878               	.L123:
 2879               	.LBE151:
 265:main.c        **** 			
 266:main.c        **** 			gba_mode(); // Set back
 267:main.c        **** 		}
 268:main.c        **** 		
 269:main.c        **** 		// Erase 4K sector on Flash (sector 0 to 15 for 512Kbit)
 270:main.c        **** 		else if (receivedChar == GBA_FLASH_4K_SECTOR_ERASE) {
 2880               		.loc 3 270 0
 2881 027e 8337      		cpi r24,lo8(115)
 2882 0280 01F4      		brne .L124
 2883               	.LBB152:
 271:main.c        **** 			gb_mode();
 2884               		.loc 3 271 0
 2885 0282 00D0      		rcall gb_mode
 2886               	.LVL249:
 272:main.c        **** 			
 273:main.c        **** 			usart_read_chars(); // Read sector
 2887               		.loc 3 273 0
 2888 0284 00D0      		rcall usart_read_chars
 2889               	.LVL250:
 274:main.c        **** 			uint8_t sectorAddress = strtol(receivedBuffer, NULL, 16); // Convert address string in hex to de
 2890               		.loc 3 274 0
 2891 0286 40E1      		ldi r20,lo8(16)
 2892 0288 50E0      		ldi r21,0
 2893 028a 60E0      		ldi r22,0
 2894 028c 70E0      		ldi r23,0
 2895 028e 80E0      		ldi r24,lo8(receivedBuffer)
 2896 0290 90E0      		ldi r25,hi8(receivedBuffer)
 2897 0292 00D0      		rcall strtol
 2898               	.LVL251:
 2899 0294 862F      		mov r24,r22
 2900               	.LVL252:
 275:main.c        **** 			
 276:main.c        **** 			flash_erase_4k_sector(sectorAddress);
 2901               		.loc 3 276 0
 2902 0296 00D0      		rcall flash_erase_4k_sector
 2903               	.LVL253:
 2904               	.L235:
 277:main.c        **** 			USART_Transmit(SEND_ACK); // Send back acknowledgement
 2905               		.loc 3 277 0
 2906 0298 81E3      		ldi r24,lo8(49)
 2907 029a 00C0      		rjmp .L234
 2908               	.L124:
 2909               	.LBE152:
 278:main.c        **** 			
 279:main.c        **** 			gba_mode(); // Set back
 280:main.c        **** 		}
 281:main.c        **** 		
 282:main.c        **** 		// Write 64 bytes to Flash address one byte write at a time (and increment)
 283:main.c        **** 		else if (receivedChar == GBA_FLASH_WRITE_BYTE) {
 2910               		.loc 3 283 0
 2911 029c 8236      		cpi r24,lo8(98)
 2912 029e 01F4      		brne .L125
 284:main.c        **** 			gb_mode();
 2913               		.loc 3 284 0
 2914 02a0 00D0      		rcall gb_mode
 2915               	.LVL254:
 285:main.c        **** 			
 286:main.c        **** 			usart_read_bytes(64);
 2916               		.loc 3 286 0
 2917 02a2 80E4      		ldi r24,lo8(64)
 2918 02a4 90E0      		ldi r25,0
 2919 02a6 00D0      		rcall usart_read_bytes
 2920               	.LVL255:
 287:main.c        **** 			
 288:main.c        **** 			PORTD |= (1<<ACTIVITY_LED);
 2921               		.loc 3 288 0
 2922 02a8 939A      		sbi 0x12,3
 2923               	.LVL256:
 2924 02aa E0E0      		ldi r30,lo8(receivedBuffer)
 2925 02ac AE2E      		mov r10,r30
 2926 02ae E0E0      		ldi r30,hi8(receivedBuffer)
 2927 02b0 BE2E      		mov r11,r30
 2928 02b2 00E0      		ldi r16,0
 2929 02b4 10E0      		ldi r17,0
 2930               	.LVL257:
 2931               	.L126:
 2932               	.LBB153:
 289:main.c        **** 			for (uint8_t x = 0; x < 64; x++) {
 290:main.c        **** 				flash_write_byte(address, receivedBuffer[x]);
 2933               		.loc 3 290 0 discriminator 3
 2934 02b6 F501      		movw r30,r10
 2935 02b8 6191      		ld r22,Z+
 2936 02ba 5F01      		movw r10,r30
 2937 02bc C801      		movw r24,r16
 2938 02be 8C0D      		add r24,r12
 2939 02c0 9D1D      		adc r25,r13
 2940 02c2 00D0      		rcall flash_write_byte
 2941               	.LVL258:
 2942 02c4 0F5F      		subi r16,-1
 2943 02c6 1F4F      		sbci r17,-1
 2944               	.LVL259:
 289:main.c        **** 			for (uint8_t x = 0; x < 64; x++) {
 2945               		.loc 3 289 0 discriminator 3
 2946 02c8 0034      		cpi r16,64
 2947 02ca 1105      		cpc r17,__zero_reg__
 2948 02cc 01F4      		brne .L126
 2949 02ce 00C0      		rjmp .L233
 2950               	.LVL260:
 2951               	.L125:
 2952               	.LBE153:
 291:main.c        **** 				address++;
 292:main.c        **** 			}
 293:main.c        **** 			USART_Transmit(SEND_ACK); // Send back acknowledgement
 294:main.c        **** 			
 295:main.c        **** 			PORTD &= ~(1<<ACTIVITY_LED);
 296:main.c        **** 			gba_mode(); // Set back
 297:main.c        **** 		}
 298:main.c        **** 		
 299:main.c        **** 		// Write 128 bytes to flash sector for Atmel flash (and increment)
 300:main.c        **** 		else if (receivedChar == GBA_FLASH_WRITE_ATMEL) {
 2953               		.loc 3 300 0
 2954 02d0 8136      		cpi r24,lo8(97)
 2955 02d2 01F4      		brne .L127
 301:main.c        **** 			gb_mode();
 2956               		.loc 3 301 0
 2957 02d4 00D0      		rcall gb_mode
 2958               	.LVL261:
 302:main.c        **** 			
 303:main.c        **** 			usart_read_bytes(128);
 2959               		.loc 3 303 0
 2960 02d6 80E8      		ldi r24,lo8(-128)
 2961 02d8 90E0      		ldi r25,0
 2962 02da 00D0      		rcall usart_read_bytes
 2963               	.LVL262:
 304:main.c        **** 			
 305:main.c        **** 			PORTD |= (1<<ACTIVITY_LED);
 2964               		.loc 3 305 0
 2965 02dc 939A      		sbi 0x12,3
 306:main.c        **** 			flash_write_sector(address); // Address used as sector number
 2966               		.loc 3 306 0
 2967 02de C601      		movw r24,r12
 2968 02e0 00D0      		rcall flash_write_sector
 2969               	.LVL263:
 307:main.c        **** 			address++;
 2970               		.loc 3 307 0
 2971 02e2 2FEF      		ldi r18,-1
 2972 02e4 C21A      		sub r12,r18
 2973 02e6 D20A      		sbc r13,r18
 2974 02e8 E20A      		sbc r14,r18
 2975 02ea F20A      		sbc r15,r18
 2976               	.LVL264:
 2977 02ec 00C0      		rjmp .L232
 2978               	.L127:
 308:main.c        **** 			USART_Transmit(SEND_ACK); // Send back acknowledgement
 309:main.c        **** 			
 310:main.c        **** 			PORTD &= ~(1<<ACTIVITY_LED);
 311:main.c        **** 			gba_mode(); // Set back
 312:main.c        **** 		}
 313:main.c        **** 		
 314:main.c        **** 		
 315:main.c        **** 		// ---------- EEPROM ----------
 316:main.c        **** 		// Set EEPROM size
 317:main.c        **** 		else if (receivedChar == GBA_SET_EEPROM_SIZE) {
 2979               		.loc 3 317 0
 2980 02ee 8335      		cpi r24,lo8(83)
 2981 02f0 01F4      		brne .L128
 318:main.c        **** 			usart_read_chars(); // Read size
 2982               		.loc 3 318 0
 2983 02f2 00D0      		rcall usart_read_chars
 2984               	.LVL265:
 319:main.c        **** 			eepromSize = strtol(receivedBuffer, NULL, 16); // Convert size to dec
 2985               		.loc 3 319 0
 2986 02f4 40E1      		ldi r20,lo8(16)
 2987 02f6 50E0      		ldi r21,0
 2988 02f8 60E0      		ldi r22,0
 2989 02fa 70E0      		ldi r23,0
 2990 02fc 80E0      		ldi r24,lo8(receivedBuffer)
 2991 02fe 90E0      		ldi r25,hi8(receivedBuffer)
 2992 0300 00D0      		rcall strtol
 2993               	.LVL266:
 2994 0302 6983      		std Y+1,r22
 2995               	.LVL267:
 2996 0304 00C0      		rjmp .L93
 2997               	.LVL268:
 2998               	.L128:
 320:main.c        **** 		}
 321:main.c        **** 		
 322:main.c        **** 		// Read the EEPROM on address (and increment) until anything but 1 is received
 323:main.c        **** 		else if (receivedChar == GBA_READ_EEPROM) {
 2999               		.loc 3 323 0
 3000 0306 8536      		cpi r24,lo8(101)
 3001 0308 01F4      		brne .L129
 324:main.c        **** 			gba_eeprom_mode();
 3002               		.loc 3 324 0
 3003 030a 00D0      		rcall gba_eeprom_mode
 3004               	.LVL269:
 325:main.c        **** 			
 326:main.c        **** 			receivedChar = '1';
 3005               		.loc 3 326 0
 3006 030c 81E3      		ldi r24,lo8(49)
 3007               	.L236:
 327:main.c        **** 			while (receivedChar == '1') {
 328:main.c        **** 				PORTD |= (1<<ACTIVITY_LED);
 329:main.c        **** 				gba_eeprom_read(address, eepromSize);
 330:main.c        **** 				
 331:main.c        **** 				// Send back the 8 bytes of data
 332:main.c        **** 				for (uint8_t c = 0; c < 8; c++) {
 333:main.c        **** 					USART_Transmit(eepromBuffer[c]);
 334:main.c        **** 				}
 335:main.c        **** 				address++; // Increment to next 8 bytes
 336:main.c        **** 				
 337:main.c        **** 				PORTD &= ~(1<<ACTIVITY_LED);
 338:main.c        **** 				receivedChar = USART_Receive();
 3008               		.loc 3 338 0
 3009 030e 8093 0000 		sts receivedChar,r24
 327:main.c        **** 			while (receivedChar == '1') {
 3010               		.loc 3 327 0
 3011 0312 8091 0000 		lds r24,receivedChar
 3012 0316 8133      		cpi r24,lo8(49)
 3013 0318 01F0      		breq .+2
 3014 031a 00C0      		rjmp .L230
 328:main.c        **** 				gba_eeprom_read(address, eepromSize);
 3015               		.loc 3 328 0
 3016 031c 939A      		sbi 0x12,3
 329:main.c        **** 				
 3017               		.loc 3 329 0
 3018 031e 6981      		ldd r22,Y+1
 3019 0320 C601      		movw r24,r12
 3020 0322 00D0      		rcall gba_eeprom_read
 3021               	.LVL270:
 3022 0324 00E0      		ldi r16,lo8(eepromBuffer)
 3023 0326 10E0      		ldi r17,hi8(eepromBuffer)
 3024               	.LVL271:
 3025               	.L131:
 3026               	.LBB154:
 333:main.c        **** 				}
 3027               		.loc 3 333 0 discriminator 3
 3028 0328 F801      		movw r30,r16
 3029 032a 8191      		ld r24,Z+
 3030 032c 8F01      		movw r16,r30
 3031               	.LVL272:
 3032 032e 00D0      		rcall USART_Transmit
 3033               	.LVL273:
 332:main.c        **** 					USART_Transmit(eepromBuffer[c]);
 3034               		.loc 3 332 0 discriminator 3
 3035 0330 2016      		cp r2,r16
 3036 0332 3106      		cpc r3,r17
 3037 0334 01F4      		brne .L131
 3038               	.LBE154:
 335:main.c        **** 				
 3039               		.loc 3 335 0
 3040 0336 FFEF      		ldi r31,-1
 3041 0338 CF1A      		sub r12,r31
 3042 033a DF0A      		sbc r13,r31
 3043 033c EF0A      		sbc r14,r31
 3044 033e FF0A      		sbc r15,r31
 3045               	.LVL274:
 337:main.c        **** 				receivedChar = USART_Receive();
 3046               		.loc 3 337 0
 3047 0340 9398      		cbi 0x12,3
 3048               		.loc 3 338 0
 3049 0342 00D0      		rcall USART_Receive
 3050               	.LVL275:
 3051 0344 00C0      		rjmp .L236
 3052               	.LVL276:
 3053               	.L129:
 339:main.c        **** 			}
 340:main.c        **** 			
 341:main.c        **** 			gba_mode(); // Set back
 342:main.c        **** 		}
 343:main.c        **** 		
 344:main.c        **** 		// Write 8 bytes to the EEPROM address (and increment)
 345:main.c        **** 		else if (receivedChar == GBA_WRITE_EEPROM) {
 3054               		.loc 3 345 0
 3055 0346 8037      		cpi r24,lo8(112)
 3056 0348 01F4      		brne .L133
 346:main.c        **** 			gba_eeprom_mode();
 3057               		.loc 3 346 0
 3058 034a 00D0      		rcall gba_eeprom_mode
 3059               	.LVL277:
 3060 034c 00E0      		ldi r16,lo8(eepromBuffer)
 3061 034e 10E0      		ldi r17,hi8(eepromBuffer)
 3062               	.LVL278:
 3063               	.L134:
 3064               	.LBB155:
 347:main.c        **** 			
 348:main.c        **** 			// Read 8 bytes from USART and place in buffer
 349:main.c        **** 			for (uint8_t x = 0; x < 8; x++) {
 350:main.c        **** 				eepromBuffer[x] = USART_Receive();
 3065               		.loc 3 350 0 discriminator 3
 3066 0350 00D0      		rcall USART_Receive
 3067               	.LVL279:
 3068 0352 F801      		movw r30,r16
 3069 0354 8193      		st Z+,r24
 3070 0356 8F01      		movw r16,r30
 3071               	.LVL280:
 349:main.c        **** 				eepromBuffer[x] = USART_Receive();
 3072               		.loc 3 349 0 discriminator 3
 3073 0358 2E16      		cp r2,r30
 3074 035a 3F06      		cpc r3,r31
 3075 035c 01F4      		brne .L134
 3076               	.LBE155:
 351:main.c        **** 			}
 352:main.c        **** 			PORTD |= (1<<ACTIVITY_LED);
 3077               		.loc 3 352 0
 3078 035e 939A      		sbi 0x12,3
 353:main.c        **** 			
 354:main.c        **** 			gba_eeprom_write(address, eepromSize);
 3079               		.loc 3 354 0
 3080 0360 6981      		ldd r22,Y+1
 3081 0362 C601      		movw r24,r12
 3082 0364 00D0      		rcall gba_eeprom_write
 3083               	.LVL281:
 355:main.c        **** 			address++;
 3084               		.loc 3 355 0
 3085 0366 FFEF      		ldi r31,-1
 3086 0368 CF1A      		sub r12,r31
 3087 036a DF0A      		sbc r13,r31
 3088 036c EF0A      		sbc r14,r31
 3089 036e FF0A      		sbc r15,r31
 3090               	.LVL282:
 3091               	.LBB156:
 3092               	.LBB157:
 187:c:\winavr-20100110\avr\include\util\delay.h **** 
 3093               		.loc 2 187 0
 3094 0370 8FE7      		ldi r24,lo8(15999)
 3095 0372 9EE3      		ldi r25,hi8(15999)
 3096 0374 0197      	1:	sbiw r24,1
 3097 0376 01F4      		brne 1b
 3098 0378 00C0      		rjmp .
 3099 037a 0000      		nop
 3100               	.LVL283:
 3101 037c 00C0      		rjmp .L232
 3102               	.LVL284:
 3103               	.L133:
 3104               	.LBE157:
 3105               	.LBE156:
 356:main.c        **** 			
 357:main.c        **** 			_delay_ms(8); // Wait for EEPROM to write data (8ms)
 358:main.c        **** 			USART_Transmit(SEND_ACK); // Send back acknowledgement
 359:main.c        **** 			
 360:main.c        **** 			PORTD &= ~(1<<ACTIVITY_LED);
 361:main.c        **** 			gba_mode(); // Set back
 362:main.c        **** 		}
 363:main.c        **** 		
 364:main.c        **** 		
 365:main.c        **** 		// ---------- GB FLASH CARTS ----------
 366:main.c        **** 		// Select which pin need to pulse as WE (Audio or WR)
 367:main.c        **** 		else if (receivedChar == GB_FLASH_WE_PIN) {
 3106               		.loc 3 367 0
 3107 037e 8035      		cpi r24,lo8(80)
 3108 0380 01F4      		brne .L135
 368:main.c        **** 			flashWriteWePin = USART_Receive();
 3109               		.loc 3 368 0
 3110 0382 00D0      		rcall USART_Receive
 3111               	.LVL285:
 3112 0384 8093 0000 		sts flashWriteWePin,r24
 369:main.c        **** 			
 370:main.c        **** 			if (flashWriteWePin == WE_AS_AUDIO_PIN) {
 3113               		.loc 3 370 0
 3114 0388 8134      		cpi r24,lo8(65)
 3115 038a 01F0      		breq .+2
 3116 038c 00C0      		rjmp .L93
 371:main.c        **** 				DDRE |= (1<<AUDIO_PIN);
 3117               		.loc 3 371 0
 3118 038e 319A      		sbi 0x6,1
 372:main.c        **** 				audioPin_high;
 3119               		.loc 3 372 0
 3120 0390 399A      		sbi 0x7,1
 3121 0392 00C0      		rjmp .L93
 3122               	.L135:
 373:main.c        **** 			}
 374:main.c        **** 		}
 375:main.c        **** 		
 376:main.c        **** 		// Some flash carts may require changing the bank back to 1 in order to accept flash chip command
 377:main.c        **** 		else if (receivedChar == GB_FLASH_BANK_1_COMMAND_WRITES) {
 3123               		.loc 3 377 0
 3124 0394 8E34      		cpi r24,lo8(78)
 3125 0396 01F4      		brne .L136
 378:main.c        **** 			flashBank1CommandWrites = 1;
 3126               		.loc 3 378 0
 3127 0398 81E0      		ldi r24,lo8(1)
 3128 039a 8093 0000 		sts flashBank1CommandWrites,r24
 3129 039e 00C0      		rjmp .L93
 3130               	.L136:
 379:main.c        **** 		}
 380:main.c        **** 		
 381:main.c        **** 		// Load the program method to use
 382:main.c        **** 		else if (receivedChar == GB_FLASH_PROGRAM_METHOD) {
 3131               		.loc 3 382 0
 3132 03a0 8534      		cpi r24,lo8(69)
 3133 03a2 01F4      		brne .L137
 3134 03a4 00E0      		ldi r16,lo8(flashWriteCycle)
 3135 03a6 10E0      		ldi r17,hi8(flashWriteCycle)
 3136               	.L138:
 3137               	.LBB158:
 383:main.c        **** 			for (uint8_t x = 0; x < 3; x++) {
 384:main.c        **** 				usart_read_chars(); // Address
 3138               		.loc 3 384 0 discriminator 3
 3139 03a8 00D0      		rcall usart_read_chars
 3140               	.LVL286:
 385:main.c        **** 				flashWriteCycle[x][0] = strtol(receivedBuffer, NULL, 16);
 3141               		.loc 3 385 0 discriminator 3
 3142 03aa 40E1      		ldi r20,lo8(16)
 3143 03ac 50E0      		ldi r21,0
 3144 03ae 60E0      		ldi r22,0
 3145 03b0 70E0      		ldi r23,0
 3146 03b2 80E0      		ldi r24,lo8(receivedBuffer)
 3147 03b4 90E0      		ldi r25,hi8(receivedBuffer)
 3148 03b6 00D0      		rcall strtol
 3149               	.LVL287:
 3150 03b8 F801      		movw r30,r16
 3151 03ba 7183      		std Z+1,r23
 3152 03bc 6083      		st Z,r22
 386:main.c        **** 				USART_Transmit(SEND_ACK);
 3153               		.loc 3 386 0 discriminator 3
 3154 03be 81E3      		ldi r24,lo8(49)
 3155 03c0 00D0      		rcall USART_Transmit
 3156               	.LVL288:
 387:main.c        **** 				
 388:main.c        **** 				usart_read_chars(); // Data
 3157               		.loc 3 388 0 discriminator 3
 3158 03c2 00D0      		rcall usart_read_chars
 3159               	.LVL289:
 389:main.c        **** 				flashWriteCycle[x][1] = strtol(receivedBuffer, NULL, 16);
 3160               		.loc 3 389 0 discriminator 3
 3161 03c4 40E1      		ldi r20,lo8(16)
 3162 03c6 50E0      		ldi r21,0
 3163 03c8 60E0      		ldi r22,0
 3164 03ca 70E0      		ldi r23,0
 3165 03cc 80E0      		ldi r24,lo8(receivedBuffer)
 3166 03ce 90E0      		ldi r25,hi8(receivedBuffer)
 3167 03d0 00D0      		rcall strtol
 3168               	.LVL290:
 3169 03d2 F801      		movw r30,r16
 3170 03d4 7383      		std Z+3,r23
 3171 03d6 6283      		std Z+2,r22
 390:main.c        **** 				USART_Transmit(SEND_ACK);
 3172               		.loc 3 390 0 discriminator 3
 3173 03d8 81E3      		ldi r24,lo8(49)
 3174 03da 00D0      		rcall USART_Transmit
 3175               	.LVL291:
 3176 03dc 0C5F      		subi r16,-4
 3177 03de 1F4F      		sbci r17,-1
 383:main.c        **** 				usart_read_chars(); // Address
 3178               		.loc 3 383 0 discriminator 3
 3179 03e0 F0E0      		ldi r31,hi8(flashWriteCycle+12)
 3180 03e2 0030      		cpi r16,lo8(flashWriteCycle+12)
 3181 03e4 1F07      		cpc r17,r31
 3182 03e6 01F4      		brne .L138
 3183 03e8 00C0      		rjmp .L93
 3184               	.L137:
 3185               	.LBE158:
 391:main.c        **** 			}
 392:main.c        **** 		}
 393:main.c        **** 		
 394:main.c        **** 		// Write address and one byte to Flash, pulse a pin
 395:main.c        **** 		else if (receivedChar == GB_FLASH_WRITE_BYTE) {
 3186               		.loc 3 395 0
 3187 03ea 8634      		cpi r24,lo8(70)
 3188 03ec 01F4      		brne .L139
 3189               	.LBB159:
 396:main.c        **** 			usart_read_chars(); // Read address
 3190               		.loc 3 396 0
 3191 03ee 00D0      		rcall usart_read_chars
 3192               	.LVL292:
 397:main.c        **** 			uint16_t flashAddress = strtol(receivedBuffer, NULL, 16);
 3193               		.loc 3 397 0
 3194 03f0 40E1      		ldi r20,lo8(16)
 3195 03f2 50E0      		ldi r21,0
 3196 03f4 60E0      		ldi r22,0
 3197 03f6 70E0      		ldi r23,0
 3198 03f8 80E0      		ldi r24,lo8(receivedBuffer)
 3199 03fa 90E0      		ldi r25,hi8(receivedBuffer)
 3200 03fc 00D0      		rcall strtol
 3201               	.LVL293:
 3202 03fe 4B01      		movw r8,r22
 3203 0400 5C01      		movw r10,r24
 3204               	.LVL294:
 398:main.c        **** 			
 399:main.c        **** 			usart_read_chars(); // Read data byte
 3205               		.loc 3 399 0
 3206 0402 00D0      		rcall usart_read_chars
 3207               	.LVL295:
 400:main.c        **** 			uint8_t flashByte = strtol(receivedBuffer, NULL, 16);
 3208               		.loc 3 400 0
 3209 0404 40E1      		ldi r20,lo8(16)
 3210 0406 50E0      		ldi r21,0
 3211 0408 60E0      		ldi r22,0
 3212 040a 70E0      		ldi r23,0
 3213 040c 80E0      		ldi r24,lo8(receivedBuffer)
 3214 040e 90E0      		ldi r25,hi8(receivedBuffer)
 3215 0410 00D0      		rcall strtol
 3216               	.LVL296:
 401:main.c        **** 			
 402:main.c        **** 			PORTD |= (1<<ACTIVITY_LED);
 3217               		.loc 3 402 0
 3218 0412 939A      		sbi 0x12,3
 403:main.c        **** 			gb_flash_write_bus_cycle(flashAddress, flashByte);
 3219               		.loc 3 403 0
 3220 0414 C401      		movw r24,r8
 3221 0416 00D0      		rcall gb_flash_write_bus_cycle
 3222               	.LVL297:
 3223 0418 00C0      		rjmp .L248
 3224               	.LVL298:
 3225               	.L139:
 3226               	.LBE159:
 404:main.c        **** 			PORTD &= ~(1<<ACTIVITY_LED);
 405:main.c        **** 			
 406:main.c        **** 			USART_Transmit(SEND_ACK); // Send back acknowledgement
 407:main.c        **** 		}
 408:main.c        **** 		
 409:main.c        **** 		// Write 64 bytes to Flash address one byte write at a time (and increment), pulse a pin
 410:main.c        **** 		else if (receivedChar == GB_FLASH_WRITE_64BYTE) {
 3227               		.loc 3 410 0
 3228 041a 8435      		cpi r24,lo8(84)
 3229 041c 01F4      		brne .L140
 411:main.c        **** 			usart_read_bytes(64);
 3230               		.loc 3 411 0
 3231 041e 80E4      		ldi r24,lo8(64)
 3232 0420 90E0      		ldi r25,0
 3233 0422 00D0      		rcall usart_read_bytes
 3234               	.LVL299:
 412:main.c        **** 			
 413:main.c        **** 			PORTD |= (1<<ACTIVITY_LED);
 3235               		.loc 3 413 0
 3236 0424 939A      		sbi 0x12,3
 3237               	.LVL300:
 3238 0426 60E0      		ldi r22,lo8(receivedBuffer)
 3239 0428 A62E      		mov r10,r22
 3240 042a 60E0      		ldi r22,hi8(receivedBuffer)
 3241 042c B62E      		mov r11,r22
 3242 042e 70E4      		ldi r23,lo8(64)
 3243 0430 972E      		mov r9,r23
 3244 0432 8601      		movw r16,r12
 3245 0434 0050      		subi r16,lo8(receivedBuffer)
 3246 0436 1040      		sbci r17,hi8(receivedBuffer)
 3247               	.LVL301:
 3248               	.L143:
 3249               	.LBB160:
 414:main.c        **** 			for (uint8_t x = 0; x < 64; x++) {
 415:main.c        **** 				if (flashBank1CommandWrites == 0) {
 3250               		.loc 3 415 0
 3251 0438 8091 0000 		lds r24,flashBank1CommandWrites
 416:main.c        **** 					gb_flash_write_byte(address, receivedBuffer[x]);
 3252               		.loc 3 416 0
 3253 043c F501      		movw r30,r10
 3254 043e 6081      		ld r22,Z
 415:main.c        **** 					gb_flash_write_byte(address, receivedBuffer[x]);
 3255               		.loc 3 415 0
 3256 0440 8111      		cpse r24,__zero_reg__
 3257 0442 00C0      		rjmp .L141
 3258               		.loc 3 416 0
 3259 0444 C801      		movw r24,r16
 3260 0446 8A0D      		add r24,r10
 3261 0448 9B1D      		adc r25,r11
 3262 044a 00D0      		rcall gb_flash_write_byte
 3263               	.LVL302:
 3264 044c 00C0      		rjmp .L142
 3265               	.L141:
 417:main.c        **** 				}
 418:main.c        **** 				else { // Some flash carts need to change to bank 1 to issue flash commands
 419:main.c        **** 					gb_flash_write_byte_bank1_commands(address, receivedBuffer[x]);
 3266               		.loc 3 419 0
 3267 044e C801      		movw r24,r16
 3268 0450 8A0D      		add r24,r10
 3269 0452 9B1D      		adc r25,r11
 3270 0454 00D0      		rcall gb_flash_write_byte_bank1_commands
 3271               	.LVL303:
 3272               	.L142:
 3273 0456 9A94      		dec r9
 3274 0458 FFEF      		ldi r31,-1
 3275 045a AF1A      		sub r10,r31
 3276 045c BF0A      		sbc r11,r31
 3277               	.LVL304:
 414:main.c        **** 				if (flashBank1CommandWrites == 0) {
 3278               		.loc 3 414 0 discriminator 2
 3279 045e 9110      		cpse r9,__zero_reg__
 3280 0460 00C0      		rjmp .L143
 3281 0462 20E4      		ldi r18,64
 3282 0464 C20E      		add r12,r18
 3283 0466 D11C      		adc r13,__zero_reg__
 3284 0468 E11C      		adc r14,__zero_reg__
 3285 046a F11C      		adc r15,__zero_reg__
 3286 046c 00C0      		rjmp .L237
 3287               	.LVL305:
 3288               	.L140:
 3289               	.LBE160:
 420:main.c        **** 				}
 421:main.c        **** 				address++;
 422:main.c        **** 			}
 423:main.c        **** 			USART_Transmit(SEND_ACK); // Send back acknowledgement
 424:main.c        **** 			
 425:main.c        **** 			PORTD &= ~(1<<ACTIVITY_LED);
 426:main.c        **** 		}
 427:main.c        **** 		
 428:main.c        **** 		// Buffered programming, write 32 bytes to Flash address
 429:main.c        **** 		else if (receivedChar == GB_FLASH_WRITE_BUFFERED_32BYTE) {
 3290               		.loc 3 429 0
 3291 046e 8935      		cpi r24,lo8(89)
 3292 0470 01F0      		breq .+2
 3293 0472 00C0      		rjmp .L144
 3294               	.LBB161:
 430:main.c        **** 			usart_read_bytes(32);
 3295               		.loc 3 430 0
 3296 0474 80E2      		ldi r24,lo8(32)
 3297 0476 90E0      		ldi r25,0
 3298 0478 00D0      		rcall usart_read_bytes
 3299               	.LVL306:
 431:main.c        **** 			PORTD |= (1<<ACTIVITY_LED);
 3300               		.loc 3 431 0
 3301 047a 939A      		sbi 0x12,3
 432:main.c        **** 			
 433:main.c        **** 			// Setup buffered write
 434:main.c        **** 			gb_flash_write_bus_cycle(0xAAA, 0xAA);
 3302               		.loc 3 434 0
 3303 047c 6AEA      		ldi r22,lo8(-86)
 3304 047e 8AEA      		ldi r24,lo8(-86)
 3305 0480 9AE0      		ldi r25,lo8(10)
 3306 0482 00D0      		rcall gb_flash_write_bus_cycle
 3307               	.LVL307:
 435:main.c        **** 			gb_flash_write_bus_cycle(0x555, 0x55);
 3308               		.loc 3 435 0
 3309 0484 65E5      		ldi r22,lo8(85)
 3310 0486 85E5      		ldi r24,lo8(85)
 3311 0488 95E0      		ldi r25,lo8(5)
 3312 048a 00D0      		rcall gb_flash_write_bus_cycle
 3313               	.LVL308:
 436:main.c        **** 			gb_flash_write_bus_cycle(address, 0x25);
 3314               		.loc 3 436 0
 3315 048c 5601      		movw r10,r12
 3316 048e 65E2      		ldi r22,lo8(37)
 3317 0490 C601      		movw r24,r12
 3318 0492 00D0      		rcall gb_flash_write_bus_cycle
 3319               	.LVL309:
 437:main.c        **** 			gb_flash_write_bus_cycle(address, 0x1F); // Length
 3320               		.loc 3 437 0
 3321 0494 6FE1      		ldi r22,lo8(31)
 3322 0496 C601      		movw r24,r12
 3323 0498 00D0      		rcall gb_flash_write_bus_cycle
 3324               	.LVL310:
 3325               	.LBB162:
 3326               	.LBB163:
 3327               		.loc 2 276 0
 3328 049a 82E0      		ldi r24,lo8(2)
 3329 049c 8A95      	1:	dec r24
 3330 049e 01F4      		brne 1b
 3331 04a0 00C0      		rjmp .
 3332               	.LVL311:
 3333 04a2 00E0      		ldi r16,lo8(receivedBuffer)
 3334 04a4 10E0      		ldi r17,hi8(receivedBuffer)
 3335 04a6 812C      		mov r8,__zero_reg__
 3336 04a8 912C      		mov r9,__zero_reg__
 3337               	.LVL312:
 3338               	.L145:
 3339               	.LBE163:
 3340               	.LBE162:
 3341               	.LBB164:
 438:main.c        **** 			_delay_us(1);
 439:main.c        **** 			
 440:main.c        **** 			// Write data
 441:main.c        **** 			for (uint8_t x = 0; x < 32; x++) {
 442:main.c        **** 				gb_flash_write_bus_cycle(address, receivedBuffer[x]);
 3342               		.loc 3 442 0 discriminator 3
 3343 04aa F801      		movw r30,r16
 3344 04ac 6191      		ld r22,Z+
 3345 04ae 8F01      		movw r16,r30
 3346 04b0 C401      		movw r24,r8
 3347 04b2 8A0D      		add r24,r10
 3348 04b4 9B1D      		adc r25,r11
 3349 04b6 00D0      		rcall gb_flash_write_bus_cycle
 3350               	.LVL313:
 3351 04b8 FFEF      		ldi r31,-1
 3352 04ba 8F1A      		sub r8,r31
 3353 04bc 9F0A      		sbc r9,r31
 3354               	.LVL314:
 441:main.c        **** 				gb_flash_write_bus_cycle(address, receivedBuffer[x]);
 3355               		.loc 3 441 0 discriminator 3
 3356 04be 20E2      		ldi r18,32
 3357 04c0 8216      		cp r8,r18
 3358 04c2 9104      		cpc r9,__zero_reg__
 3359 04c4 01F4      		brne .L145
 3360 04c6 80E2      		ldi r24,32
 3361 04c8 C80E      		add r12,r24
 3362 04ca D11C      		adc r13,__zero_reg__
 3363 04cc E11C      		adc r14,__zero_reg__
 3364 04ce F11C      		adc r15,__zero_reg__
 3365               	.LBE164:
 443:main.c        **** 				address++;
 444:main.c        **** 			}
 445:main.c        **** 			
 446:main.c        **** 			// Write buffer to flash
 447:main.c        **** 			gb_flash_write_bus_cycle(address-32, 0x29);
 3366               		.loc 3 447 0
 3367 04d0 C601      		movw r24,r12
 3368 04d2 8097      		sbiw r24,32
 3369 04d4 69E2      		ldi r22,lo8(41)
 3370 04d6 00D0      		rcall gb_flash_write_bus_cycle
 3371               	.LVL315:
 3372               	.LBB165:
 3373               	.LBB166:
 3374               		.loc 2 276 0
 3375 04d8 EFE8      		ldi r30,lo8(399)
 3376 04da F1E0      		ldi r31,hi8(399)
 3377 04dc 3197      	1:	sbiw r30,1
 3378 04de 01F4      		brne 1b
 3379 04e0 00C0      		rjmp .
 3380 04e2 0000      		nop
 3381               	.LVL316:
 3382               	.LBE166:
 3383               	.LBE165:
 448:main.c        **** 			_delay_us(200);
 449:main.c        **** 			
 450:main.c        **** 			// Verify last byte written
 451:main.c        **** 			uint8_t dataVerify = gb_flash_read_byte(address-1);
 3384               		.loc 3 451 0
 3385 04e4 8601      		movw r16,r12
 3386 04e6 0150      		subi r16,1
 3387 04e8 1109      		sbc r17,__zero_reg__
 3388 04ea C801      		movw r24,r16
 3389 04ec 00D0      		rcall gb_flash_read_byte
 3390               	.LVL317:
 452:main.c        **** 			uint8_t verifyCount = 0;
 453:main.c        **** 			while (dataVerify != receivedBuffer[31]) {
 3391               		.loc 3 453 0
 3392 04ee 58EC      		ldi r21,lo8(-56)
 3393 04f0 B52E      		mov r11,r21
 3394               	.LVL318:
 3395               	.L146:
 3396 04f2 9091 0000 		lds r25,receivedBuffer+31
 3397 04f6 8917      		cp r24,r25
 3398 04f8 01F4      		brne .+2
 3399 04fa 00C0      		rjmp .L237
 454:main.c        **** 				dataVerify = gb_flash_read_byte(address-1);
 3400               		.loc 3 454 0
 3401 04fc C801      		movw r24,r16
 3402               	.LVL319:
 3403 04fe 00D0      		rcall gb_flash_read_byte
 3404               	.LVL320:
 3405               	.LBB167:
 3406               	.LBB168:
 3407               		.loc 2 276 0
 3408 0500 FDE0      		ldi r31,lo8(13)
 3409 0502 FA95      	1:	dec r31
 3410 0504 01F4      		brne 1b
 3411 0506 0000      		nop
 3412               	.LVL321:
 3413 0508 BA94      		dec r11
 3414               	.LVL322:
 3415               	.LBE168:
 3416               	.LBE167:
 455:main.c        **** 				_delay_us(5);
 456:main.c        **** 				verifyCount++;
 457:main.c        **** 				if (verifyCount >= 200) {
 3417               		.loc 3 457 0
 3418 050a B110      		cpse r11,__zero_reg__
 3419 050c 00C0      		rjmp .L146
 3420               	.LVL323:
 3421               	.LBB169:
 3422               	.LBB170:
 187:c:\winavr-20100110\avr\include\util\delay.h **** 
 3423               		.loc 2 187 0
 3424 050e 2FEF      		ldi r18,lo8(799999)
 3425 0510 84E3      		ldi r24,hi8(799999)
 3426 0512 9CE0      		ldi r25,hlo8(799999)
 3427 0514 2150      	1:	subi r18,1
 3428 0516 8040      		sbci r24,0
 3429 0518 9040      		sbci r25,0
 3430 051a 01F4      		brne 1b
 3431               	.LVL324:
 3432 051c 00C0      		rjmp .
 3433 051e 0000      		nop
 3434 0520 00C0      		rjmp .L237
 3435               	.LVL325:
 3436               	.L144:
 3437               	.LBE170:
 3438               	.LBE169:
 3439               	.LBE161:
 458:main.c        **** 					_delay_ms(500);
 459:main.c        **** 					break;
 460:main.c        **** 				}
 461:main.c        **** 			}
 462:main.c        **** 			
 463:main.c        **** 			USART_Transmit(SEND_ACK); // Send back acknowledgement
 464:main.c        **** 			PORTD &= ~(1<<ACTIVITY_LED);
 465:main.c        **** 		}
 466:main.c        **** 		
 467:main.c        **** 		// Buffered programming, write 256 bytes to Flash address
 468:main.c        **** 		else if (receivedChar == GB_FLASH_WRITE_256BYTE) {
 3440               		.loc 3 468 0
 3441 0522 8835      		cpi r24,lo8(88)
 3442 0524 01F0      		breq .+2
 3443 0526 00C0      		rjmp .L149
 3444               	.LBB171:
 469:main.c        **** 			usart_read_bytes(256);
 3445               		.loc 3 469 0
 3446 0528 80E0      		ldi r24,0
 3447 052a 91E0      		ldi r25,lo8(1)
 3448 052c 00D0      		rcall usart_read_bytes
 3449               	.LVL326:
 470:main.c        **** 			PORTD |= (1<<ACTIVITY_LED);
 3450               		.loc 3 470 0
 3451 052e 939A      		sbi 0x12,3
 471:main.c        **** 			
 472:main.c        **** 			// Setup buffered write
 473:main.c        **** 			gb_flash_write_bus_cycle(0xAAA, 0xA9);
 3452               		.loc 3 473 0
 3453 0530 69EA      		ldi r22,lo8(-87)
 3454 0532 8AEA      		ldi r24,lo8(-86)
 3455 0534 9AE0      		ldi r25,lo8(10)
 3456 0536 00D0      		rcall gb_flash_write_bus_cycle
 3457               	.LVL327:
 474:main.c        **** 			gb_flash_write_bus_cycle(0x555, 0x56);
 3458               		.loc 3 474 0
 3459 0538 66E5      		ldi r22,lo8(86)
 3460 053a 85E5      		ldi r24,lo8(85)
 3461 053c 95E0      		ldi r25,lo8(5)
 3462 053e 00D0      		rcall gb_flash_write_bus_cycle
 3463               	.LVL328:
 475:main.c        **** 			gb_flash_write_bus_cycle(address, 0x26);
 3464               		.loc 3 475 0
 3465 0540 5601      		movw r10,r12
 3466 0542 66E2      		ldi r22,lo8(38)
 3467 0544 C601      		movw r24,r12
 3468 0546 00D0      		rcall gb_flash_write_bus_cycle
 3469               	.LVL329:
 476:main.c        **** 			gb_flash_write_bus_cycle(address, 0xFF); // Length
 3470               		.loc 3 476 0
 3471 0548 6FEF      		ldi r22,lo8(-1)
 3472 054a C601      		movw r24,r12
 3473 054c 00D0      		rcall gb_flash_write_bus_cycle
 3474               	.LVL330:
 3475               	.LBB172:
 3476               	.LBB173:
 3477               		.loc 2 276 0
 3478 054e E5E8      		ldi r30,lo8(-123)
 3479 0550 EA95      	1:	dec r30
 3480 0552 01F4      		brne 1b
 3481 0554 0000      		nop
 3482               	.LVL331:
 3483 0556 00E0      		ldi r16,lo8(receivedBuffer)
 3484 0558 10E0      		ldi r17,hi8(receivedBuffer)
 3485               	.LBE173:
 3486               	.LBE172:
 3487               	.LBB174:
 477:main.c        **** 			_delay_us(50);
 478:main.c        **** 			
 479:main.c        **** 			// Write data
 480:main.c        **** 			for (int x = 0; x < 256; x++) {
 3488               		.loc 3 480 0
 3489 055a 812C      		mov r8,__zero_reg__
 3490 055c 912C      		mov r9,__zero_reg__
 3491               	.LVL332:
 3492               	.L150:
 481:main.c        **** 				gb_flash_write_bus_cycle(address, receivedBuffer[x]);
 3493               		.loc 3 481 0 discriminator 3
 3494 055e F801      		movw r30,r16
 3495 0560 6191      		ld r22,Z+
 3496 0562 8F01      		movw r16,r30
 3497 0564 C401      		movw r24,r8
 3498 0566 8A0D      		add r24,r10
 3499 0568 9B1D      		adc r25,r11
 3500 056a 00D0      		rcall gb_flash_write_bus_cycle
 3501               	.LVL333:
 480:main.c        **** 				gb_flash_write_bus_cycle(address, receivedBuffer[x]);
 3502               		.loc 3 480 0 discriminator 3
 3503 056c FFEF      		ldi r31,-1
 3504 056e 8F1A      		sub r8,r31
 3505 0570 9F0A      		sbc r9,r31
 3506               	.LVL334:
 3507 0572 8114      		cp r8,__zero_reg__
 3508 0574 21E0      		ldi r18,1
 3509 0576 9206      		cpc r9,r18
 3510 0578 01F4      		brne .L150
 3511 057a 8FEF      		ldi r24,-1
 3512 057c D81A      		sub r13,r24
 3513 057e E80A      		sbc r14,r24
 3514 0580 F80A      		sbc r15,r24
 3515               	.LBE174:
 482:main.c        **** 				address++;
 483:main.c        **** 			}
 484:main.c        **** 			
 485:main.c        **** 			// Write buffer to flash
 486:main.c        **** 			gb_flash_write_bus_cycle(address-256, 0x2A);
 3516               		.loc 3 486 0
 3517 0582 C601      		movw r24,r12
 3518 0584 9A95      		dec r25
 3519 0586 6AE2      		ldi r22,lo8(42)
 3520 0588 00D0      		rcall gb_flash_write_bus_cycle
 3521               	.LVL335:
 487:main.c        **** 			
 488:main.c        **** 			// Verify last byte written
 489:main.c        **** 			uint8_t dataVerify = gb_flash_read_byte(address-1);
 3522               		.loc 3 489 0
 3523 058a 8601      		movw r16,r12
 3524 058c 0150      		subi r16,1
 3525 058e 1109      		sbc r17,__zero_reg__
 3526 0590 C801      		movw r24,r16
 3527 0592 00D0      		rcall gb_flash_read_byte
 3528               	.LVL336:
 3529               	.L151:
 490:main.c        **** 			while (dataVerify != receivedBuffer[255]) {
 3530               		.loc 3 490 0
 3531 0594 9091 0000 		lds r25,receivedBuffer+255
 3532 0598 8917      		cp r24,r25
 3533 059a 01F4      		brne .+2
 3534 059c 00C0      		rjmp .L237
 491:main.c        **** 				dataVerify = gb_flash_read_byte(address-1);
 3535               		.loc 3 491 0
 3536 059e C801      		movw r24,r16
 3537               	.LVL337:
 3538 05a0 00D0      		rcall gb_flash_read_byte
 3539               	.LVL338:
 3540               	.LBB175:
 3541               	.LBB176:
 3542               		.loc 2 276 0
 3543 05a2 9DE0      		ldi r25,lo8(13)
 3544 05a4 9A95      	1:	dec r25
 3545 05a6 01F4      		brne 1b
 3546 05a8 0000      		nop
 3547 05aa 00C0      		rjmp .L151
 3548               	.LVL339:
 3549               	.L149:
 3550               	.LBE176:
 3551               	.LBE175:
 3552               	.LBE171:
 492:main.c        **** 				_delay_us(5);
 493:main.c        **** 			}
 494:main.c        **** 			
 495:main.c        **** 			USART_Transmit(SEND_ACK); // Send back acknowledgement
 496:main.c        **** 			PORTD &= ~(1<<ACTIVITY_LED);
 497:main.c        **** 		}
 498:main.c        **** 		
 499:main.c        **** 		
 500:main.c        **** 		// ---------- GBA FLASH CARTS ----------
 501:main.c        **** 		// Write 24 bit address, 16 bit data and pulse a pin
 502:main.c        **** 		else if (receivedChar == GBA_FLASH_CART_WRITE_BYTE) {
 3553               		.loc 3 502 0
 3554 05ac 8E36      		cpi r24,lo8(110)
 3555 05ae 01F4      		brne .L153
 3556               	.LBB177:
 503:main.c        **** 			usart_read_chars(); // Read address
 3557               		.loc 3 503 0
 3558 05b0 00D0      		rcall usart_read_chars
 3559               	.LVL340:
 504:main.c        **** 			uint32_t flashAddress = strtol(receivedBuffer, NULL, 16); // Convert address string in hex to de
 3560               		.loc 3 504 0
 3561 05b2 40E1      		ldi r20,lo8(16)
 3562 05b4 50E0      		ldi r21,0
 3563 05b6 60E0      		ldi r22,0
 3564 05b8 70E0      		ldi r23,0
 3565 05ba 80E0      		ldi r24,lo8(receivedBuffer)
 3566 05bc 90E0      		ldi r25,hi8(receivedBuffer)
 3567 05be 00D0      		rcall strtol
 3568               	.LVL341:
 3569 05c0 4B01      		movw r8,r22
 3570 05c2 5C01      		movw r10,r24
 3571               	.LVL342:
 505:main.c        **** 			
 506:main.c        **** 			receivedChar = USART_Receive(); // Wait for byte
 3572               		.loc 3 506 0
 3573 05c4 00D0      		rcall USART_Receive
 3574               	.LVL343:
 3575 05c6 8093 0000 		sts receivedChar,r24
 507:main.c        **** 			if (receivedChar == GBA_FLASH_CART_WRITE_BYTE) {
 3576               		.loc 3 507 0
 3577 05ca 8E36      		cpi r24,lo8(110)
 3578 05cc 01F0      		breq .+2
 3579 05ce 00C0      		rjmp .L93
 3580               	.LBB178:
 508:main.c        **** 				usart_read_chars(); // Read data
 3581               		.loc 3 508 0
 3582 05d0 00D0      		rcall usart_read_chars
 3583               	.LVL344:
 509:main.c        **** 				uint16_t flashByte = strtol(receivedBuffer, NULL, 16); // Convert data byte in hex to dec
 3584               		.loc 3 509 0
 3585 05d2 40E1      		ldi r20,lo8(16)
 3586 05d4 50E0      		ldi r21,0
 3587 05d6 60E0      		ldi r22,0
 3588 05d8 70E0      		ldi r23,0
 3589 05da 80E0      		ldi r24,lo8(receivedBuffer)
 3590 05dc 90E0      		ldi r25,hi8(receivedBuffer)
 3591 05de 00D0      		rcall strtol
 3592               	.LVL345:
 510:main.c        **** 				
 511:main.c        **** 				PORTD |= (1<<ACTIVITY_LED);
 3593               		.loc 3 511 0
 3594 05e0 939A      		sbi 0x12,3
 512:main.c        **** 				GBA_DDR_ROM_ADDR23_16 = 0xFF;
 3595               		.loc 3 512 0
 3596 05e2 EFEF      		ldi r30,lo8(-1)
 3597 05e4 E4BB      		out 0x14,r30
 513:main.c        **** 				GBA_DDR_ROM_ADDR15_8 = 0xFF;
 3598               		.loc 3 513 0
 3599 05e6 EABB      		out 0x1a,r30
 514:main.c        **** 				GBA_DDR_ROM_ADDR7_0 = 0xFF;
 3600               		.loc 3 514 0
 3601 05e8 E7BB      		out 0x17,r30
 515:main.c        **** 				gba_flash_write_bus_cycle(flashAddress, flashByte);
 3602               		.loc 3 515 0
 3603 05ea AB01      		movw r20,r22
 3604 05ec C501      		movw r24,r10
 3605 05ee B401      		movw r22,r8
 3606               	.LVL346:
 3607 05f0 00D0      		rcall gba_flash_write_bus_cycle
 3608               	.LVL347:
 3609               	.L248:
 516:main.c        **** 				PORTD &= ~(1<<ACTIVITY_LED);
 3610               		.loc 3 516 0
 3611 05f2 9398      		cbi 0x12,3
 517:main.c        **** 				
 518:main.c        **** 				USART_Transmit(SEND_ACK); // Send back acknowledgement
 3612               		.loc 3 518 0
 3613 05f4 81E3      		ldi r24,lo8(49)
 3614 05f6 00C0      		rjmp .L228
 3615               	.LVL348:
 3616               	.L153:
 3617               	.LBE178:
 3618               	.LBE177:
 519:main.c        **** 			}
 520:main.c        **** 		}
 521:main.c        **** 		
 522:main.c        **** 		// Write 64 or 256 bytes to Flash address (swapped command data bytes), combine 2 bytes and write
 523:main.c        **** 		else if (receivedChar == GBA_FLASH_WRITE_64BYTE_SWAPPED_D0D1 || receivedChar == GBA_FLASH_WRITE_2
 3619               		.loc 3 523 0
 3620 05f8 8137      		cpi r24,lo8(113)
 3621 05fa 01F0      		breq .L154
 3622               		.loc 3 523 0 is_stmt 0 discriminator 1
 3623 05fc 8437      		cpi r24,lo8(116)
 3624 05fe 01F4      		brne .L155
 3625               	.L154:
 3626               	.LBB179:
 524:main.c        **** 			PORTD |= (1<<ACTIVITY_LED);
 3627               		.loc 3 524 0 is_stmt 1
 3628 0600 939A      		sbi 0x12,3
 3629               	.LVL349:
 525:main.c        **** 			
 526:main.c        **** 			int readLength = 64;
 527:main.c        **** 			if (receivedChar == GBA_FLASH_WRITE_256BYTE_SWAPPED_D0D1) {
 3630               		.loc 3 527 0
 3631 0602 8091 0000 		lds r24,receivedChar
 3632 0606 8437      		cpi r24,lo8(116)
 3633 0608 01F4      		brne .L200
 528:main.c        **** 				readLength = 256;
 3634               		.loc 3 528 0
 3635 060a 00E0      		ldi r16,0
 3636 060c 11E0      		ldi r17,lo8(1)
 3637 060e 00C0      		rjmp .L156
 3638               	.L200:
 526:main.c        **** 			if (receivedChar == GBA_FLASH_WRITE_256BYTE_SWAPPED_D0D1) {
 3639               		.loc 3 526 0
 3640 0610 00E4      		ldi r16,lo8(64)
 3641 0612 10E0      		ldi r17,0
 3642               	.L156:
 3643               	.LVL350:
 529:main.c        **** 			}
 530:main.c        **** 			usart_read_bytes(readLength);
 3644               		.loc 3 530 0
 3645 0614 C801      		movw r24,r16
 3646 0616 00D0      		rcall usart_read_bytes
 3647               	.LVL351:
 3648 0618 40E0      		ldi r20,lo8(receivedBuffer)
 3649 061a A42E      		mov r10,r20
 3650 061c 40E0      		ldi r20,hi8(receivedBuffer)
 3651 061e B42E      		mov r11,r20
 3652 0620 2601      		movw r4,r12
 3653 0622 3701      		movw r6,r14
 3654               	.LVL352:
 3655               	.L157:
 3656               	.LBB180:
 3657               	.LBB181:
 531:main.c        **** 			
 532:main.c        **** 			for (int x = 0; x < readLength; x += 2) {
 533:main.c        **** 				uint16_t combinedBytes = (uint16_t) receivedBuffer[x+1] << 8 | (uint16_t) receivedBuffer[x];
 534:main.c        **** 				gba_flash_write_byte(address, combinedBytes, D0D1_SWAPPED);
 3658               		.loc 3 534 0 discriminator 3
 3659 0624 F501      		movw r30,r10
 3660 0626 4181      		ldd r20,Z+1
 3661 0628 50E0      		ldi r21,0
 3662 062a 542F      		mov r21,r20
 3663 062c 4427      		clr r20
 3664 062e 8081      		ld r24,Z
 3665 0630 482B      		or r20,r24
 3666 0632 21E0      		ldi r18,lo8(1)
 3667 0634 C301      		movw r24,r6
 3668 0636 B201      		movw r22,r4
 3669 0638 00D0      		rcall gba_flash_write_byte
 3670               	.LVL353:
 535:main.c        **** 				address++;
 3671               		.loc 3 535 0 discriminator 3
 3672 063a FFEF      		ldi r31,-1
 3673 063c 4F1A      		sub r4,r31
 3674 063e 5F0A      		sbc r5,r31
 3675 0640 6F0A      		sbc r6,r31
 3676 0642 7F0A      		sbc r7,r31
 3677               	.LVL354:
 3678 0644 22E0      		ldi r18,2
 3679 0646 A20E      		add r10,r18
 3680 0648 B11C      		adc r11,__zero_reg__
 3681               	.LVL355:
 3682               	.LBE181:
 532:main.c        **** 				uint16_t combinedBytes = (uint16_t) receivedBuffer[x+1] << 8 | (uint16_t) receivedBuffer[x];
 3683               		.loc 3 532 0 discriminator 3
 3684 064a C501      		movw r24,r10
 3685 064c 8050      		subi r24,lo8(receivedBuffer)
 3686 064e 9040      		sbci r25,hi8(receivedBuffer)
 3687 0650 8017      		cp r24,r16
 3688 0652 9107      		cpc r25,r17
 3689 0654 04F0      		brlt .L157
 3690 0656 8FEF      		ldi r24,-1
 3691 0658 C81A      		sub r12,r24
 3692 065a D80A      		sbc r13,r24
 3693 065c E80A      		sbc r14,r24
 3694 065e F80A      		sbc r15,r24
 3695 0660 0150      		subi r16,1
 3696 0662 1109      		sbc r17,__zero_reg__
 3697               	.LVL356:
 3698 0664 1695      		lsr r17
 3699 0666 0795      		ror r16
 3700               	.LVL357:
 3701 0668 C00E      		add r12,r16
 3702 066a D11E      		adc r13,r17
 3703 066c E11C      		adc r14,__zero_reg__
 3704 066e F11C      		adc r15,__zero_reg__
 3705 0670 00C0      		rjmp .L237
 3706               	.LVL358:
 3707               	.L155:
 3708               	.LBE180:
 3709               	.LBE179:
 536:main.c        **** 			}
 537:main.c        **** 			USART_Transmit(SEND_ACK); // Send back acknowledgement
 538:main.c        **** 			
 539:main.c        **** 			PORTD &= ~(1<<ACTIVITY_LED);
 540:main.c        **** 		}
 541:main.c        **** 		
 542:main.c        **** 		// Write 256 bytes to Flash address, combine 2 bytes and write one at a time (and increment addre
 543:main.c        **** 		else if (receivedChar == GBA_FLASH_WRITE_256BYTE) {
 3710               		.loc 3 543 0
 3711 0672 8636      		cpi r24,lo8(102)
 3712 0674 01F4      		brne .L158
 3713               	.LBB182:
 544:main.c        **** 			PORTD |= (1<<ACTIVITY_LED);
 3714               		.loc 3 544 0
 3715 0676 939A      		sbi 0x12,3
 3716               	.LVL359:
 545:main.c        **** 			
 546:main.c        **** 			int readLength = 256;
 547:main.c        **** 			usart_read_bytes(readLength);
 3717               		.loc 3 547 0
 3718 0678 80E0      		ldi r24,0
 3719 067a 91E0      		ldi r25,lo8(1)
 3720 067c 00D0      		rcall usart_read_bytes
 3721               	.LVL360:
 3722 067e 00E0      		ldi r16,lo8(receivedBuffer)
 3723 0680 10E0      		ldi r17,hi8(receivedBuffer)
 3724 0682 4601      		movw r8,r12
 3725 0684 5701      		movw r10,r14
 3726               	.LVL361:
 3727               	.L159:
 3728               	.LBB183:
 3729               	.LBB184:
 548:main.c        **** 			
 549:main.c        **** 			for (int x = 0; x < readLength; x += 2) {
 550:main.c        **** 				uint16_t combinedBytes = (uint16_t) receivedBuffer[x+1] << 8 | (uint16_t) receivedBuffer[x];
 551:main.c        **** 				gba_flash_write_byte(address, combinedBytes, D0D1_NOT_SWAPPED);
 3730               		.loc 3 551 0 discriminator 3
 3731 0686 F801      		movw r30,r16
 3732 0688 4181      		ldd r20,Z+1
 3733 068a 50E0      		ldi r21,0
 3734 068c 542F      		mov r21,r20
 3735 068e 4427      		clr r20
 3736 0690 8081      		ld r24,Z
 3737 0692 482B      		or r20,r24
 3738 0694 20E0      		ldi r18,0
 3739 0696 C501      		movw r24,r10
 3740 0698 B401      		movw r22,r8
 3741 069a 00D0      		rcall gba_flash_write_byte
 3742               	.LVL362:
 552:main.c        **** 				address++;
 3743               		.loc 3 552 0 discriminator 3
 3744 069c FFEF      		ldi r31,-1
 3745 069e 8F1A      		sub r8,r31
 3746 06a0 9F0A      		sbc r9,r31
 3747 06a2 AF0A      		sbc r10,r31
 3748 06a4 BF0A      		sbc r11,r31
 3749               	.LVL363:
 3750 06a6 0E5F      		subi r16,-2
 3751 06a8 1F4F      		sbci r17,-1
 3752               	.LVL364:
 3753               	.LBE184:
 549:main.c        **** 				uint16_t combinedBytes = (uint16_t) receivedBuffer[x+1] << 8 | (uint16_t) receivedBuffer[x];
 3754               		.loc 3 549 0 discriminator 3
 3755 06aa 20E0      		ldi r18,hi8(receivedBuffer+256)
 3756 06ac 0030      		cpi r16,lo8(receivedBuffer+256)
 3757 06ae 1207      		cpc r17,r18
 3758 06b0 01F4      		brne .L159
 3759 06b2 80E8      		ldi r24,-128
 3760 06b4 C80E      		add r12,r24
 3761 06b6 D11C      		adc r13,__zero_reg__
 3762 06b8 E11C      		adc r14,__zero_reg__
 3763 06ba F11C      		adc r15,__zero_reg__
 3764 06bc 00C0      		rjmp .L237
 3765               	.LVL365:
 3766               	.L158:
 3767               	.LBE183:
 3768               	.LBE182:
 553:main.c        **** 			}
 554:main.c        **** 			USART_Transmit(SEND_ACK); // Send back acknowledgement
 555:main.c        **** 			
 556:main.c        **** 			PORTD &= ~(1<<ACTIVITY_LED);
 557:main.c        **** 		}
 558:main.c        **** 		
 559:main.c        **** 		// Intel flash command based chips
 560:main.c        **** 		// Write 64 bytes to Flash address, combine 2 bytes and write one at a time (and increment addres
 561:main.c        **** 		else if (receivedChar == GBA_FLASH_WRITE_INTEL_64BYTE) {
 3769               		.loc 3 561 0
 3770 06be 8C36      		cpi r24,lo8(108)
 3771 06c0 01F0      		breq .+2
 3772 06c2 00C0      		rjmp .L160
 3773               	.LBB185:
 562:main.c        **** 			PORTD |= (1<<ACTIVITY_LED);
 3774               		.loc 3 562 0
 3775 06c4 939A      		sbi 0x12,3
 563:main.c        **** 			usart_read_bytes(64);
 3776               		.loc 3 563 0
 3777 06c6 80E4      		ldi r24,lo8(64)
 3778 06c8 90E0      		ldi r25,0
 3779 06ca 00D0      		rcall usart_read_bytes
 3780               	.LVL366:
 564:main.c        **** 			
 565:main.c        **** 			// Set address lines as outputs
 566:main.c        **** 			GBA_DDR_ROM_ADDR23_16 = 0xFF;
 3781               		.loc 3 566 0
 3782 06cc 9FEF      		ldi r25,lo8(-1)
 3783 06ce 94BB      		out 0x14,r25
 567:main.c        **** 			GBA_DDR_ROM_ADDR15_8 = 0xFF;
 3784               		.loc 3 567 0
 3785 06d0 9ABB      		out 0x1a,r25
 568:main.c        **** 			GBA_DDR_ROM_ADDR7_0 = 0xFF;
 3786               		.loc 3 568 0
 3787 06d2 97BB      		out 0x17,r25
 569:main.c        **** 			
 570:main.c        **** 			// Unlock
 571:main.c        **** 			gba_flash_write_bus_cycle(address, 0x60);
 3788               		.loc 3 571 0
 3789 06d4 40E6      		ldi r20,lo8(96)
 3790 06d6 50E0      		ldi r21,0
 3791 06d8 C701      		movw r24,r14
 3792 06da B601      		movw r22,r12
 3793 06dc 00D0      		rcall gba_flash_write_bus_cycle
 3794               	.LVL367:
 572:main.c        **** 			gba_flash_write_bus_cycle(address, 0xD0);
 3795               		.loc 3 572 0
 3796 06de 40ED      		ldi r20,lo8(-48)
 3797 06e0 50E0      		ldi r21,0
 3798 06e2 C701      		movw r24,r14
 3799 06e4 B601      		movw r22,r12
 3800 06e6 00D0      		rcall gba_flash_write_bus_cycle
 3801               	.LVL368:
 573:main.c        **** 			
 574:main.c        **** 			// Buffered write command
 575:main.c        **** 			gba_flash_write_bus_cycle(address, 0xE8);
 3802               		.loc 3 575 0
 3803 06e8 48EE      		ldi r20,lo8(-24)
 3804 06ea 50E0      		ldi r21,0
 3805 06ec C701      		movw r24,r14
 3806 06ee B601      		movw r22,r12
 3807 06f0 00D0      		rcall gba_flash_write_bus_cycle
 3808               	.LVL369:
 3809               	.LBB186:
 3810               	.LBB187:
 3811               		.loc 2 276 0
 3812 06f2 E5E8      		ldi r30,lo8(-123)
 3813 06f4 EA95      	1:	dec r30
 3814 06f6 01F4      		brne 1b
 3815 06f8 0000      		nop
 3816               	.LVL370:
 3817               	.LBE187:
 3818               	.LBE186:
 576:main.c        **** 			_delay_us(50);
 577:main.c        **** 			
 578:main.c        **** 			// Wait for first 2 bytes to be 0x80, 0x00
 579:main.c        **** 			uint16_t dataVerify = gba_read_16bit_data(address);
 3819               		.loc 3 579 0
 3820 06fa C701      		movw r24,r14
 3821 06fc B601      		movw r22,r12
 3822 06fe 00D0      		rcall gba_read_16bit_data
 3823               	.LVL371:
 3824               	.L161:
 580:main.c        **** 			while (dataVerify != 0x0080) {
 3825               		.loc 3 580 0
 3826 0700 8038      		cpi r24,-128
 3827 0702 9105      		cpc r25,__zero_reg__
 3828 0704 01F0      		breq .L249
 581:main.c        **** 				dataVerify = gba_read_16bit_data(address);
 3829               		.loc 3 581 0
 3830 0706 C701      		movw r24,r14
 3831 0708 B601      		movw r22,r12
 3832 070a 00D0      		rcall gba_read_16bit_data
 3833               	.LVL372:
 3834               	.LBB188:
 3835               	.LBB189:
 3836               		.loc 2 276 0
 3837 070c F5E8      		ldi r31,lo8(-123)
 3838 070e FA95      	1:	dec r31
 3839 0710 01F4      		brne 1b
 3840 0712 0000      		nop
 3841 0714 00C0      		rjmp .L161
 3842               	.LVL373:
 3843               	.L249:
 3844               	.LBE189:
 3845               	.LBE188:
 582:main.c        **** 				_delay_us(50);
 583:main.c        **** 			}
 584:main.c        **** 			
 585:main.c        **** 			
 586:main.c        **** 			// Set address lines as outputs
 587:main.c        **** 			GBA_DDR_ROM_ADDR23_16 = 0xFF;
 3846               		.loc 3 587 0
 3847 0716 2FEF      		ldi r18,lo8(-1)
 3848 0718 24BB      		out 0x14,r18
 588:main.c        **** 			GBA_DDR_ROM_ADDR15_8 = 0xFF;
 3849               		.loc 3 588 0
 3850 071a 2ABB      		out 0x1a,r18
 589:main.c        **** 			GBA_DDR_ROM_ADDR7_0 = 0xFF;
 3851               		.loc 3 589 0
 3852 071c 27BB      		out 0x17,r18
 590:main.c        **** 			
 591:main.c        **** 			// Set length
 592:main.c        **** 			gba_flash_write_bus_cycle(address, 0x1F);
 3853               		.loc 3 592 0
 3854 071e 4FE1      		ldi r20,lo8(31)
 3855 0720 50E0      		ldi r21,0
 3856 0722 C701      		movw r24,r14
 3857 0724 B601      		movw r22,r12
 3858 0726 00D0      		rcall gba_flash_write_bus_cycle
 3859               	.LVL374:
 3860 0728 00E0      		ldi r16,lo8(receivedBuffer)
 3861 072a 10E0      		ldi r17,hi8(receivedBuffer)
 3862 072c 4601      		movw r8,r12
 3863 072e 5701      		movw r10,r14
 3864               	.LVL375:
 3865               	.L163:
 3866               	.LBB190:
 3867               	.LBB191:
 593:main.c        **** 			
 594:main.c        **** 			// Write data
 595:main.c        **** 			for (int x = 0; x < 64; x += 2) {
 596:main.c        **** 				uint16_t combinedBytes = (uint16_t) receivedBuffer[x+1] << 8 | (uint16_t) receivedBuffer[x];
 597:main.c        **** 				gba_flash_write_bus_cycle(address, combinedBytes);
 3868               		.loc 3 597 0 discriminator 3
 3869 0730 F801      		movw r30,r16
 3870 0732 4181      		ldd r20,Z+1
 3871 0734 50E0      		ldi r21,0
 3872 0736 542F      		mov r21,r20
 3873 0738 4427      		clr r20
 3874 073a 8081      		ld r24,Z
 3875 073c 482B      		or r20,r24
 3876 073e C501      		movw r24,r10
 3877 0740 B401      		movw r22,r8
 3878 0742 00D0      		rcall gba_flash_write_bus_cycle
 3879               	.LVL376:
 598:main.c        **** 				address++;
 3880               		.loc 3 598 0 discriminator 3
 3881 0744 FFEF      		ldi r31,-1
 3882 0746 8F1A      		sub r8,r31
 3883 0748 9F0A      		sbc r9,r31
 3884 074a AF0A      		sbc r10,r31
 3885 074c BF0A      		sbc r11,r31
 3886               	.LVL377:
 3887 074e 0E5F      		subi r16,-2
 3888 0750 1F4F      		sbci r17,-1
 3889               	.LVL378:
 3890               	.LBE191:
 595:main.c        **** 				uint16_t combinedBytes = (uint16_t) receivedBuffer[x+1] << 8 | (uint16_t) receivedBuffer[x];
 3891               		.loc 3 595 0 discriminator 3
 3892 0752 20E0      		ldi r18,hi8(receivedBuffer+64)
 3893 0754 0030      		cpi r16,lo8(receivedBuffer+64)
 3894 0756 1207      		cpc r17,r18
 3895 0758 01F4      		brne .L163
 3896 075a 80E2      		ldi r24,32
 3897 075c C80E      		add r12,r24
 3898 075e D11C      		adc r13,__zero_reg__
 3899 0760 E11C      		adc r14,__zero_reg__
 3900 0762 F11C      		adc r15,__zero_reg__
 3901               	.LBE190:
 599:main.c        **** 			}
 600:main.c        **** 			
 601:main.c        **** 			// Write buffer to flash
 602:main.c        **** 			gba_flash_write_bus_cycle(address, 0xD0);
 3902               		.loc 3 602 0
 3903 0764 40ED      		ldi r20,lo8(-48)
 3904 0766 50E0      		ldi r21,0
 3905 0768 C701      		movw r24,r14
 3906 076a B601      		movw r22,r12
 3907 076c 00D0      		rcall gba_flash_write_bus_cycle
 3908               	.LVL379:
 3909               	.LBB192:
 3910               	.LBB193:
 3911               		.loc 2 276 0
 3912 076e EFE6      		ldi r30,lo8(879)
 3913 0770 F3E0      		ldi r31,hi8(879)
 3914 0772 3197      	1:	sbiw r30,1
 3915 0774 01F4      		brne 1b
 3916 0776 00C0      		rjmp .
 3917 0778 0000      		nop
 3918               	.LVL380:
 3919               	.LBE193:
 3920               	.LBE192:
 603:main.c        **** 			_delay_us(440);
 604:main.c        **** 			
 605:main.c        **** 			// Wait for first 2 bytes to be 0x80, 0x00
 606:main.c        **** 			dataVerify = gba_read_16bit_data(address);
 3921               		.loc 3 606 0
 3922 077a C701      		movw r24,r14
 3923 077c B601      		movw r22,r12
 3924 077e 00D0      		rcall gba_read_16bit_data
 3925               	.LVL381:
 3926               	.L164:
 607:main.c        **** 			while (dataVerify != 0x0080) {
 3927               		.loc 3 607 0
 3928 0780 8038      		cpi r24,-128
 3929 0782 9105      		cpc r25,__zero_reg__
 3930 0784 01F0      		breq .L250
 608:main.c        **** 				dataVerify = gba_read_16bit_data(address);
 3931               		.loc 3 608 0
 3932 0786 C701      		movw r24,r14
 3933 0788 B601      		movw r22,r12
 3934 078a 00D0      		rcall gba_read_16bit_data
 3935               	.LVL382:
 3936               	.LBB194:
 3937               	.LBB195:
 3938               		.loc 2 276 0
 3939 078c F5E8      		ldi r31,lo8(-123)
 3940 078e FA95      	1:	dec r31
 3941 0790 01F4      		brne 1b
 3942 0792 0000      		nop
 3943 0794 00C0      		rjmp .L164
 3944               	.LVL383:
 3945               	.L250:
 3946               	.LBE195:
 3947               	.LBE194:
 609:main.c        **** 				_delay_us(50);
 610:main.c        **** 			}
 611:main.c        **** 			
 612:main.c        **** 			
 613:main.c        **** 			// Set address lines as outputs
 614:main.c        **** 			GBA_DDR_ROM_ADDR23_16 = 0xFF;
 3948               		.loc 3 614 0
 3949 0796 2FEF      		ldi r18,lo8(-1)
 3950 0798 24BB      		out 0x14,r18
 615:main.c        **** 			GBA_DDR_ROM_ADDR15_8 = 0xFF;
 3951               		.loc 3 615 0
 3952 079a 2ABB      		out 0x1a,r18
 616:main.c        **** 			GBA_DDR_ROM_ADDR7_0 = 0xFF;
 3953               		.loc 3 616 0
 3954 079c 27BB      		out 0x17,r18
 617:main.c        **** 			
 618:main.c        **** 			// Back to reading mode
 619:main.c        **** 			gba_flash_write_bus_cycle(address, 0xFF);
 3955               		.loc 3 619 0
 3956 079e 4FEF      		ldi r20,lo8(-1)
 3957 07a0 50E0      		ldi r21,0
 3958 07a2 C701      		movw r24,r14
 3959 07a4 B601      		movw r22,r12
 3960 07a6 00D0      		rcall gba_flash_write_bus_cycle
 3961               	.LVL384:
 3962               	.L237:
 620:main.c        **** 			
 621:main.c        **** 			USART_Transmit(SEND_ACK); // Send back acknowledgement
 3963               		.loc 3 621 0
 3964 07a8 81E3      		ldi r24,lo8(49)
 3965 07aa 00C0      		rjmp .L231
 3966               	.LVL385:
 3967               	.L160:
 3968               	.LBE185:
 622:main.c        **** 			PORTD &= ~(1<<ACTIVITY_LED);
 623:main.c        **** 		}
 624:main.c        **** 		
 625:main.c        **** 		
 626:main.c        **** 		// ---------- General commands ----------
 627:main.c        **** 		// Set any pin as input/output
 628:main.c        **** 		// Reads the DDR/PORT (e.g. DDRB/PORTB is 'B') and the hex value that represents pins to set to a
 629:main.c        **** 		else if (receivedChar == SET_INPUT || receivedChar == SET_OUTPUT) {
 3969               		.loc 3 629 0
 3970 07ac 8934      		cpi r24,lo8(73)
 3971 07ae 01F0      		breq .L166
 3972               		.loc 3 629 0 is_stmt 0 discriminator 1
 3973 07b0 8F34      		cpi r24,lo8(79)
 3974 07b2 01F0      		breq .+2
 3975 07b4 00C0      		rjmp .L167
 3976               	.L166:
 3977               	.LBB196:
 630:main.c        **** 			char portChar = USART_Receive();
 3978               		.loc 3 630 0 is_stmt 1
 3979 07b6 00D0      		rcall USART_Receive
 3980               	.LVL386:
 3981 07b8 182F      		mov r17,r24
 3982               	.LVL387:
 631:main.c        **** 			usart_read_chars();
 3983               		.loc 3 631 0
 3984 07ba 00D0      		rcall usart_read_chars
 3985               	.LVL388:
 632:main.c        **** 			uint8_t setValue = strtol(receivedBuffer, NULL, 16);
 3986               		.loc 3 632 0
 3987 07bc 40E1      		ldi r20,lo8(16)
 3988 07be 50E0      		ldi r21,0
 3989 07c0 60E0      		ldi r22,0
 3990 07c2 70E0      		ldi r23,0
 3991 07c4 80E0      		ldi r24,lo8(receivedBuffer)
 3992 07c6 90E0      		ldi r25,hi8(receivedBuffer)
 3993 07c8 00D0      		rcall strtol
 3994               	.LVL389:
 633:main.c        **** 			
 634:main.c        **** 			PORTD |= (1<<ACTIVITY_LED);
 3995               		.loc 3 634 0
 3996 07ca 939A      		sbi 0x12,3
 635:main.c        **** 			if (receivedChar == SET_INPUT) {
 3997               		.loc 3 635 0
 3998 07cc 8091 0000 		lds r24,receivedChar
 3999 07d0 8934      		cpi r24,lo8(73)
 4000 07d2 01F4      		brne .L168
 636:main.c        **** 				if (portChar == 'A') {
 4001               		.loc 3 636 0
 4002 07d4 1134      		cpi r17,lo8(65)
 4003 07d6 01F4      		brne .L169
 637:main.c        **** 					DDRA &= ~(setValue);
 4004               		.loc 3 637 0
 4005 07d8 8AB3      		in r24,0x1a
 4006 07da 6095      		com r22
 4007               	.LVL390:
 4008 07dc 6823      		and r22,r24
 4009               	.LVL391:
 4010 07de 00C0      		rjmp .L239
 4011               	.LVL392:
 4012               	.L169:
 638:main.c        **** 				}
 639:main.c        **** 				else if (portChar == 'B') {
 4013               		.loc 3 639 0
 4014 07e0 1234      		cpi r17,lo8(66)
 4015 07e2 01F4      		brne .L171
 640:main.c        **** 					DDRB &= ~(setValue);
 4016               		.loc 3 640 0
 4017 07e4 87B3      		in r24,0x17
 4018 07e6 6095      		com r22
 4019               	.LVL393:
 4020 07e8 6823      		and r22,r24
 4021               	.LVL394:
 4022 07ea 00C0      		rjmp .L240
 4023               	.LVL395:
 4024               	.L171:
 641:main.c        **** 				}
 642:main.c        **** 				else if (portChar == 'C') {
 4025               		.loc 3 642 0
 4026 07ec 1334      		cpi r17,lo8(67)
 4027 07ee 01F4      		brne .L172
 643:main.c        **** 					DDRC &= ~(setValue);
 4028               		.loc 3 643 0
 4029 07f0 84B3      		in r24,0x14
 4030 07f2 6095      		com r22
 4031               	.LVL396:
 4032 07f4 6823      		and r22,r24
 4033               	.LVL397:
 4034 07f6 00C0      		rjmp .L245
 4035               	.LVL398:
 4036               	.L172:
 644:main.c        **** 				}
 645:main.c        **** 				else if (portChar == 'D') {
 4037               		.loc 3 645 0
 4038 07f8 1434      		cpi r17,lo8(68)
 4039 07fa 01F4      		brne .L173
 646:main.c        **** 					DDRD &= ~(setValue);
 4040               		.loc 3 646 0
 4041 07fc 81B3      		in r24,0x11
 4042 07fe 6095      		com r22
 4043               	.LVL399:
 4044 0800 6823      		and r22,r24
 4045               	.LVL400:
 4046 0802 00C0      		rjmp .L246
 4047               	.LVL401:
 4048               	.L173:
 647:main.c        **** 				}
 648:main.c        **** 				else if (portChar == 'E') {
 4049               		.loc 3 648 0
 4050 0804 1534      		cpi r17,lo8(69)
 4051 0806 01F0      		breq .+2
 4052 0808 00C0      		rjmp .L192
 649:main.c        **** 					DDRE &= ~(setValue);
 4053               		.loc 3 649 0
 4054 080a 86B1      		in r24,0x6
 4055 080c 6095      		com r22
 4056               	.LVL402:
 4057 080e 6823      		and r22,r24
 4058               	.LVL403:
 4059 0810 00C0      		rjmp .L247
 4060               	.LVL404:
 4061               	.L168:
 650:main.c        **** 				}
 651:main.c        **** 			}
 652:main.c        **** 			else if (receivedChar == SET_OUTPUT) {
 4062               		.loc 3 652 0
 4063 0812 8F34      		cpi r24,lo8(79)
 4064 0814 01F0      		breq .+2
 4065 0816 00C0      		rjmp .L192
 653:main.c        **** 				if (portChar == 'A') {
 4066               		.loc 3 653 0
 4067 0818 1134      		cpi r17,lo8(65)
 4068 081a 01F4      		brne .L174
 654:main.c        **** 					DDRA |= (setValue);
 4069               		.loc 3 654 0
 4070 081c 8AB3      		in r24,0x1a
 4071 081e 682B      		or r22,r24
 4072               	.LVL405:
 4073               	.L239:
 4074 0820 6ABB      		out 0x1a,r22
 4075 0822 00C0      		rjmp .L192
 4076               	.LVL406:
 4077               	.L174:
 655:main.c        **** 				}
 656:main.c        **** 				else if (portChar == 'B') {
 4078               		.loc 3 656 0
 4079 0824 1234      		cpi r17,lo8(66)
 4080 0826 01F4      		brne .L175
 657:main.c        **** 					DDRB |= (setValue);
 4081               		.loc 3 657 0
 4082 0828 87B3      		in r24,0x17
 4083 082a 682B      		or r22,r24
 4084               	.LVL407:
 4085               	.L240:
 4086 082c 67BB      		out 0x17,r22
 4087 082e 00C0      		rjmp .L192
 4088               	.LVL408:
 4089               	.L175:
 658:main.c        **** 				}
 659:main.c        **** 				else if (portChar == 'C') {
 4090               		.loc 3 659 0
 4091 0830 1334      		cpi r17,lo8(67)
 4092 0832 01F4      		brne .L176
 660:main.c        **** 					DDRC |= (setValue);
 4093               		.loc 3 660 0
 4094 0834 84B3      		in r24,0x14
 4095 0836 682B      		or r22,r24
 4096               	.LVL409:
 4097               	.L245:
 4098 0838 64BB      		out 0x14,r22
 4099 083a 00C0      		rjmp .L192
 4100               	.LVL410:
 4101               	.L176:
 661:main.c        **** 				}
 662:main.c        **** 				else if (portChar == 'D') {
 4102               		.loc 3 662 0
 4103 083c 1434      		cpi r17,lo8(68)
 4104 083e 01F4      		brne .L177
 663:main.c        **** 					DDRD |= (setValue);
 4105               		.loc 3 663 0
 4106 0840 81B3      		in r24,0x11
 4107 0842 682B      		or r22,r24
 4108               	.LVL411:
 4109               	.L246:
 4110 0844 61BB      		out 0x11,r22
 4111 0846 00C0      		rjmp .L192
 4112               	.LVL412:
 4113               	.L177:
 664:main.c        **** 				}
 665:main.c        **** 				else if (portChar == 'E') {
 4114               		.loc 3 665 0
 4115 0848 1534      		cpi r17,lo8(69)
 4116 084a 01F0      		breq .+2
 4117 084c 00C0      		rjmp .L192
 666:main.c        **** 					DDRE |= (setValue);
 4118               		.loc 3 666 0
 4119 084e 86B1      		in r24,0x6
 4120 0850 682B      		or r22,r24
 4121               	.LVL413:
 4122               	.L247:
 4123 0852 66B9      		out 0x6,r22
 4124 0854 00C0      		rjmp .L192
 4125               	.LVL414:
 4126               	.L167:
 4127               	.LBE196:
 667:main.c        **** 				}
 668:main.c        **** 			}
 669:main.c        **** 			PORTD &= ~(1<<ACTIVITY_LED);
 670:main.c        **** 		}
 671:main.c        **** 		
 672:main.c        **** 		// Set pin output as low
 673:main.c        **** 		else if (receivedChar == SET_OUTPUT_LOW) {
 4128               		.loc 3 673 0
 4129 0856 8C34      		cpi r24,lo8(76)
 4130 0858 01F4      		brne .L178
 4131               	.LBB197:
 674:main.c        **** 			char portChar = USART_Receive();			
 4132               		.loc 3 674 0
 4133 085a 00D0      		rcall USART_Receive
 4134               	.LVL415:
 4135 085c 182F      		mov r17,r24
 4136               	.LVL416:
 675:main.c        **** 			usart_read_chars();
 4137               		.loc 3 675 0
 4138 085e 00D0      		rcall usart_read_chars
 4139               	.LVL417:
 676:main.c        **** 			uint8_t setValue = strtol(receivedBuffer, NULL, 16);
 4140               		.loc 3 676 0
 4141 0860 40E1      		ldi r20,lo8(16)
 4142 0862 50E0      		ldi r21,0
 4143 0864 60E0      		ldi r22,0
 4144 0866 70E0      		ldi r23,0
 4145 0868 80E0      		ldi r24,lo8(receivedBuffer)
 4146 086a 90E0      		ldi r25,hi8(receivedBuffer)
 4147 086c 00D0      		rcall strtol
 4148               	.LVL418:
 677:main.c        **** 			
 678:main.c        **** 			PORTD |= (1<<ACTIVITY_LED);
 4149               		.loc 3 678 0
 4150 086e 939A      		sbi 0x12,3
 679:main.c        **** 			if (portChar == 'A') {
 4151               		.loc 3 679 0
 4152 0870 1134      		cpi r17,lo8(65)
 4153 0872 01F4      		brne .L179
 680:main.c        **** 				PORTA &= ~(setValue);
 4154               		.loc 3 680 0
 4155 0874 8BB3      		in r24,0x1b
 4156 0876 6095      		com r22
 4157               	.LVL419:
 4158 0878 6823      		and r22,r24
 4159               	.LVL420:
 4160 087a 00C0      		rjmp .L244
 4161               	.LVL421:
 4162               	.L179:
 681:main.c        **** 			}
 682:main.c        **** 			else if (portChar == 'B') {
 4163               		.loc 3 682 0
 4164 087c 1234      		cpi r17,lo8(66)
 4165 087e 01F4      		brne .L181
 683:main.c        **** 				PORTB &= ~(setValue);
 4166               		.loc 3 683 0
 4167 0880 88B3      		in r24,0x18
 4168 0882 6095      		com r22
 4169               	.LVL422:
 4170 0884 6823      		and r22,r24
 4171               	.LVL423:
 4172 0886 00C0      		rjmp .L243
 4173               	.LVL424:
 4174               	.L181:
 684:main.c        **** 			}
 685:main.c        **** 			else if (portChar == 'C') {
 4175               		.loc 3 685 0
 4176 0888 1334      		cpi r17,lo8(67)
 4177 088a 01F4      		brne .L182
 686:main.c        **** 				PORTC &= ~(setValue);
 4178               		.loc 3 686 0
 4179 088c 85B3      		in r24,0x15
 4180 088e 6095      		com r22
 4181               	.LVL425:
 4182 0890 6823      		and r22,r24
 4183               	.LVL426:
 4184 0892 00C0      		rjmp .L242
 4185               	.LVL427:
 4186               	.L182:
 687:main.c        **** 			}
 688:main.c        **** 			else if (portChar == 'D') {
 4187               		.loc 3 688 0
 4188 0894 1434      		cpi r17,lo8(68)
 4189 0896 01F4      		brne .L183
 689:main.c        **** 				PORTD &= ~(setValue);
 4190               		.loc 3 689 0
 4191 0898 82B3      		in r24,0x12
 4192 089a 6095      		com r22
 4193               	.LVL428:
 4194 089c 6823      		and r22,r24
 4195               	.LVL429:
 4196 089e 00C0      		rjmp .L241
 4197               	.LVL430:
 4198               	.L183:
 690:main.c        **** 			}
 691:main.c        **** 			else if (portChar == 'E') {
 4199               		.loc 3 691 0
 4200 08a0 1534      		cpi r17,lo8(69)
 4201 08a2 01F0      		breq .+2
 4202 08a4 00C0      		rjmp .L192
 692:main.c        **** 				PORTE &= ~(setValue);
 4203               		.loc 3 692 0
 4204 08a6 87B1      		in r24,0x7
 4205 08a8 6095      		com r22
 4206               	.LVL431:
 4207 08aa 6823      		and r22,r24
 4208               	.LVL432:
 4209 08ac 00C0      		rjmp .L238
 4210               	.LVL433:
 4211               	.L178:
 4212               	.LBE197:
 693:main.c        **** 			}
 694:main.c        **** 			PORTD &= ~(1<<ACTIVITY_LED);
 695:main.c        **** 		}
 696:main.c        **** 		
 697:main.c        **** 		// Set pin output as high
 698:main.c        **** 		else if (receivedChar == SET_OUTPUT_HIGH) {
 4213               		.loc 3 698 0
 4214 08ae 8834      		cpi r24,lo8(72)
 4215 08b0 01F4      		brne .L184
 4216               	.LBB198:
 699:main.c        **** 			char portChar = USART_Receive();			
 4217               		.loc 3 699 0
 4218 08b2 00D0      		rcall USART_Receive
 4219               	.LVL434:
 4220 08b4 182F      		mov r17,r24
 4221               	.LVL435:
 700:main.c        **** 			usart_read_chars();
 4222               		.loc 3 700 0
 4223 08b6 00D0      		rcall usart_read_chars
 4224               	.LVL436:
 701:main.c        **** 			uint8_t setValue = strtol(receivedBuffer, NULL, 16);
 4225               		.loc 3 701 0
 4226 08b8 40E1      		ldi r20,lo8(16)
 4227 08ba 50E0      		ldi r21,0
 4228 08bc 60E0      		ldi r22,0
 4229 08be 70E0      		ldi r23,0
 4230 08c0 80E0      		ldi r24,lo8(receivedBuffer)
 4231 08c2 90E0      		ldi r25,hi8(receivedBuffer)
 4232 08c4 00D0      		rcall strtol
 4233               	.LVL437:
 702:main.c        **** 			
 703:main.c        **** 			PORTD |= (1<<ACTIVITY_LED);
 4234               		.loc 3 703 0
 4235 08c6 939A      		sbi 0x12,3
 704:main.c        **** 			if (portChar == 'A') {
 4236               		.loc 3 704 0
 4237 08c8 1134      		cpi r17,lo8(65)
 4238 08ca 01F4      		brne .L185
 705:main.c        **** 				PORTA |= (setValue);
 4239               		.loc 3 705 0
 4240 08cc 8BB3      		in r24,0x1b
 4241 08ce 682B      		or r22,r24
 4242               	.LVL438:
 4243               	.L244:
 4244 08d0 6BBB      		out 0x1b,r22
 4245 08d2 00C0      		rjmp .L192
 4246               	.LVL439:
 4247               	.L185:
 706:main.c        **** 			}
 707:main.c        **** 			else if (portChar == 'B') {
 4248               		.loc 3 707 0
 4249 08d4 1234      		cpi r17,lo8(66)
 4250 08d6 01F4      		brne .L187
 708:main.c        **** 				PORTB |= (setValue);
 4251               		.loc 3 708 0
 4252 08d8 88B3      		in r24,0x18
 4253 08da 682B      		or r22,r24
 4254               	.LVL440:
 4255               	.L243:
 4256 08dc 68BB      		out 0x18,r22
 4257 08de 00C0      		rjmp .L192
 4258               	.LVL441:
 4259               	.L187:
 709:main.c        **** 			}
 710:main.c        **** 			else if (portChar == 'C') {
 4260               		.loc 3 710 0
 4261 08e0 1334      		cpi r17,lo8(67)
 4262 08e2 01F4      		brne .L188
 711:main.c        **** 				PORTC |= (setValue);
 4263               		.loc 3 711 0
 4264 08e4 85B3      		in r24,0x15
 4265 08e6 682B      		or r22,r24
 4266               	.LVL442:
 4267               	.L242:
 4268 08e8 65BB      		out 0x15,r22
 4269 08ea 00C0      		rjmp .L192
 4270               	.LVL443:
 4271               	.L188:
 712:main.c        **** 			}
 713:main.c        **** 			else if (portChar == 'D') {
 4272               		.loc 3 713 0
 4273 08ec 1434      		cpi r17,lo8(68)
 4274 08ee 01F4      		brne .L189
 714:main.c        **** 				PORTD |= (setValue);
 4275               		.loc 3 714 0
 4276 08f0 82B3      		in r24,0x12
 4277 08f2 682B      		or r22,r24
 4278               	.LVL444:
 4279               	.L241:
 4280 08f4 62BB      		out 0x12,r22
 4281 08f6 00C0      		rjmp .L192
 4282               	.LVL445:
 4283               	.L189:
 715:main.c        **** 			}
 716:main.c        **** 			else if (portChar == 'E') {
 4284               		.loc 3 716 0
 4285 08f8 1534      		cpi r17,lo8(69)
 4286 08fa 01F4      		brne .L192
 717:main.c        **** 				PORTE |= (setValue);
 4287               		.loc 3 717 0
 4288 08fc 87B1      		in r24,0x7
 4289 08fe 682B      		or r22,r24
 4290               	.LVL446:
 4291               	.L238:
 4292 0900 67B9      		out 0x7,r22
 4293 0902 00C0      		rjmp .L192
 4294               	.L184:
 4295               	.LBE198:
 718:main.c        **** 			}
 719:main.c        **** 			PORTD &= ~(1<<ACTIVITY_LED);
 720:main.c        **** 		}
 721:main.c        **** 		
 722:main.c        **** 		// Read all pins of a PORT and return the value
 723:main.c        **** 		else if (receivedChar == READ_INPUT) {
 4296               		.loc 3 723 0
 4297 0904 8434      		cpi r24,lo8(68)
 4298 0906 01F4      		brne .L190
 4299               	.LBB199:
 724:main.c        **** 			char portChar = USART_Receive();			
 4300               		.loc 3 724 0
 4301 0908 00D0      		rcall USART_Receive
 4302               	.LVL447:
 725:main.c        **** 			
 726:main.c        **** 			PORTD |= (1<<ACTIVITY_LED);
 4303               		.loc 3 726 0
 4304 090a 939A      		sbi 0x12,3
 727:main.c        **** 			if (portChar == 'A') {
 4305               		.loc 3 727 0
 4306 090c 8134      		cpi r24,lo8(65)
 4307 090e 01F4      		brne .L191
 728:main.c        **** 				USART_Transmit(PINA);
 4308               		.loc 3 728 0
 4309 0910 89B3      		in r24,0x19
 4310               	.LVL448:
 4311 0912 00C0      		rjmp .L231
 4312               	.LVL449:
 4313               	.L191:
 729:main.c        **** 			}
 730:main.c        **** 			else if (portChar == 'B') {
 4314               		.loc 3 730 0
 4315 0914 8234      		cpi r24,lo8(66)
 4316 0916 01F4      		brne .L193
 731:main.c        **** 				USART_Transmit(PINB);
 4317               		.loc 3 731 0
 4318 0918 86B3      		in r24,0x16
 4319               	.LVL450:
 4320 091a 00C0      		rjmp .L231
 4321               	.LVL451:
 4322               	.L193:
 732:main.c        **** 			}
 733:main.c        **** 			else if (portChar == 'C') {
 4323               		.loc 3 733 0
 4324 091c 8334      		cpi r24,lo8(67)
 4325 091e 01F4      		brne .L194
 734:main.c        **** 				USART_Transmit(PINC);
 4326               		.loc 3 734 0
 4327 0920 83B3      		in r24,0x13
 4328               	.LVL452:
 4329 0922 00C0      		rjmp .L231
 4330               	.LVL453:
 4331               	.L194:
 735:main.c        **** 			}
 736:main.c        **** 			else if (portChar == 'D') {
 4332               		.loc 3 736 0
 4333 0924 8434      		cpi r24,lo8(68)
 4334 0926 01F4      		brne .L195
 737:main.c        **** 				USART_Transmit(PIND);
 4335               		.loc 3 737 0
 4336 0928 80B3      		in r24,0x10
 4337               	.LVL454:
 4338 092a 00C0      		rjmp .L231
 4339               	.LVL455:
 4340               	.L195:
 738:main.c        **** 			}
 739:main.c        **** 			else if (portChar == 'E') {
 4341               		.loc 3 739 0
 4342 092c 8534      		cpi r24,lo8(69)
 4343 092e 01F4      		brne .L192
 740:main.c        **** 				USART_Transmit(PINE);
 4344               		.loc 3 740 0
 4345 0930 85B1      		in r24,0x5
 4346               	.LVL456:
 4347               	.L231:
 4348 0932 00D0      		rcall USART_Transmit
 4349               	.LVL457:
 4350               	.L192:
 741:main.c        **** 			}
 742:main.c        **** 			PORTD &= ~(1<<ACTIVITY_LED);
 4351               		.loc 3 742 0
 4352 0934 9398      		cbi 0x12,3
 4353               	.LBE199:
 4354 0936 00C0      		rjmp .L93
 4355               	.LVL458:
 4356               	.L190:
 743:main.c        **** 		}
 744:main.c        **** 		
 745:main.c        **** 		// Set the reset common lines variable on or off, useful if you are controlling all the pins dire
 746:main.c        **** 		else if (receivedChar == RESET_COMMON_LINES) {
 4357               		.loc 3 746 0
 4358 0938 8D34      		cpi r24,lo8(77)
 4359 093a 01F4      		brne .L196
 4360               	.LBB200:
 747:main.c        **** 			char commonChar = USART_Receive();
 4361               		.loc 3 747 0
 4362 093c 00D0      		rcall USART_Receive
 4363               	.LVL459:
 748:main.c        **** 			if (commonChar == '1') {
 4364               		.loc 3 748 0
 4365 093e 8133      		cpi r24,lo8(49)
 4366 0940 01F4      		brne .L251
 749:main.c        **** 				resetCommonLines = 1;
 4367               		.loc 3 749 0
 4368 0942 91E0      		ldi r25,lo8(1)
 4369 0944 9A83      		std Y+2,r25
 4370 0946 00C0      		rjmp .L227
 4371               	.L251:
 750:main.c        **** 			}
 751:main.c        **** 			else if (commonChar == '0') {
 4372               		.loc 3 751 0
 4373 0948 8033      		cpi r24,lo8(48)
 4374 094a 01F0      		breq .+2
 4375 094c 00C0      		rjmp .L93
 752:main.c        **** 				resetCommonLines = 0;
 4376               		.loc 3 752 0
 4377 094e 1A82      		std Y+2,__zero_reg__
 4378 0950 00C0      		rjmp .L94
 4379               	.LVL460:
 4380               	.L196:
 4381               	.LBE200:
 753:main.c        **** 			}
 754:main.c        **** 		}
 755:main.c        **** 		
 756:main.c        **** 		// Send back the PCB version number
 757:main.c        **** 		else if (receivedChar == READ_PCB_VERSION) {
 4382               		.loc 3 757 0
 4383 0952 8836      		cpi r24,lo8(104)
 4384 0954 01F4      		brne .L197
 758:main.c        **** 			USART_Transmit(PCB_VERSION);
 4385               		.loc 3 758 0
 4386 0956 84E0      		ldi r24,lo8(4)
 4387 0958 00C0      		rjmp .L228
 4388               	.L197:
 759:main.c        **** 		}
 760:main.c        **** 		
 761:main.c        **** 		// Send back the firmware version number
 762:main.c        **** 		else if (receivedChar == READ_FIRMWARE_VERSION) {
 4389               		.loc 3 762 0
 4390 095a 8635      		cpi r24,lo8(86)
 4391 095c 01F4      		brne .L198
 763:main.c        **** 			USART_Transmit(FIRMWARE_VERSION);
 4392               		.loc 3 763 0
 4393 095e 8CE0      		ldi r24,lo8(12)
 4394               	.LVL461:
 4395               	.L228:
 4396 0960 00D0      		rcall USART_Transmit
 4397               	.LVL462:
 4398 0962 00C0      		rjmp .L93
 4399               	.LVL463:
 4400               	.L198:
 764:main.c        **** 		}
 765:main.c        **** 		
 766:main.c        **** 		// Reset the AVR if it matches the number
 767:main.c        **** 		else if (receivedChar == RESET_AVR) {
 4401               		.loc 3 767 0
 4402 0964 8A32      		cpi r24,lo8(42)
 4403 0966 01F0      		breq .+2
 4404 0968 00C0      		rjmp .L93
 4405               	.LBB201:
 768:main.c        **** 			usart_read_chars();
 4406               		.loc 3 768 0
 4407 096a 00D0      		rcall usart_read_chars
 4408               	.LVL464:
 769:main.c        **** 			uint32_t resetValue = strtol(receivedBuffer, NULL, 16);
 4409               		.loc 3 769 0
 4410 096c 40E1      		ldi r20,lo8(16)
 4411 096e 50E0      		ldi r21,0
 4412 0970 60E0      		ldi r22,0
 4413 0972 70E0      		ldi r23,0
 4414 0974 80E0      		ldi r24,lo8(receivedBuffer)
 4415 0976 90E0      		ldi r25,hi8(receivedBuffer)
 4416 0978 00D0      		rcall strtol
 4417               	.LVL465:
 770:main.c        **** 			if (resetValue == RESET_VALUE) {
 4418               		.loc 3 770 0
 4419 097a 613E      		cpi r22,-31
 4420 097c 754E      		sbci r23,-27
 4421 097e 8740      		sbci r24,7
 4422 0980 9105      		cpc r25,__zero_reg__
 4423 0982 01F0      		breq .+2
 4424 0984 00C0      		rjmp .L93
 771:main.c        **** 				// Clear watchdog flag
 772:main.c        **** 				MCUCSR &= ~(1<<WDRF);
 4425               		.loc 3 772 0
 4426 0986 84B7      		in r24,0x34
 4427 0988 877F      		andi r24,lo8(-9)
 4428 098a 84BF      		out 0x34,r24
 773:main.c        **** 				
 774:main.c        **** 				// Start timed sequence
 775:main.c        **** 				WDTCR = (1<<WDCE) | (1<<WDE);
 4429               		.loc 3 775 0
 4430 098c F8E1      		ldi r31,lo8(24)
 4431 098e F1BD      		out 0x21,r31
 776:main.c        **** 				
 777:main.c        **** 				// Reset in 250 ms
 778:main.c        **** 				WDTCR = (1<<WDP2) | (1<<WDE);
 4432               		.loc 3 778 0
 4433 0990 2CE0      		ldi r18,lo8(12)
 4434 0992 21BD      		out 0x21,r18
 4435               	.LVL466:
 4436               	.LBB202:
 4437               	.LBB203:
 4438               		.file 4 "c:\\winavr-20100110\\avr\\include\\util\\delay_basic.h"
   1:c:\winavr-20100110\avr\include\util\delay_basic.h **** /* Copyright (c) 2002, Marek Michalkiewicz
   2:c:\winavr-20100110\avr\include\util\delay_basic.h ****    Copyright (c) 2007 Joerg Wunsch
   3:c:\winavr-20100110\avr\include\util\delay_basic.h ****    All rights reserved.
   4:c:\winavr-20100110\avr\include\util\delay_basic.h **** 
   5:c:\winavr-20100110\avr\include\util\delay_basic.h ****    Redistribution and use in source and binary forms, with or without
   6:c:\winavr-20100110\avr\include\util\delay_basic.h ****    modification, are permitted provided that the following conditions are met:
   7:c:\winavr-20100110\avr\include\util\delay_basic.h **** 
   8:c:\winavr-20100110\avr\include\util\delay_basic.h ****    * Redistributions of source code must retain the above copyright
   9:c:\winavr-20100110\avr\include\util\delay_basic.h ****      notice, this list of conditions and the following disclaimer.
  10:c:\winavr-20100110\avr\include\util\delay_basic.h **** 
  11:c:\winavr-20100110\avr\include\util\delay_basic.h ****    * Redistributions in binary form must reproduce the above copyright
  12:c:\winavr-20100110\avr\include\util\delay_basic.h ****      notice, this list of conditions and the following disclaimer in
  13:c:\winavr-20100110\avr\include\util\delay_basic.h ****      the documentation and/or other materials provided with the
  14:c:\winavr-20100110\avr\include\util\delay_basic.h ****      distribution.
  15:c:\winavr-20100110\avr\include\util\delay_basic.h **** 
  16:c:\winavr-20100110\avr\include\util\delay_basic.h ****    * Neither the name of the copyright holders nor the names of
  17:c:\winavr-20100110\avr\include\util\delay_basic.h ****      contributors may be used to endorse or promote products derived
  18:c:\winavr-20100110\avr\include\util\delay_basic.h ****      from this software without specific prior written permission.
  19:c:\winavr-20100110\avr\include\util\delay_basic.h **** 
  20:c:\winavr-20100110\avr\include\util\delay_basic.h ****   THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
  21:c:\winavr-20100110\avr\include\util\delay_basic.h ****   AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
  22:c:\winavr-20100110\avr\include\util\delay_basic.h ****   IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
  23:c:\winavr-20100110\avr\include\util\delay_basic.h ****   ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE
  24:c:\winavr-20100110\avr\include\util\delay_basic.h ****   LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
  25:c:\winavr-20100110\avr\include\util\delay_basic.h ****   CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
  26:c:\winavr-20100110\avr\include\util\delay_basic.h ****   SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
  27:c:\winavr-20100110\avr\include\util\delay_basic.h ****   INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN
  28:c:\winavr-20100110\avr\include\util\delay_basic.h ****   CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
  29:c:\winavr-20100110\avr\include\util\delay_basic.h ****   ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
  30:c:\winavr-20100110\avr\include\util\delay_basic.h ****   POSSIBILITY OF SUCH DAMAGE. */
  31:c:\winavr-20100110\avr\include\util\delay_basic.h **** 
  32:c:\winavr-20100110\avr\include\util\delay_basic.h **** /* $Id$ */
  33:c:\winavr-20100110\avr\include\util\delay_basic.h **** 
  34:c:\winavr-20100110\avr\include\util\delay_basic.h **** #ifndef _UTIL_DELAY_BASIC_H_
  35:c:\winavr-20100110\avr\include\util\delay_basic.h **** #define _UTIL_DELAY_BASIC_H_ 1
  36:c:\winavr-20100110\avr\include\util\delay_basic.h **** 
  37:c:\winavr-20100110\avr\include\util\delay_basic.h **** #include <inttypes.h>
  38:c:\winavr-20100110\avr\include\util\delay_basic.h **** 
  39:c:\winavr-20100110\avr\include\util\delay_basic.h **** #if !defined(__DOXYGEN__)
  40:c:\winavr-20100110\avr\include\util\delay_basic.h **** static __inline__ void _delay_loop_1(uint8_t __count) __attribute__((__always_inline__));
  41:c:\winavr-20100110\avr\include\util\delay_basic.h **** static __inline__ void _delay_loop_2(uint16_t __count) __attribute__((__always_inline__));
  42:c:\winavr-20100110\avr\include\util\delay_basic.h **** #endif
  43:c:\winavr-20100110\avr\include\util\delay_basic.h **** 
  44:c:\winavr-20100110\avr\include\util\delay_basic.h **** /** \file */
  45:c:\winavr-20100110\avr\include\util\delay_basic.h **** /** \defgroup util_delay_basic <util/delay_basic.h>: Basic busy-wait delay loops
  46:c:\winavr-20100110\avr\include\util\delay_basic.h ****     \code
  47:c:\winavr-20100110\avr\include\util\delay_basic.h ****     #include <util/delay_basic.h>
  48:c:\winavr-20100110\avr\include\util\delay_basic.h ****     \endcode
  49:c:\winavr-20100110\avr\include\util\delay_basic.h **** 
  50:c:\winavr-20100110\avr\include\util\delay_basic.h ****     The functions in this header file implement simple delay loops
  51:c:\winavr-20100110\avr\include\util\delay_basic.h ****     that perform a busy-waiting.  They are typically used to
  52:c:\winavr-20100110\avr\include\util\delay_basic.h ****     facilitate short delays in the program execution.  They are
  53:c:\winavr-20100110\avr\include\util\delay_basic.h ****     implemented as count-down loops with a well-known CPU cycle
  54:c:\winavr-20100110\avr\include\util\delay_basic.h ****     count per loop iteration.  As such, no other processing can
  55:c:\winavr-20100110\avr\include\util\delay_basic.h ****     occur simultaneously.  It should be kept in mind that the
  56:c:\winavr-20100110\avr\include\util\delay_basic.h ****     functions described here do not disable interrupts.
  57:c:\winavr-20100110\avr\include\util\delay_basic.h **** 
  58:c:\winavr-20100110\avr\include\util\delay_basic.h ****     In general, for long delays, the use of hardware timers is
  59:c:\winavr-20100110\avr\include\util\delay_basic.h ****     much preferrable, as they free the CPU, and allow for
  60:c:\winavr-20100110\avr\include\util\delay_basic.h ****     concurrent processing of other events while the timer is
  61:c:\winavr-20100110\avr\include\util\delay_basic.h ****     running.  However, in particular for very short delays, the
  62:c:\winavr-20100110\avr\include\util\delay_basic.h ****     overhead of setting up a hardware timer is too much compared
  63:c:\winavr-20100110\avr\include\util\delay_basic.h ****     to the overall delay time.
  64:c:\winavr-20100110\avr\include\util\delay_basic.h **** 
  65:c:\winavr-20100110\avr\include\util\delay_basic.h ****     Two inline functions are provided for the actual delay algorithms.
  66:c:\winavr-20100110\avr\include\util\delay_basic.h **** 
  67:c:\winavr-20100110\avr\include\util\delay_basic.h **** */
  68:c:\winavr-20100110\avr\include\util\delay_basic.h **** 
  69:c:\winavr-20100110\avr\include\util\delay_basic.h **** /** \ingroup util_delay_basic
  70:c:\winavr-20100110\avr\include\util\delay_basic.h **** 
  71:c:\winavr-20100110\avr\include\util\delay_basic.h ****     Delay loop using an 8-bit counter \c __count, so up to 256
  72:c:\winavr-20100110\avr\include\util\delay_basic.h ****     iterations are possible.  (The value 256 would have to be passed
  73:c:\winavr-20100110\avr\include\util\delay_basic.h ****     as 0.)  The loop executes three CPU cycles per iteration, not
  74:c:\winavr-20100110\avr\include\util\delay_basic.h ****     including the overhead the compiler needs to setup the counter
  75:c:\winavr-20100110\avr\include\util\delay_basic.h ****     register.
  76:c:\winavr-20100110\avr\include\util\delay_basic.h **** 
  77:c:\winavr-20100110\avr\include\util\delay_basic.h ****     Thus, at a CPU speed of 1 MHz, delays of up to 768 microseconds
  78:c:\winavr-20100110\avr\include\util\delay_basic.h ****     can be achieved.
  79:c:\winavr-20100110\avr\include\util\delay_basic.h **** */
  80:c:\winavr-20100110\avr\include\util\delay_basic.h **** void
  81:c:\winavr-20100110\avr\include\util\delay_basic.h **** _delay_loop_1(uint8_t __count)
  82:c:\winavr-20100110\avr\include\util\delay_basic.h **** {
  83:c:\winavr-20100110\avr\include\util\delay_basic.h **** 	__asm__ volatile (
  84:c:\winavr-20100110\avr\include\util\delay_basic.h **** 		"1: dec %0" "\n\t"
  85:c:\winavr-20100110\avr\include\util\delay_basic.h **** 		"brne 1b"
  86:c:\winavr-20100110\avr\include\util\delay_basic.h **** 		: "=r" (__count)
  87:c:\winavr-20100110\avr\include\util\delay_basic.h **** 		: "0" (__count)
  88:c:\winavr-20100110\avr\include\util\delay_basic.h **** 	);
  89:c:\winavr-20100110\avr\include\util\delay_basic.h **** }
  90:c:\winavr-20100110\avr\include\util\delay_basic.h **** 
  91:c:\winavr-20100110\avr\include\util\delay_basic.h **** /** \ingroup util_delay_basic
  92:c:\winavr-20100110\avr\include\util\delay_basic.h **** 
  93:c:\winavr-20100110\avr\include\util\delay_basic.h ****     Delay loop using a 16-bit counter \c __count, so up to 65536
  94:c:\winavr-20100110\avr\include\util\delay_basic.h ****     iterations are possible.  (The value 65536 would have to be
  95:c:\winavr-20100110\avr\include\util\delay_basic.h ****     passed as 0.)  The loop executes four CPU cycles per iteration,
  96:c:\winavr-20100110\avr\include\util\delay_basic.h ****     not including the overhead the compiler requires to setup the
  97:c:\winavr-20100110\avr\include\util\delay_basic.h ****     counter register pair.
  98:c:\winavr-20100110\avr\include\util\delay_basic.h **** 
  99:c:\winavr-20100110\avr\include\util\delay_basic.h ****     Thus, at a CPU speed of 1 MHz, delays of up to about 262.1
 100:c:\winavr-20100110\avr\include\util\delay_basic.h ****     milliseconds can be achieved.
 101:c:\winavr-20100110\avr\include\util\delay_basic.h ****  */
 102:c:\winavr-20100110\avr\include\util\delay_basic.h **** void
 103:c:\winavr-20100110\avr\include\util\delay_basic.h **** _delay_loop_2(uint16_t __count)
 104:c:\winavr-20100110\avr\include\util\delay_basic.h **** {
 105:c:\winavr-20100110\avr\include\util\delay_basic.h **** 	__asm__ volatile (
 4439               		.loc 4 105 0
 4440 0994 8FEF      		ldi r24,lo8(-1)
 4441 0996 9FEF      		ldi r25,lo8(-1)
 4442               	/* #APP */
 4443               	 ;  105 "c:\winavr-20100110\avr\include\util\delay_basic.h" 1
 4444 0998 0197      		1: sbiw r24,1
 4445 099a 01F4      		brne 1b
 4446               	 ;  0 "" 2
 4447               	.LVL467:
 4448               	/* #NOAPP */
 4449 099c 00C0      		rjmp .L93
 4450               	.LBE203:
 4451               	.LBE202:
 4452               	.LBE201:
 4453               		.cfi_endproc
 4454               	.LFE45:
 4456               	.global	cartMode
 4457               		.data
 4460               	cartMode:
 4461 0000 02        		.byte	2
 4462               	.global	lastBankAccessed
 4463               		.section .bss
 4466               	lastBankAccessed:
 4467 0000 00        		.zero	1
 4468               	.global	flashBank1CommandWrites
 4471               	flashBank1CommandWrites:
 4472 0001 00        		.zero	1
 4473               		.comm	flashWriteCycle,12,1
 4474               		.comm	flashWriteWePin,1,1
 4475               		.comm	flashChipIdBuffer,2,1
 4476               		.comm	eepromBuffer,8,1
 4477               		.comm	receivedChar,1,1
 4478               		.comm	receivedBuffer,256,1
 4479               		.text
 4480               	.Letext0:
 4481               		.file 5 "c:\\winavr-20100110\\avr\\include\\stdint.h"
 4482               		.file 6 "c:\\winavr-20100110\\avr\\include\\stdlib.h"
DEFINED SYMBOLS
                            *ABS*:00000000 main.c
C:\Users\Alex\AppData\Local\Temp\ccSUytsT.s:2      *ABS*:0000003e __SP_H__
C:\Users\Alex\AppData\Local\Temp\ccSUytsT.s:3      *ABS*:0000003d __SP_L__
C:\Users\Alex\AppData\Local\Temp\ccSUytsT.s:4      *ABS*:0000003f __SREG__
C:\Users\Alex\AppData\Local\Temp\ccSUytsT.s:5      *ABS*:00000000 __tmp_reg__
C:\Users\Alex\AppData\Local\Temp\ccSUytsT.s:6      *ABS*:00000001 __zero_reg__
C:\Users\Alex\AppData\Local\Temp\ccSUytsT.s:12     .text:00000000 USART_Receive
C:\Users\Alex\AppData\Local\Temp\ccSUytsT.s:34     .text:00000008 USART_Transmit
C:\Users\Alex\AppData\Local\Temp\ccSUytsT.s:55     .text:00000010 usart_read_bytes
                            *COM*:00000100 receivedBuffer
C:\Users\Alex\AppData\Local\Temp\ccSUytsT.s:118    .text:0000003a usart_read_chars
C:\Users\Alex\AppData\Local\Temp\ccSUytsT.s:158    .text:00000050 rd_wr_csmreq_cs2_reset
C:\Users\Alex\AppData\Local\Temp\ccSUytsT.s:180    .text:0000005a gb_mode
C:\Users\Alex\AppData\Local\Temp\ccSUytsT.s:207    .text:0000006a set_16bit_address
C:\Users\Alex\AppData\Local\Temp\ccSUytsT.s:226    .text:00000070 read_8bit_data
C:\Users\Alex\AppData\Local\Temp\ccSUytsT.s:266    .text:00000082 write_8bit_data
C:\Users\Alex\AppData\Local\Temp\ccSUytsT.s:331    .text:000000ae gba_mode
C:\Users\Alex\AppData\Local\Temp\ccSUytsT.s:358    .text:000000be gba_set_24bit_address
C:\Users\Alex\AppData\Local\Temp\ccSUytsT.s:411    .text:000000ea gba_read_16bit_data
C:\Users\Alex\AppData\Local\Temp\ccSUytsT.s:459    .text:00000108 gba_read_ram_8bit_data
C:\Users\Alex\AppData\Local\Temp\ccSUytsT.s:499    .text:0000011a gba_write_ram_8bit_data
C:\Users\Alex\AppData\Local\Temp\ccSUytsT.s:553    .text:0000013a gba_eeprom_mode
C:\Users\Alex\AppData\Local\Temp\ccSUytsT.s:581    .text:0000014c gba_eeprom_set_address
C:\Users\Alex\AppData\Local\Temp\ccSUytsT.s:720    .text:000001b4 gba_eeprom_read
                            *COM*:00000008 eepromBuffer
C:\Users\Alex\AppData\Local\Temp\ccSUytsT.s:852    .text:0000020e gba_eeprom_write
C:\Users\Alex\AppData\Local\Temp\ccSUytsT.s:968    .text:00000262 flash_write_bus_cycle
C:\Users\Alex\AppData\Local\Temp\ccSUytsT.s:1014   .text:0000027c flash_read_chip_id
                            *COM*:00000002 flashChipIdBuffer
C:\Users\Alex\AppData\Local\Temp\ccSUytsT.s:1119   .text:000002e6 flash_switch_bank
C:\Users\Alex\AppData\Local\Temp\ccSUytsT.s:1168   .text:0000030c flash_erase_4k_sector
C:\Users\Alex\AppData\Local\Temp\ccSUytsT.s:1243   .text:00000354 flash_write_byte
C:\Users\Alex\AppData\Local\Temp\ccSUytsT.s:1314   .text:0000038c flash_write_sector
C:\Users\Alex\AppData\Local\Temp\ccSUytsT.s:1427   .text:000003f8 gb_flash_read_byte
C:\Users\Alex\AppData\Local\Temp\ccSUytsT.s:1467   .text:0000040a gb_flash_write_bus_cycle
                            *COM*:00000001 flashWriteWePin
C:\Users\Alex\AppData\Local\Temp\ccSUytsT.s:1548   .text:00000438 gb_flash_write_byte
                            *COM*:0000000c flashWriteCycle
C:\Users\Alex\AppData\Local\Temp\ccSUytsT.s:1648   .text:0000049c gb_flash_write_byte_bank1_commands
C:\Users\Alex\AppData\Local\Temp\ccSUytsT.s:4466   .bss:00000000 lastBankAccessed
C:\Users\Alex\AppData\Local\Temp\ccSUytsT.s:1811   .text:00000530 gba_flash_write_bus_cycle
C:\Users\Alex\AppData\Local\Temp\ccSUytsT.s:1877   .text:00000560 gba_flash_write_cycle_start_swapped
C:\Users\Alex\AppData\Local\Temp\ccSUytsT.s:2001   .text:000005c0 gba_flash_write_cycle_start
C:\Users\Alex\AppData\Local\Temp\ccSUytsT.s:2123   .text:0000061c gba_flash_write_byte
C:\Users\Alex\AppData\Local\Temp\ccSUytsT.s:2231   .text:00000672 setup
C:\Users\Alex\AppData\Local\Temp\ccSUytsT.s:4460   .data:00000000 cartMode
C:\Users\Alex\AppData\Local\Temp\ccSUytsT.s:2327   .text.startup:00000000 main
                            *COM*:00000001 receivedChar
C:\Users\Alex\AppData\Local\Temp\ccSUytsT.s:4471   .bss:00000001 flashBank1CommandWrites

UNDEFINED SYMBOLS
strtol
atoi
__do_copy_data
__do_clear_bss
